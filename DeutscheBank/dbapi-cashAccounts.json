{
  "openapi": "3.0.1",
  "info": {
    "title": "dbapi-cashAccounts",
    "description": "Gives you an overview of all savings and current accounts of your customers.",
    "termsOfService": "https://developer.db.com/termsandconditions",
    "contact": {
      "url": "https://developer.db.com/contact",
      "email": "bank.api@db.com"
    },
    "version": "v2"
  },
  "servers": [
    {
      "url": "https://simulator-api.db.com:443/gw/dbapi/banking/cashAccounts/v2"
    }
  ],
  "tags": [
    {
      "name": "Cash Accounts",
      "description": "Gives you an overview of all savings and current accounts of your customers. With this api, you can retrieve details such as IBAN, BIC or account type which you can then use for further inquiries on the accounts."
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Cash Accounts"
        ],
        "summary": "Reads all cash accounts of a customer.",
        "description": "Reads all accounts of a customer. If given IBAN is not valid or does not represent an account of the current user, an empty result is returned.",
        "operationId": "getCashAccounts",
        "parameters": [
          {
            "name": "iban",
            "in": "query",
            "description": "IBAN representing an account of the current user.",
            "schema": {
              "maxLength": 34,
              "minLength": 5,
              "pattern": "[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}",
              "type": "string"
            }
          },
          {
            "name": "currencyCode",
            "in": "query",
            "description": "ISO 4217 Alpha 3 currency code.",
            "schema": {
              "pattern": "[A-Z]{3}",
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "the number of items of a page.",
            "schema": {
              "maximum": 100,
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "the page to be returned.",
            "schema": {
              "minimum": 0,
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "accountTypeFilter",
            "in": "query",
            "description": "optional - filter the result by account type, default ALL.",
            "schema": {
              "type": "string",
              "enum": [
                "CURRENT_ACCOUNT",
                "DEPOSIT_ACCOUNT",
                "ALL"
              ],
              "default": "ALL"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "totalItems": {
                      "minimum": 0,
                      "type": "integer",
                      "description": "Cumulated number of items across all pages for your request parameters.",
                      "format": "int32"
                    },
                    "limit": {
                      "minimum": 0,
                      "type": "integer",
                      "description": "The number of items of a page.",
                      "format": "int32"
                    },
                    "offset": {
                      "minimum": 0,
                      "type": "integer",
                      "description": "The page to be returned.",
                      "format": "int32"
                    },
                    "accounts": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/CashAccount"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 122,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 9007,
                    "message": "Invalid currency code"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_auth_code": [
              "read_accounts",
              "read_accounts_list",
              "verify_account_ownership"
            ]
          },
          {
            "api_implicit": [
              "read_accounts",
              "read_accounts_list",
              "verify_account_ownership"
            ]
          }
        ]
      }
    },
    "/brand": {
      "get": {
        "tags": [
          "Cash Accounts"
        ],
        "summary": "Retrieves brand information for a given IBAN.",
        "description": "Retrieves the brand for a given IBAN. This endpoint is applicable to specific use-cases only. Please get in touch with us on specifics.",
        "operationId": "getBrand",
        "parameters": [
          {
            "name": "iban",
            "in": "query",
            "description": "IBAN representing an account of a customer",
            "required": true,
            "schema": {
              "maxLength": 34,
              "minLength": 5,
              "pattern": "[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}",
              "type": "string"
            }
          },
          {
            "name": "Correlation-Id",
            "in": "header",
            "description": "Free form key controlled by the caller e.g. uuid",
            "required": false,
            "schema": {
              "maxLength": 50,
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BrandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Unsuccessful operation, returns http status 400. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 2,
                    "message": "Invalid value for %s."
                  },
                  {
                    "code": 114,
                    "message": "Unable to identify transaction by Id."
                  },
                  {
                    "code": 122,
                    "message": "Invalid OTP."
                  },
                  {
                    "code": 127,
                    "message": "Booking date from must precede booking date to."
                  },
                  {
                    "code": 131,
                    "message": "Invalid value for 'sortBy'. Valid values are 'bookingDate[ASC]' and 'bookingDate[DESC]'."
                  },
                  {
                    "code": 9007,
                    "message": "Invalid currency code"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unsuccessful operation, returns http status 401. See 'example' property for possible values.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "example": [
                  {
                    "code": 401,
                    "message": "The requested function requires a SCA Level Authentication."
                  }
                ]
              }
            }
          }
        },
        "security": [
          {
            "api_client_credential": [
              "read_brand"
            ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "CashAccount": {
        "required": [
          "accountType",
          "iban",
          "productDescription"
        ],
        "type": "object",
        "properties": {
          "iban": {
            "$ref": "#/components/schemas/IBAN"
          },
          "currencyCode": {
            "$ref": "#/components/schemas/CurrencyCode"
          },
          "bic": {
            "type": "string",
            "description": "BIC of the cash account"
          },
          "accountType": {
            "type": "string",
            "description": "Type of the cash account"
          },
          "currentBalance": {
            "type": "number",
            "description": "Booked balance in EUR"
          },
          "productDescription": {
            "type": "string",
            "description": "Description of the product"
          }
        },
        "description": "A cash account."
      },
      "BrandResponse": {
        "required": [
          "brand"
        ],
        "type": "object",
        "properties": {
          "brand": {
            "type": "string",
            "description": "Brand of the cash account",
            "enum": [
              "UNDEFINED",
              "DEUTSCHE_BANK",
              "POSTBANK",
              "DSL_BANK",
              "FYRST",
              "NORISBANK",
              "DB_EUROPE"
            ]
          }
        }
      },
      "ErrorResponse": {
        "required": [
          "code",
          "message"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The error code"
          },
          "message": {
            "type": "string",
            "description": "Description of the belonging error code."
          },
          "messageId": {
            "type": "string",
            "description": "dbAPI internal message-id (unique identifier) that allow reference to each of your API calls."
          }
        },
        "description": "Default error response message"
      },
      "IBAN": {
        "pattern": "[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}",
        "type": "string",
        "description": "The IBAN of this account."
      },
      "CurrencyCode": {
        "pattern": "[A-Z]{3}",
        "type": "string",
        "description": "ISO 4217 Alpha 3 currency code.",
        "example": "EUR"
      }
    },
    "securitySchemes": {
      "api_auth_code": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://simulator-api.db.com:443/gw/oidc/authorize",
            "tokenUrl": "https://simulator-api.db.com:443/gw/oidc/token",
            "scopes": {
              "read_accounts": "Grants read access to all basic cash account data like the current balance and a general account overview for the given customer.",
              "read_accounts_list": "Grants read access to basic cash account data and a general account overview for the given customer.",
              "verify_account_ownership": "Performs account verification for the given customer.",
              "openid": "Request access to OpenId Connect functionality",
              "offline_access": "Request an OAuth2 Refresh Token"
            }
          }
        }
      },
      "api_implicit": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://simulator-api.db.com:443/gw/oidc/authorize",
            "scopes": {
              "read_accounts": "Grants read access to all basic cash account data like the current balance and a general account overview for the given customer.",
              "read_accounts_list": "Grants read access to basic cash account data and a general account overview for the given customer.",
              "verify_account_ownership": "Performs account verification for the given customer.",
              "openid": "Request access to OpenId Connect functionality"
            }
          }
        }
      },
      "api_client_credential": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://simulator-api.db.com:443/gw/oidc/token",
            "scopes": {
              "read_brand": "Grants permission to get data from the /brand endpoint. Only available with client credential grant flow right now."
            }
          }
        }
      }
    }
  },
  "x-original-swagger-version": "2.0"
}