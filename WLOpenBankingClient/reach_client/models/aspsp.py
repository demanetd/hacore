# coding: utf-8

"""
    Open Banking Reach

    The Reach Directory is used to get the a list of ASPSP's which can be reached for a specific Service.  #### PSD2 Sandbox     The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ASPSP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aspsp_id': 'str',
        'name': 'list[NameLabel]',
        'bic': 'str',
        'country': 'Country',
        'category_label': 'list[str]',
        'details': 'list[DetailsType]',
        'options': 'list[OptionType]',
        'group_id': 'str',
        'aspsp_specific_labels': 'list[AspspSpecificLabel]'
    }

    attribute_map = {
        'aspsp_id': 'AspspId',
        'name': 'Name',
        'bic': 'BIC',
        'country': 'Country',
        'category_label': 'CategoryLabel',
        'details': 'Details',
        'options': 'Options',
        'group_id': 'GroupId',
        'aspsp_specific_labels': 'AspspSpecificLabels'
    }

    def __init__(self, aspsp_id=None, name=None, bic=None, country=None, category_label=None, details=None, options=None, group_id=None, aspsp_specific_labels=None):  # noqa: E501
        """ASPSP - a model defined in Swagger"""  # noqa: E501
        self._aspsp_id = None
        self._name = None
        self._bic = None
        self._country = None
        self._category_label = None
        self._details = None
        self._options = None
        self._group_id = None
        self._aspsp_specific_labels = None
        self.discriminator = None
        self.aspsp_id = aspsp_id
        self.name = name
        if bic is not None:
            self.bic = bic
        if country is not None:
            self.country = country
        if category_label is not None:
            self.category_label = category_label
        if details is not None:
            self.details = details
        if options is not None:
            self.options = options
        if group_id is not None:
            self.group_id = group_id
        if aspsp_specific_labels is not None:
            self.aspsp_specific_labels = aspsp_specific_labels

    @property
    def aspsp_id(self):
        """Gets the aspsp_id of this ASPSP.  # noqa: E501

        Id of the ASPSP used within the Open Banking Service, to be used in other API’s to identify the ASPSP  # noqa: E501

        :return: The aspsp_id of this ASPSP.  # noqa: E501
        :rtype: str
        """
        return self._aspsp_id

    @aspsp_id.setter
    def aspsp_id(self, aspsp_id):
        """Sets the aspsp_id of this ASPSP.

        Id of the ASPSP used within the Open Banking Service, to be used in other API’s to identify the ASPSP  # noqa: E501

        :param aspsp_id: The aspsp_id of this ASPSP.  # noqa: E501
        :type: str
        """
        if aspsp_id is None:
            raise ValueError("Invalid value for `aspsp_id`, must not be `None`")  # noqa: E501

        self._aspsp_id = aspsp_id

    @property
    def name(self):
        """Gets the name of this ASPSP.  # noqa: E501


        :return: The name of this ASPSP.  # noqa: E501
        :rtype: list[NameLabel]
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ASPSP.


        :param name: The name of this ASPSP.  # noqa: E501
        :type: list[NameLabel]
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def bic(self):
        """Gets the bic of this ASPSP.  # noqa: E501

        BIC of the ASPSP  # noqa: E501

        :return: The bic of this ASPSP.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this ASPSP.

        BIC of the ASPSP  # noqa: E501

        :param bic: The bic of this ASPSP.  # noqa: E501
        :type: str
        """

        self._bic = bic

    @property
    def country(self):
        """Gets the country of this ASPSP.  # noqa: E501


        :return: The country of this ASPSP.  # noqa: E501
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ASPSP.


        :param country: The country of this ASPSP.  # noqa: E501
        :type: Country
        """

        self._country = country

    @property
    def category_label(self):
        """Gets the category_label of this ASPSP.  # noqa: E501


        :return: The category_label of this ASPSP.  # noqa: E501
        :rtype: list[str]
        """
        return self._category_label

    @category_label.setter
    def category_label(self, category_label):
        """Sets the category_label of this ASPSP.


        :param category_label: The category_label of this ASPSP.  # noqa: E501
        :type: list[str]
        """

        self._category_label = category_label

    @property
    def details(self):
        """Gets the details of this ASPSP.  # noqa: E501

        This block only shows when query parameter allDetails = true  # noqa: E501

        :return: The details of this ASPSP.  # noqa: E501
        :rtype: list[DetailsType]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ASPSP.

        This block only shows when query parameter allDetails = true  # noqa: E501

        :param details: The details of this ASPSP.  # noqa: E501
        :type: list[DetailsType]
        """

        self._details = details

    @property
    def options(self):
        """Gets the options of this ASPSP.  # noqa: E501

        List of directory service options for the given ASPSP  # noqa: E501

        :return: The options of this ASPSP.  # noqa: E501
        :rtype: list[OptionType]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ASPSP.

        List of directory service options for the given ASPSP  # noqa: E501

        :param options: The options of this ASPSP.  # noqa: E501
        :type: list[OptionType]
        """

        self._options = options

    @property
    def group_id(self):
        """Gets the group_id of this ASPSP.  # noqa: E501

        An id referencing a group this ASPSP is part of.  # noqa: E501

        :return: The group_id of this ASPSP.  # noqa: E501
        :rtype: str
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this ASPSP.

        An id referencing a group this ASPSP is part of.  # noqa: E501

        :param group_id: The group_id of this ASPSP.  # noqa: E501
        :type: str
        """

        self._group_id = group_id

    @property
    def aspsp_specific_labels(self):
        """Gets the aspsp_specific_labels of this ASPSP.  # noqa: E501

        List of Specific Labels for the given ASPSP  # noqa: E501

        :return: The aspsp_specific_labels of this ASPSP.  # noqa: E501
        :rtype: list[AspspSpecificLabel]
        """
        return self._aspsp_specific_labels

    @aspsp_specific_labels.setter
    def aspsp_specific_labels(self, aspsp_specific_labels):
        """Sets the aspsp_specific_labels of this ASPSP.

        List of Specific Labels for the given ASPSP  # noqa: E501

        :param aspsp_specific_labels: The aspsp_specific_labels of this ASPSP.  # noqa: E501
        :type: list[AspspSpecificLabel]
        """

        self._aspsp_specific_labels = aspsp_specific_labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ASPSP, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ASPSP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
