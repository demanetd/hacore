
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DebtorContactDetails:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'bool',
        'last_name': 'bool',
        'phone_number': 'bool',
        'email': 'bool'
    }

    attribute_map = {
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'phone_number': 'PhoneNumber',
        'email': 'Email'
    }

    def __init__(self, first_name=False, last_name=False, phone_number=False, email=False):  # noqa: E501
        """DebtorContactDetails - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._phone_number = None
        self._email = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone_number is not None:
            self.phone_number = phone_number
        if email is not None:
            self.email = email

    @property
    def first_name(self):
        """Gets the first_name of this DebtorContactDetails.  # noqa: E501

        Request to provide the first name of the debtor   # noqa: E501

        :return: The first_name of this DebtorContactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DebtorContactDetails.

        Request to provide the first name of the debtor   # noqa: E501

        :param first_name: The first_name of this DebtorContactDetails.  # noqa: E501
        :type: bool
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this DebtorContactDetails.  # noqa: E501

        Request to provide the last name of the debtor   # noqa: E501

        :return: The last_name of this DebtorContactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DebtorContactDetails.

        Request to provide the last name of the debtor   # noqa: E501

        :param last_name: The last_name of this DebtorContactDetails.  # noqa: E501
        :type: bool
        """

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this DebtorContactDetails.  # noqa: E501

        Request to provide the phone number of the debtor in E.164 format   # noqa: E501

        :return: The phone_number of this DebtorContactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this DebtorContactDetails.

        Request to provide the phone number of the debtor in E.164 format   # noqa: E501

        :param phone_number: The phone_number of this DebtorContactDetails.  # noqa: E501
        :type: bool
        """

        self._phone_number = phone_number

    @property
    def email(self):
        """Gets the email of this DebtorContactDetails.  # noqa: E501

        Request to provide the e-mail address of the debtor   # noqa: E501

        :return: The email of this DebtorContactDetails.  # noqa: E501
        :rtype: bool
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DebtorContactDetails.

        Request to provide the e-mail address of the debtor   # noqa: E501

        :param email: The email of this DebtorContactDetails.  # noqa: E501
        :type: bool
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebtorContactDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebtorContactDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
