
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GetRegistrationResponseStatus:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_type': 'ProductType',
        'registration_status': 'RegistrationStatusEnum',
        'use_case_status': 'str',
        'parameter': 'Parameter',
        'psus': 'list[GetRegistrationResponseStatusPsus]'
    }

    attribute_map = {
        'product_type': 'ProductType',
        'registration_status': 'RegistrationStatus',
        'use_case_status': 'UseCaseStatus',
        'parameter': 'Parameter',
        'psus': 'Psus'
    }

    def __init__(self, product_type=None, registration_status=None, use_case_status=None, parameter=None, psus=None):  # noqa: E501
        """GetRegistrationResponseStatus - a model defined in Swagger"""  # noqa: E501
        self._product_type = None
        self._registration_status = None
        self._use_case_status = None
        self._parameter = None
        self._psus = None
        self.discriminator = None
        self.product_type = product_type
        if registration_status is not None:
            self.registration_status = registration_status
        if use_case_status is not None:
            self.use_case_status = use_case_status
        if parameter is not None:
            self.parameter = parameter
        self.psus = psus

    @property
    def product_type(self):
        """Gets the product_type of this GetRegistrationResponseStatus.  # noqa: E501

        :return: The product_type of this GetRegistrationResponseStatus.  # noqa: E501
        :rtype: ProductType
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this GetRegistrationResponseStatus.

        :param product_type: The product_type of this GetRegistrationResponseStatus.  # noqa: E501
        :type: ProductType
        """
        if product_type is None:
            raise ValueError("Invalid value for `product_type`, must not be `None`")  # noqa: E501

        self._product_type = product_type

    @property
    def registration_status(self):
        """Gets the registration_status of this GetRegistrationResponseStatus.  # noqa: E501

        :return: The registration_status of this GetRegistrationResponseStatus.  # noqa: E501
        :rtype: RegistrationStatusEnum
        """
        return self._registration_status

    @registration_status.setter
    def registration_status(self, registration_status):
        """Sets the registration_status of this GetRegistrationResponseStatus.

        :param registration_status: The registration_status of this GetRegistrationResponseStatus.  # noqa: E501
        :type: RegistrationStatusEnum
        """

        self._registration_status = registration_status

    @property
    def use_case_status(self):
        """Gets the use_case_status of this GetRegistrationResponseStatus.  # noqa: E501

        Status indicating the progress of processing in the Open Banking platform for a given use case.    Credit Scoring:   - REGISTRATION_CREATED : A registration is created, waiting for consent sessions to be finalized.   - REGISTRATION_FINALISED : All PSUs in the registrations have completed their consent flow, data collection will start.   - DATA_COLLECTION_DONE : AIS data has been retrieved for all PSUs in the registration and has been sent for processing.   - DATA_COLLECTION_ERROR : An error happened during the data collection, the processing will not happen.   - ANALYSIS_FINALISED : The Credit Insight processing module has given feedback regarding the processing, report results will / have been sent to the InitiatingParty endpoint.   # noqa: E501

        :return: The use_case_status of this GetRegistrationResponseStatus.  # noqa: E501
        :rtype: str
        """
        return self._use_case_status

    @use_case_status.setter
    def use_case_status(self, use_case_status):
        """Sets the use_case_status of this GetRegistrationResponseStatus.

        Status indicating the progress of processing in the Open Banking platform for a given use case.    Credit Scoring:   - REGISTRATION_CREATED : A registration is created, waiting for consent sessions to be finalized.   - REGISTRATION_FINALISED : All PSUs in the registrations have completed their consent flow, data collection will start.   - DATA_COLLECTION_DONE : AIS data has been retrieved for all PSUs in the registration and has been sent for processing.   - DATA_COLLECTION_ERROR : An error happened during the data collection, the processing will not happen.   - ANALYSIS_FINALISED : The Credit Insight processing module has given feedback regarding the processing, report results will / have been sent to the InitiatingParty endpoint.   # noqa: E501

        :param use_case_status: The use_case_status of this GetRegistrationResponseStatus.  # noqa: E501
        :type: str
        """

        self._use_case_status = use_case_status

    @property
    def parameter(self):
        """Gets the parameter of this GetRegistrationResponseStatus.  # noqa: E501

        :return: The parameter of this GetRegistrationResponseStatus.  # noqa: E501
        :rtype: Parameter
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this GetRegistrationResponseStatus.

        :param parameter: The parameter of this GetRegistrationResponseStatus.  # noqa: E501
        :type: Parameter
        """

        self._parameter = parameter

    @property
    def psus(self):
        """Gets the psus of this GetRegistrationResponseStatus.  # noqa: E501

        :return: The psus of this GetRegistrationResponseStatus.  # noqa: E501
        :rtype: list[GetRegistrationResponseStatusPsus]
        """
        return self._psus

    @psus.setter
    def psus(self, psus):
        """Sets the psus of this GetRegistrationResponseStatus.

        :param psus: The psus of this GetRegistrationResponseStatus.  # noqa: E501
        :type: list[GetRegistrationResponseStatusPsus]
        """
        if psus is None:
            raise ValueError("Invalid value for `psus`, must not be `None`")  # noqa: E501

        self._psus = psus

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetRegistrationResponseStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetRegistrationResponseStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
