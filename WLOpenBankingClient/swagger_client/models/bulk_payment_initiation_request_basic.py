
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BulkPaymentInitiationRequestBasic:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_pre_authentication': 'bool',
        'initiating_party_reference_id': 'str',
        'preferred_sca_method': 'list[str]',
        'transaction_type': 'str',
        'expiration_period': 'int',
        'debtor_information': 'DebtorInformation',
        'charge_bearer': 'str',
        'category_purpose': 'CategoryPurposeEnum',
        'payment_context': 'RiskInformation',
        'payments': 'list[BulkPaymentsDetails]'
    }

    attribute_map = {
        'use_pre_authentication': 'UsePreAuthentication',
        'initiating_party_reference_id': 'InitiatingPartyReferenceId',
        'preferred_sca_method': 'PreferredScaMethod',
        'transaction_type': 'TransactionType',
        'expiration_period': 'ExpirationPeriod',
        'debtor_information': 'DebtorInformation',
        'charge_bearer': 'ChargeBearer',
        'category_purpose': 'CategoryPurpose',
        'payment_context': 'PaymentContext',
        'payments': 'Payments'
    }

    def __init__(self, use_pre_authentication=False, initiating_party_reference_id=None, preferred_sca_method=None, transaction_type='Online', expiration_period=None, debtor_information=None, charge_bearer=None, category_purpose=None, payment_context=None, payments=None):  # noqa: E501
        """BulkPaymentInitiationRequestBasic - a model defined in Swagger"""  # noqa: E501
        self._use_pre_authentication = None
        self._initiating_party_reference_id = None
        self._preferred_sca_method = None
        self._transaction_type = None
        self._expiration_period = None
        self._debtor_information = None
        self._charge_bearer = None
        self._category_purpose = None
        self._payment_context = None
        self._payments = None
        self.discriminator = None
        if use_pre_authentication is not None:
            self.use_pre_authentication = use_pre_authentication
        if initiating_party_reference_id is not None:
            self.initiating_party_reference_id = initiating_party_reference_id
        if preferred_sca_method is not None:
            self.preferred_sca_method = preferred_sca_method
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if expiration_period is not None:
            self.expiration_period = expiration_period
        if debtor_information is not None:
            self.debtor_information = debtor_information
        if charge_bearer is not None:
            self.charge_bearer = charge_bearer
        if category_purpose is not None:
            self.category_purpose = category_purpose
        if payment_context is not None:
            self.payment_context = payment_context
        self.payments = payments

    @property
    def use_pre_authentication(self):
        """Gets the use_pre_authentication of this BulkPaymentInitiationRequestBasic.  # noqa: E501

        This field is only applicable for ASPSP's which support pre-authentication. It can also be filled in payments toward other ASPSP's, but the value will then be ignored. * If set to true the Open Banking Service will store the pre-authentication token for use with future payments. This will only work if also a PsuId is provided which is stored in the Open Banking Service. * If set to false the pre-authentication token will only be used to finish one payment. After which it will be discarded.   # noqa: E501

        :return: The use_pre_authentication of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :rtype: bool
        """
        return self._use_pre_authentication

    @use_pre_authentication.setter
    def use_pre_authentication(self, use_pre_authentication):
        """Sets the use_pre_authentication of this BulkPaymentInitiationRequestBasic.

        This field is only applicable for ASPSP's which support pre-authentication. It can also be filled in payments toward other ASPSP's, but the value will then be ignored. * If set to true the Open Banking Service will store the pre-authentication token for use with future payments. This will only work if also a PsuId is provided which is stored in the Open Banking Service. * If set to false the pre-authentication token will only be used to finish one payment. After which it will be discarded.   # noqa: E501

        :param use_pre_authentication: The use_pre_authentication of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :type: bool
        """

        self._use_pre_authentication = use_pre_authentication

    @property
    def initiating_party_reference_id(self):
        """Gets the initiating_party_reference_id of this BulkPaymentInitiationRequestBasic.  # noqa: E501

        Reference to the payment created by the Initiating Party. This Id will not be visible to the Payment Service User. Required for PSD2 payments   # noqa: E501

        :return: The initiating_party_reference_id of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :rtype: str
        """
        return self._initiating_party_reference_id

    @initiating_party_reference_id.setter
    def initiating_party_reference_id(self, initiating_party_reference_id):
        """Sets the initiating_party_reference_id of this BulkPaymentInitiationRequestBasic.

        Reference to the payment created by the Initiating Party. This Id will not be visible to the Payment Service User. Required for PSD2 payments   # noqa: E501

        :param initiating_party_reference_id: The initiating_party_reference_id of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :type: str
        """

        self._initiating_party_reference_id = initiating_party_reference_id

    @property
    def preferred_sca_method(self):
        """Gets the preferred_sca_method of this BulkPaymentInitiationRequestBasic.  # noqa: E501

        Multiple preferred methods can be choosen. It is not guaranteed that the ASPSP will use the preferred method.   # noqa: E501

        :return: The preferred_sca_method of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :rtype: list[str]
        """
        return self._preferred_sca_method

    @preferred_sca_method.setter
    def preferred_sca_method(self, preferred_sca_method):
        """Sets the preferred_sca_method of this BulkPaymentInitiationRequestBasic.

        Multiple preferred methods can be choosen. It is not guaranteed that the ASPSP will use the preferred method.   # noqa: E501

        :param preferred_sca_method: The preferred_sca_method of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Redirect", "Decoupled", "Embedded"]  # noqa: E501
        if not set(preferred_sca_method).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `preferred_sca_method` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(preferred_sca_method) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._preferred_sca_method = preferred_sca_method

    @property
    def transaction_type(self):
        """Gets the transaction_type of this BulkPaymentInitiationRequestBasic.  # noqa: E501

        Transaction type used in this transaction. ONLINE - Used particularly for Online transactions, e.g. a webshop QR - Used for transactions from a QR. eg. Invoice INSTORE - Used for instore transactions for eg.- a POS device P2P - Used for peer-to-peer (customer-to-customer) transactions, e.g. a Transaction Request   # noqa: E501

        :return: The transaction_type of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this BulkPaymentInitiationRequestBasic.

        Transaction type used in this transaction. ONLINE - Used particularly for Online transactions, e.g. a webshop QR - Used for transactions from a QR. eg. Invoice INSTORE - Used for instore transactions for eg.- a POS device P2P - Used for peer-to-peer (customer-to-customer) transactions, e.g. a Transaction Request   # noqa: E501

        :param transaction_type: The transaction_type of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :type: str
        """
        allowed_values = ["Online", "QR", "Instore", "P2P"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                f"Invalid value for `transaction_type` ({transaction_type}), must be one of {allowed_values}"  # noqa: E501

            )

        self._transaction_type = transaction_type

    @property
    def expiration_period(self):
        """Gets the expiration_period of this BulkPaymentInitiationRequestBasic.  # noqa: E501

        Time in seconds after which the transaction will expire. If not provided a default value will be used if the `PaymentProduct` equals `IDEAL`. For ONLINE - 1200 and for INSTORE - 120. Required for QR type transactions   # noqa: E501

        :return: The expiration_period of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :rtype: int
        """
        return self._expiration_period

    @expiration_period.setter
    def expiration_period(self, expiration_period):
        """Sets the expiration_period of this BulkPaymentInitiationRequestBasic.

        Time in seconds after which the transaction will expire. If not provided a default value will be used if the `PaymentProduct` equals `IDEAL`. For ONLINE - 1200 and for INSTORE - 120. Required for QR type transactions   # noqa: E501

        :param expiration_period: The expiration_period of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :type: int
        """

        self._expiration_period = expiration_period

    @property
    def debtor_information(self):
        """Gets the debtor_information of this BulkPaymentInitiationRequestBasic.  # noqa: E501

        :return: The debtor_information of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :rtype: DebtorInformation
        """
        return self._debtor_information

    @debtor_information.setter
    def debtor_information(self, debtor_information):
        """Sets the debtor_information of this BulkPaymentInitiationRequestBasic.

        :param debtor_information: The debtor_information of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :type: DebtorInformation
        """

        self._debtor_information = debtor_information

    @property
    def charge_bearer(self):
        """Gets the charge_bearer of this BulkPaymentInitiationRequestBasic.  # noqa: E501

        Charge bearer.  Note - ISO20022 ChargeBearerType1Code.   # noqa: E501

        :return: The charge_bearer of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :rtype: str
        """
        return self._charge_bearer

    @charge_bearer.setter
    def charge_bearer(self, charge_bearer):
        """Sets the charge_bearer of this BulkPaymentInitiationRequestBasic.

        Charge bearer.  Note - ISO20022 ChargeBearerType1Code.   # noqa: E501

        :param charge_bearer: The charge_bearer of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEBT", "CRED", "SHAR", "SLEV"]  # noqa: E501
        if charge_bearer not in allowed_values:
            raise ValueError(
                f"Invalid value for `charge_bearer` ({charge_bearer}), must be one of {allowed_values}"  # noqa: E501

            )

        self._charge_bearer = charge_bearer

    @property
    def category_purpose(self):
        """Gets the category_purpose of this BulkPaymentInitiationRequestBasic.  # noqa: E501

        :return: The category_purpose of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :rtype: CategoryPurposeEnum
        """
        return self._category_purpose

    @category_purpose.setter
    def category_purpose(self, category_purpose):
        """Sets the category_purpose of this BulkPaymentInitiationRequestBasic.

        :param category_purpose: The category_purpose of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :type: CategoryPurposeEnum
        """

        self._category_purpose = category_purpose

    @property
    def payment_context(self):
        """Gets the payment_context of this BulkPaymentInitiationRequestBasic.  # noqa: E501

        :return: The payment_context of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :rtype: RiskInformation
        """
        return self._payment_context

    @payment_context.setter
    def payment_context(self, payment_context):
        """Sets the payment_context of this BulkPaymentInitiationRequestBasic.

        :param payment_context: The payment_context of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :type: RiskInformation
        """

        self._payment_context = payment_context

    @property
    def payments(self):
        """Gets the payments of this BulkPaymentInitiationRequestBasic.  # noqa: E501

        :return: The payments of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :rtype: list[BulkPaymentsDetails]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this BulkPaymentInitiationRequestBasic.

        :param payments: The payments of this BulkPaymentInitiationRequestBasic.  # noqa: E501
        :type: list[BulkPaymentsDetails]
        """
        if payments is None:
            raise ValueError("Invalid value for `payments`, must not be `None`")  # noqa: E501

        self._payments = payments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkPaymentInitiationRequestBasic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkPaymentInitiationRequestBasic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
