
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreditorAccount:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identification': 'str',
        'scheme_name': 'str',
        'bic': 'str',
        'name': 'str',
        'secondary_id': 'str',
        'currency': 'str'
    }

    attribute_map = {
        'identification': 'Identification',
        'scheme_name': 'SchemeName',
        'bic': 'BIC',
        'name': 'Name',
        'secondary_id': 'SecondaryId',
        'currency': 'Currency'
    }

    def __init__(self, identification=None, scheme_name=None, bic=None, name=None, secondary_id=None, currency=None):  # noqa: E501
        """CreditorAccount - a model defined in Swagger"""  # noqa: E501
        self._identification = None
        self._scheme_name = None
        self._bic = None
        self._name = None
        self._secondary_id = None
        self._currency = None
        self.discriminator = None
        if identification is not None:
            self.identification = identification
        if scheme_name is not None:
            self.scheme_name = scheme_name
        if bic is not None:
            self.bic = bic
        if name is not None:
            self.name = name
        if secondary_id is not None:
            self.secondary_id = secondary_id
        if currency is not None:
            self.currency = currency

    @property
    def identification(self):
        """Gets the identification of this CreditorAccount.  # noqa: E501

        Creditor identification assigned by an institution to identify an account. This identification is known by the account owner.   # noqa: E501

        :return: The identification of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this CreditorAccount.

        Creditor identification assigned by an institution to identify an account. This identification is known by the account owner.   # noqa: E501

        :param identification: The identification of this CreditorAccount.  # noqa: E501
        :type: str
        """

        self._identification = identification

    @property
    def scheme_name(self):
        """Gets the scheme_name of this CreditorAccount.  # noqa: E501

        Name of the creditor identification scheme, in a coded form as published in an external list.   # noqa: E501

        :return: The scheme_name of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this CreditorAccount.

        Name of the creditor identification scheme, in a coded form as published in an external list.   # noqa: E501

        :param scheme_name: The scheme_name of this CreditorAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["IBAN", "PAN", "SortCodeAccountNumber", "BBAN", "Paym"]  # noqa: E501
        if scheme_name not in allowed_values:
            raise ValueError(
                f"Invalid value for `scheme_name` ({scheme_name}), must be one of {allowed_values}"  # noqa: E501

            )

        self._scheme_name = scheme_name

    @property
    def bic(self):
        """Gets the bic of this CreditorAccount.  # noqa: E501

        BIC   # noqa: E501

        :return: The bic of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this CreditorAccount.

        BIC   # noqa: E501

        :param bic: The bic of this CreditorAccount.  # noqa: E501
        :type: str
        """

        self._bic = bic

    @property
    def name(self):
        """Gets the name of this CreditorAccount.  # noqa: E501

        Name of the creditor account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account.   # noqa: E501

        :return: The name of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreditorAccount.

        Name of the creditor account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account.   # noqa: E501

        :param name: The name of this CreditorAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def secondary_id(self):
        """Gets the secondary_id of this CreditorAccount.  # noqa: E501

        This is secondary identification of the creditor account, as assigned by the account servicing institution.   # noqa: E501

        :return: The secondary_id of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._secondary_id

    @secondary_id.setter
    def secondary_id(self, secondary_id):
        """Sets the secondary_id of this CreditorAccount.

        This is secondary identification of the creditor account, as assigned by the account servicing institution.   # noqa: E501

        :param secondary_id: The secondary_id of this CreditorAccount.  # noqa: E501
        :type: str
        """

        self._secondary_id = secondary_id

    @property
    def currency(self):
        """Gets the currency of this CreditorAccount.  # noqa: E501

        Currency of the account   # noqa: E501

        :return: The currency of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreditorAccount.

        Currency of the account   # noqa: E501

        :param currency: The currency of this CreditorAccount.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditorAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditorAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
