
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class DetailsType:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api': 'str',
        'fieldname': 'str',
        'type': 'str',
        'value': 'str',
        'protocol_version': 'str',
        'condition': 'str'
    }

    attribute_map = {
        'api': 'Api',
        'fieldname': 'Fieldname',
        'type': 'Type',
        'value': 'Value',
        'protocol_version': 'ProtocolVersion',
        'condition': 'Condition'
    }

    def __init__(self, api=None, fieldname=None, type=None, value=None, protocol_version=None, condition=None):  # noqa: E501
        """DetailsType - a model defined in Swagger"""  # noqa: E501
        self._api = None
        self._fieldname = None
        self._type = None
        self._value = None
        self._protocol_version = None
        self._condition = None
        self.discriminator = None
        self.api = api
        if fieldname is not None:
            self.fieldname = fieldname
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value
        if protocol_version is not None:
            self.protocol_version = protocol_version
        if condition is not None:
            self.condition = condition

    @property
    def api(self):
        """Gets the api of this DetailsType.  # noqa: E501

        Indicates for which of our Open Banking Service APIs this is applicable. The value is composed of the http method and the URL. The star character '*' can be used as a wildcard. Below three examples: - POST /v3/payments  - '*' /v3/payments    - all http methods - GET '*'             - all urls called with GET   # noqa: E501

        :return: The api of this DetailsType.  # noqa: E501
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this DetailsType.

        Indicates for which of our Open Banking Service APIs this is applicable. The value is composed of the http method and the URL. The star character '*' can be used as a wildcard. Below three examples: - POST /v3/payments  - '*' /v3/payments    - all http methods - GET '*'             - all urls called with GET   # noqa: E501

        :param api: The api of this DetailsType.  # noqa: E501
        :type: str
        """
        if api is None:
            raise ValueError("Invalid value for `api`, must not be `None`")  # noqa: E501

        self._api = api

    @property
    def fieldname(self):
        """Gets the fieldname of this DetailsType.  # noqa: E501

        The name of the field within the API  # noqa: E501

        :return: The fieldname of this DetailsType.  # noqa: E501
        :rtype: str
        """
        return self._fieldname

    @fieldname.setter
    def fieldname(self, fieldname):
        """Sets the fieldname of this DetailsType.

        The name of the field within the API  # noqa: E501

        :param fieldname: The fieldname of this DetailsType.  # noqa: E501
        :type: str
        """

        self._fieldname = fieldname

    @property
    def type(self):
        """Gets the type of this DetailsType.  # noqa: E501

        **The description of this field differs if it's supplied with or without a FieldName, see the two tables below.** | Type             | Description if NOT combined with a FieldName | | ---------------- | ------------| | UNSUPPORTED      | The mentioned Api is not supported by the ASPSP, the Open Banking Service will throw an error if it’s used.     | | SUPPORTED        | The mentioned Api is supported by the ASPSP. This is mentioned for the following Api’s (because they are usually not supported): - POST /psus/{psuId}/Aspsps/{aspspId}/pre-authentication\". If the Post is supported the corresponding api methods (GET, PUT, DELETE) are also supported, if defined in the swagger.|   | Type             | Description if combined with a FieldName | | ---------------- | ------------| | UNSUPPORTED      | The mentioned FieldName is ignored if provided to the Open Banking Service, the Open Banking Service will not throw an error     | | SUPPORTED        | A subset of the values in the mentioned FieldName is supported. The Value field (which is always supplied with the SUPPORTED Type) will indicate which values are supported. If no value is provided by the Initiating Party the Open Banking Service will use a default value. If an unsupported value is used, the Open Banking Service will throw an error. | | MANDATORY        | The mentioned FieldName is mandatory and has to be filled. If supplied, the Value field will indicate which values are supported. If the Value field is not supplied no validation on the field is done by the Open Banking Service. If the mentioned FieldName is not filled by the Initiating Party the Open Banking Service will throw an error. If an unsupported value is used, the Open Banking Service will throw an error.     | | FORBIDDEN        | The mentioned FieldName is forbidden. The Open Banking Service will throw an error if the Initiating Party fills this field and the request will not be sent to the ASPSP.     |   # noqa: E501

        :return: The type of this DetailsType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DetailsType.

        **The description of this field differs if it's supplied with or without a FieldName, see the two tables below.** | Type             | Description if NOT combined with a FieldName | | ---------------- | ------------| | UNSUPPORTED      | The mentioned Api is not supported by the ASPSP, the Open Banking Service will throw an error if it’s used.     | | SUPPORTED        | The mentioned Api is supported by the ASPSP. This is mentioned for the following Api’s (because they are usually not supported): - POST /psus/{psuId}/Aspsps/{aspspId}/pre-authentication\". If the Post is supported the corresponding api methods (GET, PUT, DELETE) are also supported, if defined in the swagger.|   | Type             | Description if combined with a FieldName | | ---------------- | ------------| | UNSUPPORTED      | The mentioned FieldName is ignored if provided to the Open Banking Service, the Open Banking Service will not throw an error     | | SUPPORTED        | A subset of the values in the mentioned FieldName is supported. The Value field (which is always supplied with the SUPPORTED Type) will indicate which values are supported. If no value is provided by the Initiating Party the Open Banking Service will use a default value. If an unsupported value is used, the Open Banking Service will throw an error. | | MANDATORY        | The mentioned FieldName is mandatory and has to be filled. If supplied, the Value field will indicate which values are supported. If the Value field is not supplied no validation on the field is done by the Open Banking Service. If the mentioned FieldName is not filled by the Initiating Party the Open Banking Service will throw an error. If an unsupported value is used, the Open Banking Service will throw an error.     | | FORBIDDEN        | The mentioned FieldName is forbidden. The Open Banking Service will throw an error if the Initiating Party fills this field and the request will not be sent to the ASPSP.     |   # noqa: E501

        :param type: The type of this DetailsType.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this DetailsType.  # noqa: E501

        Indicates the values which can be filled in the field. This field is only filled if the options differ from the options in the swagger file.   # noqa: E501

        :return: The value of this DetailsType.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DetailsType.

        Indicates the values which can be filled in the field. This field is only filled if the options differ from the options in the swagger file.   # noqa: E501

        :param value: The value of this DetailsType.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def protocol_version(self):
        """Gets the protocol_version of this DetailsType.  # noqa: E501

        The ASPSP ProtocolVersion for which this is valid.   # noqa: E501

        :return: The protocol_version of this DetailsType.  # noqa: E501
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this DetailsType.

        The ASPSP ProtocolVersion for which this is valid.   # noqa: E501

        :param protocol_version: The protocol_version of this DetailsType.  # noqa: E501
        :type: str
        """

        self._protocol_version = protocol_version

    @property
    def condition(self):
        """Gets the condition of this DetailsType.  # noqa: E501

        Contains conditions which describe when this specific detail is applicable. This field uses logical operations as they are commonly used in e.g. Java and Javascript. If a field is given without a value that Operand is true if the field has any value (is not empty).   # noqa: E501

        :return: The condition of this DetailsType.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this DetailsType.

        Contains conditions which describe when this specific detail is applicable. This field uses logical operations as they are commonly used in e.g. Java and Javascript. If a field is given without a value that Operand is true if the field has any value (is not empty).   # noqa: E501

        :param condition: The condition of this DetailsType.  # noqa: E501
        :type: str
        """

        self._condition = condition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailsType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailsType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
