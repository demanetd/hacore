
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class BulkPaymentsDetails:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_to_end_id': 'str',
        'amount': 'Amount',
        'creditor_information': 'CreditorInformation',
        'purpose_code': 'str',
        'cross_currency_payments': 'CrossCurrencyPayment',
        'regulatory_reporting_codes': 'list[RegulatoryReportingCode]',
        'remittance_information': 'str',
        'remittance_information_structured': 'RemittanceInformationStructured'
    }

    attribute_map = {
        'end_to_end_id': 'EndToEndId',
        'amount': 'Amount',
        'creditor_information': 'CreditorInformation',
        'purpose_code': 'PurposeCode',
        'cross_currency_payments': 'CrossCurrencyPayments',
        'regulatory_reporting_codes': 'RegulatoryReportingCodes',
        'remittance_information': 'RemittanceInformation',
        'remittance_information_structured': 'RemittanceInformationStructured'
    }

    def __init__(self, end_to_end_id=None, amount=None, creditor_information=None, purpose_code=None, cross_currency_payments=None, regulatory_reporting_codes=None, remittance_information=None, remittance_information_structured=None):  # noqa: E501
        """BulkPaymentsDetails - a model defined in Swagger"""  # noqa: E501
        self._end_to_end_id = None
        self._amount = None
        self._creditor_information = None
        self._purpose_code = None
        self._cross_currency_payments = None
        self._regulatory_reporting_codes = None
        self._remittance_information = None
        self._remittance_information_structured = None
        self.discriminator = None
        self.end_to_end_id = end_to_end_id
        self.amount = amount
        if creditor_information is not None:
            self.creditor_information = creditor_information
        if purpose_code is not None:
            self.purpose_code = purpose_code
        if cross_currency_payments is not None:
            self.cross_currency_payments = cross_currency_payments
        if regulatory_reporting_codes is not None:
            self.regulatory_reporting_codes = regulatory_reporting_codes
        if remittance_information is not None:
            self.remittance_information = remittance_information
        if remittance_information_structured is not None:
            self.remittance_information_structured = remittance_information_structured

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this BulkPaymentsDetails.  # noqa: E501

        Unique identification, as assigned by the Initiating Party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. Required for PSD2 payments   # noqa: E501

        :return: The end_to_end_id of this BulkPaymentsDetails.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this BulkPaymentsDetails.

        Unique identification, as assigned by the Initiating Party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. Required for PSD2 payments   # noqa: E501

        :param end_to_end_id: The end_to_end_id of this BulkPaymentsDetails.  # noqa: E501
        :type: str
        """
        if end_to_end_id is None:
            raise ValueError("Invalid value for `end_to_end_id`, must not be `None`")  # noqa: E501

        self._end_to_end_id = end_to_end_id

    @property
    def amount(self):
        """Gets the amount of this BulkPaymentsDetails.  # noqa: E501

        :return: The amount of this BulkPaymentsDetails.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BulkPaymentsDetails.

        :param amount: The amount of this BulkPaymentsDetails.  # noqa: E501
        :type: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def creditor_information(self):
        """Gets the creditor_information of this BulkPaymentsDetails.  # noqa: E501

        :return: The creditor_information of this BulkPaymentsDetails.  # noqa: E501
        :rtype: CreditorInformation
        """
        return self._creditor_information

    @creditor_information.setter
    def creditor_information(self, creditor_information):
        """Sets the creditor_information of this BulkPaymentsDetails.

        :param creditor_information: The creditor_information of this BulkPaymentsDetails.  # noqa: E501
        :type: CreditorInformation
        """

        self._creditor_information = creditor_information

    @property
    def purpose_code(self):
        """Gets the purpose_code of this BulkPaymentsDetails.  # noqa: E501

        Specifies the purpose code that resulted in a payment initiation. Fill with a 4 characters code from the ExternalPurpose1Code list published by ISO20022 or use the values ‘Commerce’, ‘Carpark’, ‘Transport’.   # noqa: E501

        :return: The purpose_code of this BulkPaymentsDetails.  # noqa: E501
        :rtype: str
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this BulkPaymentsDetails.

        Specifies the purpose code that resulted in a payment initiation. Fill with a 4 characters code from the ExternalPurpose1Code list published by ISO20022 or use the values ‘Commerce’, ‘Carpark’, ‘Transport’.   # noqa: E501

        :param purpose_code: The purpose_code of this BulkPaymentsDetails.  # noqa: E501
        :type: str
        """

        self._purpose_code = purpose_code

    @property
    def cross_currency_payments(self):
        """Gets the cross_currency_payments of this BulkPaymentsDetails.  # noqa: E501

        :return: The cross_currency_payments of this BulkPaymentsDetails.  # noqa: E501
        :rtype: CrossCurrencyPayment
        """
        return self._cross_currency_payments

    @cross_currency_payments.setter
    def cross_currency_payments(self, cross_currency_payments):
        """Sets the cross_currency_payments of this BulkPaymentsDetails.

        :param cross_currency_payments: The cross_currency_payments of this BulkPaymentsDetails.  # noqa: E501
        :type: CrossCurrencyPayment
        """

        self._cross_currency_payments = cross_currency_payments

    @property
    def regulatory_reporting_codes(self):
        """Gets the regulatory_reporting_codes of this BulkPaymentsDetails.  # noqa: E501

        List of needed regulatory reporting codes for international payments   # noqa: E501

        :return: The regulatory_reporting_codes of this BulkPaymentsDetails.  # noqa: E501
        :rtype: list[RegulatoryReportingCode]
        """
        return self._regulatory_reporting_codes

    @regulatory_reporting_codes.setter
    def regulatory_reporting_codes(self, regulatory_reporting_codes):
        """Sets the regulatory_reporting_codes of this BulkPaymentsDetails.

        List of needed regulatory reporting codes for international payments   # noqa: E501

        :param regulatory_reporting_codes: The regulatory_reporting_codes of this BulkPaymentsDetails.  # noqa: E501
        :type: list[RegulatoryReportingCode]
        """

        self._regulatory_reporting_codes = regulatory_reporting_codes

    @property
    def remittance_information(self):
        """Gets the remittance_information of this BulkPaymentsDetails.  # noqa: E501

        Information supplied to enable the matching of an entry with the items that the transfer is intended to settle. This information will be visible to the Payment Service User.  **Conditional validation:** * In case the PaymentProduct is set to IDEAL the maxLength is limited to 35   # noqa: E501

        :return: The remittance_information of this BulkPaymentsDetails.  # noqa: E501
        :rtype: str
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information):
        """Sets the remittance_information of this BulkPaymentsDetails.

        Information supplied to enable the matching of an entry with the items that the transfer is intended to settle. This information will be visible to the Payment Service User.  **Conditional validation:** * In case the PaymentProduct is set to IDEAL the maxLength is limited to 35   # noqa: E501

        :param remittance_information: The remittance_information of this BulkPaymentsDetails.  # noqa: E501
        :type: str
        """

        self._remittance_information = remittance_information

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this BulkPaymentsDetails.  # noqa: E501

        :return: The remittance_information_structured of this BulkPaymentsDetails.  # noqa: E501
        :rtype: RemittanceInformationStructured
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this BulkPaymentsDetails.

        :param remittance_information_structured: The remittance_information_structured of this BulkPaymentsDetails.  # noqa: E501
        :type: RemittanceInformationStructured
        """

        self._remittance_information_structured = remittance_information_structured

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkPaymentsDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkPaymentsDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
