
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreditorInformation:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initiating_party_sub_id': 'str',
        'name': 'str',
        'account': 'CreditorAccount',
        'agent': 'str',
        'ultimate_creditor': 'str',
        'postal_address': 'AddressData',
        'creditor_date_and_place_of_birth': 'CreditorDateAndPlaceOfBirth',
        'ultimate_creditor_account': 'CreditorAccount'
    }

    attribute_map = {
        'initiating_party_sub_id': 'InitiatingPartySubId',
        'name': 'Name',
        'account': 'Account',
        'agent': 'Agent',
        'ultimate_creditor': 'UltimateCreditor',
        'postal_address': 'PostalAddress',
        'creditor_date_and_place_of_birth': 'CreditorDateAndPlaceOfBirth',
        'ultimate_creditor_account': 'UltimateCreditorAccount'
    }

    def __init__(self, initiating_party_sub_id=None, name=None, account=None, agent=None, ultimate_creditor=None, postal_address=None, creditor_date_and_place_of_birth=None, ultimate_creditor_account=None):  # noqa: E501
        """CreditorInformation - a model defined in Swagger"""  # noqa: E501
        self._initiating_party_sub_id = None
        self._name = None
        self._account = None
        self._agent = None
        self._ultimate_creditor = None
        self._postal_address = None
        self._creditor_date_and_place_of_birth = None
        self._ultimate_creditor_account = None
        self.discriminator = None
        if initiating_party_sub_id is not None:
            self.initiating_party_sub_id = initiating_party_sub_id
        if name is not None:
            self.name = name
        if account is not None:
            self.account = account
        if agent is not None:
            self.agent = agent
        if ultimate_creditor is not None:
            self.ultimate_creditor = ultimate_creditor
        if postal_address is not None:
            self.postal_address = postal_address
        if creditor_date_and_place_of_birth is not None:
            self.creditor_date_and_place_of_birth = creditor_date_and_place_of_birth
        if ultimate_creditor_account is not None:
            self.ultimate_creditor_account = ultimate_creditor_account

    @property
    def initiating_party_sub_id(self):
        """Gets the initiating_party_sub_id of this CreditorInformation.  # noqa: E501

        External identification of the subsidiary initiating party.   # noqa: E501

        :return: The initiating_party_sub_id of this CreditorInformation.  # noqa: E501
        :rtype: str
        """
        return self._initiating_party_sub_id

    @initiating_party_sub_id.setter
    def initiating_party_sub_id(self, initiating_party_sub_id):
        """Sets the initiating_party_sub_id of this CreditorInformation.

        External identification of the subsidiary initiating party.   # noqa: E501

        :param initiating_party_sub_id: The initiating_party_sub_id of this CreditorInformation.  # noqa: E501
        :type: str
        """

        self._initiating_party_sub_id = initiating_party_sub_id

    @property
    def name(self):
        """Gets the name of this CreditorInformation.  # noqa: E501

        The name of creditor. Can be given for P2P payments only.   # noqa: E501

        :return: The name of this CreditorInformation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreditorInformation.

        The name of creditor. Can be given for P2P payments only.   # noqa: E501

        :param name: The name of this CreditorInformation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def account(self):
        """Gets the account of this CreditorInformation.  # noqa: E501

        :return: The account of this CreditorInformation.  # noqa: E501
        :rtype: CreditorAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CreditorInformation.

        :param account: The account of this CreditorInformation.  # noqa: E501
        :type: CreditorAccount
        """

        self._account = account

    @property
    def agent(self):
        """Gets the agent of this CreditorInformation.  # noqa: E501

        BIC of the financial institution servicing an account for the creditor.   # noqa: E501

        :return: The agent of this CreditorInformation.  # noqa: E501
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this CreditorInformation.

        BIC of the financial institution servicing an account for the creditor.   # noqa: E501

        :param agent: The agent of this CreditorInformation.  # noqa: E501
        :type: str
        """

        self._agent = agent

    @property
    def ultimate_creditor(self):
        """Gets the ultimate_creditor of this CreditorInformation.  # noqa: E501

        Ultimate party to which an amount of money is due.   # noqa: E501

        :return: The ultimate_creditor of this CreditorInformation.  # noqa: E501
        :rtype: str
        """
        return self._ultimate_creditor

    @ultimate_creditor.setter
    def ultimate_creditor(self, ultimate_creditor):
        """Sets the ultimate_creditor of this CreditorInformation.

        Ultimate party to which an amount of money is due.   # noqa: E501

        :param ultimate_creditor: The ultimate_creditor of this CreditorInformation.  # noqa: E501
        :type: str
        """

        self._ultimate_creditor = ultimate_creditor

    @property
    def postal_address(self):
        """Gets the postal_address of this CreditorInformation.  # noqa: E501

        :return: The postal_address of this CreditorInformation.  # noqa: E501
        :rtype: AddressData
        """
        return self._postal_address

    @postal_address.setter
    def postal_address(self, postal_address):
        """Sets the postal_address of this CreditorInformation.

        :param postal_address: The postal_address of this CreditorInformation.  # noqa: E501
        :type: AddressData
        """

        self._postal_address = postal_address

    @property
    def creditor_date_and_place_of_birth(self):
        """Gets the creditor_date_and_place_of_birth of this CreditorInformation.  # noqa: E501

        :return: The creditor_date_and_place_of_birth of this CreditorInformation.  # noqa: E501
        :rtype: CreditorDateAndPlaceOfBirth
        """
        return self._creditor_date_and_place_of_birth

    @creditor_date_and_place_of_birth.setter
    def creditor_date_and_place_of_birth(self, creditor_date_and_place_of_birth):
        """Sets the creditor_date_and_place_of_birth of this CreditorInformation.

        :param creditor_date_and_place_of_birth: The creditor_date_and_place_of_birth of this CreditorInformation.  # noqa: E501
        :type: CreditorDateAndPlaceOfBirth
        """

        self._creditor_date_and_place_of_birth = creditor_date_and_place_of_birth

    @property
    def ultimate_creditor_account(self):
        """Gets the ultimate_creditor_account of this CreditorInformation.  # noqa: E501

        :return: The ultimate_creditor_account of this CreditorInformation.  # noqa: E501
        :rtype: CreditorAccount
        """
        return self._ultimate_creditor_account

    @ultimate_creditor_account.setter
    def ultimate_creditor_account(self, ultimate_creditor_account):
        """Sets the ultimate_creditor_account of this CreditorInformation.

        :param ultimate_creditor_account: The ultimate_creditor_account of this CreditorInformation.  # noqa: E501
        :type: CreditorAccount
        """

        self._ultimate_creditor_account = ultimate_creditor_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditorInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditorInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
