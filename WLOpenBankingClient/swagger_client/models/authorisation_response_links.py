
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AuthorisationResponseLinks:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'redirect_url': 'Link',
        'put_authorisation_for_embedded': 'Link',
        'select_authentication_method': 'Link',
        'authorize_transaction': 'Link',
        'get_consent_status': 'Link'
    }

    attribute_map = {
        'redirect_url': 'RedirectUrl',
        'put_authorisation_for_embedded': 'PutAuthorisationForEmbedded',
        'select_authentication_method': 'SelectAuthenticationMethod',
        'authorize_transaction': 'AuthorizeTransaction',
        'get_consent_status': 'GetConsentStatus'
    }

    def __init__(self, redirect_url=None, put_authorisation_for_embedded=None, select_authentication_method=None, authorize_transaction=None, get_consent_status=None):  # noqa: E501
        """AuthorisationResponseLinks - a model defined in Swagger"""  # noqa: E501
        self._redirect_url = None
        self._put_authorisation_for_embedded = None
        self._select_authentication_method = None
        self._authorize_transaction = None
        self._get_consent_status = None
        self.discriminator = None
        if redirect_url is not None:
            self.redirect_url = redirect_url
        if put_authorisation_for_embedded is not None:
            self.put_authorisation_for_embedded = put_authorisation_for_embedded
        if select_authentication_method is not None:
            self.select_authentication_method = select_authentication_method
        if authorize_transaction is not None:
            self.authorize_transaction = authorize_transaction
        if get_consent_status is not None:
            self.get_consent_status = get_consent_status

    @property
    def redirect_url(self):
        """Gets the redirect_url of this AuthorisationResponseLinks.  # noqa: E501

        :return: The redirect_url of this AuthorisationResponseLinks.  # noqa: E501
        :rtype: Link
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this AuthorisationResponseLinks.

        :param redirect_url: The redirect_url of this AuthorisationResponseLinks.  # noqa: E501
        :type: Link
        """

        self._redirect_url = redirect_url

    @property
    def put_authorisation_for_embedded(self):
        """Gets the put_authorisation_for_embedded of this AuthorisationResponseLinks.  # noqa: E501

        :return: The put_authorisation_for_embedded of this AuthorisationResponseLinks.  # noqa: E501
        :rtype: Link
        """
        return self._put_authorisation_for_embedded

    @put_authorisation_for_embedded.setter
    def put_authorisation_for_embedded(self, put_authorisation_for_embedded):
        """Sets the put_authorisation_for_embedded of this AuthorisationResponseLinks.

        :param put_authorisation_for_embedded: The put_authorisation_for_embedded of this AuthorisationResponseLinks.  # noqa: E501
        :type: Link
        """

        self._put_authorisation_for_embedded = put_authorisation_for_embedded

    @property
    def select_authentication_method(self):
        """Gets the select_authentication_method of this AuthorisationResponseLinks.  # noqa: E501

        :return: The select_authentication_method of this AuthorisationResponseLinks.  # noqa: E501
        :rtype: Link
        """
        return self._select_authentication_method

    @select_authentication_method.setter
    def select_authentication_method(self, select_authentication_method):
        """Sets the select_authentication_method of this AuthorisationResponseLinks.

        :param select_authentication_method: The select_authentication_method of this AuthorisationResponseLinks.  # noqa: E501
        :type: Link
        """

        self._select_authentication_method = select_authentication_method

    @property
    def authorize_transaction(self):
        """Gets the authorize_transaction of this AuthorisationResponseLinks.  # noqa: E501

        :return: The authorize_transaction of this AuthorisationResponseLinks.  # noqa: E501
        :rtype: Link
        """
        return self._authorize_transaction

    @authorize_transaction.setter
    def authorize_transaction(self, authorize_transaction):
        """Sets the authorize_transaction of this AuthorisationResponseLinks.

        :param authorize_transaction: The authorize_transaction of this AuthorisationResponseLinks.  # noqa: E501
        :type: Link
        """

        self._authorize_transaction = authorize_transaction

    @property
    def get_consent_status(self):
        """Gets the get_consent_status of this AuthorisationResponseLinks.  # noqa: E501

        :return: The get_consent_status of this AuthorisationResponseLinks.  # noqa: E501
        :rtype: Link
        """
        return self._get_consent_status

    @get_consent_status.setter
    def get_consent_status(self, get_consent_status):
        """Sets the get_consent_status of this AuthorisationResponseLinks.

        :param get_consent_status: The get_consent_status of this AuthorisationResponseLinks.  # noqa: E501
        :type: Link
        """

        self._get_consent_status = get_consent_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuthorisationResponseLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuthorisationResponseLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
