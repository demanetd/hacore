
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CommonPaymentDataRefundResponse:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'refund_id': 'str',
        'refund_status': 'PaymentStatusEnum',
        'initiating_party_reference_id': 'str',
        'amount_related_details': 'AmountRelatedDetails',
        'authorisation_required_data': 'AuthorisationRequiredData',
        'psu_message': 'str',
        'account_errors': 'list[AccountError]'
    }

    attribute_map = {
        'refund_id': 'RefundId',
        'refund_status': 'RefundStatus',
        'initiating_party_reference_id': 'InitiatingPartyReferenceId',
        'amount_related_details': 'AmountRelatedDetails',
        'authorisation_required_data': 'AuthorisationRequiredData',
        'psu_message': 'PsuMessage',
        'account_errors': 'AccountErrors'
    }

    def __init__(self, refund_id=None, refund_status=None, initiating_party_reference_id=None, amount_related_details=None, authorisation_required_data=None, psu_message=None, account_errors=None):  # noqa: E501
        """CommonPaymentDataRefundResponse - a model defined in Swagger"""  # noqa: E501
        self._refund_id = None
        self._refund_status = None
        self._initiating_party_reference_id = None
        self._amount_related_details = None
        self._authorisation_required_data = None
        self._psu_message = None
        self._account_errors = None
        self.discriminator = None
        self.refund_id = refund_id
        self.refund_status = refund_status
        if initiating_party_reference_id is not None:
            self.initiating_party_reference_id = initiating_party_reference_id
        if amount_related_details is not None:
            self.amount_related_details = amount_related_details
        if authorisation_required_data is not None:
            self.authorisation_required_data = authorisation_required_data
        if psu_message is not None:
            self.psu_message = psu_message
        if account_errors is not None:
            self.account_errors = account_errors

    @property
    def refund_id(self):
        """Gets the refund_id of this CommonPaymentDataRefundResponse.  # noqa: E501

        Id generated by the Open Banking Service. This should be used to refer to this refund in subsequent api calls.   # noqa: E501

        :return: The refund_id of this CommonPaymentDataRefundResponse.  # noqa: E501
        :rtype: str
        """
        return self._refund_id

    @refund_id.setter
    def refund_id(self, refund_id):
        """Sets the refund_id of this CommonPaymentDataRefundResponse.

        Id generated by the Open Banking Service. This should be used to refer to this refund in subsequent api calls.   # noqa: E501

        :param refund_id: The refund_id of this CommonPaymentDataRefundResponse.  # noqa: E501
        :type: str
        """
        if refund_id is None:
            raise ValueError("Invalid value for `refund_id`, must not be `None`")  # noqa: E501

        self._refund_id = refund_id

    @property
    def refund_status(self):
        """Gets the refund_status of this CommonPaymentDataRefundResponse.  # noqa: E501

        :return: The refund_status of this CommonPaymentDataRefundResponse.  # noqa: E501
        :rtype: PaymentStatusEnum
        """
        return self._refund_status

    @refund_status.setter
    def refund_status(self, refund_status):
        """Sets the refund_status of this CommonPaymentDataRefundResponse.

        :param refund_status: The refund_status of this CommonPaymentDataRefundResponse.  # noqa: E501
        :type: PaymentStatusEnum
        """
        if refund_status is None:
            raise ValueError("Invalid value for `refund_status`, must not be `None`")  # noqa: E501

        self._refund_status = refund_status

    @property
    def initiating_party_reference_id(self):
        """Gets the initiating_party_reference_id of this CommonPaymentDataRefundResponse.  # noqa: E501

        Reference to the payment created by the Initiating Party. This Id will not be visible to the Payment Service User.   # noqa: E501

        :return: The initiating_party_reference_id of this CommonPaymentDataRefundResponse.  # noqa: E501
        :rtype: str
        """
        return self._initiating_party_reference_id

    @initiating_party_reference_id.setter
    def initiating_party_reference_id(self, initiating_party_reference_id):
        """Sets the initiating_party_reference_id of this CommonPaymentDataRefundResponse.

        Reference to the payment created by the Initiating Party. This Id will not be visible to the Payment Service User.   # noqa: E501

        :param initiating_party_reference_id: The initiating_party_reference_id of this CommonPaymentDataRefundResponse.  # noqa: E501
        :type: str
        """

        self._initiating_party_reference_id = initiating_party_reference_id

    @property
    def amount_related_details(self):
        """Gets the amount_related_details of this CommonPaymentDataRefundResponse.  # noqa: E501

        :return: The amount_related_details of this CommonPaymentDataRefundResponse.  # noqa: E501
        :rtype: AmountRelatedDetails
        """
        return self._amount_related_details

    @amount_related_details.setter
    def amount_related_details(self, amount_related_details):
        """Sets the amount_related_details of this CommonPaymentDataRefundResponse.

        :param amount_related_details: The amount_related_details of this CommonPaymentDataRefundResponse.  # noqa: E501
        :type: AmountRelatedDetails
        """

        self._amount_related_details = amount_related_details

    @property
    def authorisation_required_data(self):
        """Gets the authorisation_required_data of this CommonPaymentDataRefundResponse.  # noqa: E501

        :return: The authorisation_required_data of this CommonPaymentDataRefundResponse.  # noqa: E501
        :rtype: AuthorisationRequiredData
        """
        return self._authorisation_required_data

    @authorisation_required_data.setter
    def authorisation_required_data(self, authorisation_required_data):
        """Sets the authorisation_required_data of this CommonPaymentDataRefundResponse.

        :param authorisation_required_data: The authorisation_required_data of this CommonPaymentDataRefundResponse.  # noqa: E501
        :type: AuthorisationRequiredData
        """

        self._authorisation_required_data = authorisation_required_data

    @property
    def psu_message(self):
        """Gets the psu_message of this CommonPaymentDataRefundResponse.  # noqa: E501

        Text to be displayed to the PSU.   # noqa: E501

        :return: The psu_message of this CommonPaymentDataRefundResponse.  # noqa: E501
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this CommonPaymentDataRefundResponse.

        Text to be displayed to the PSU.   # noqa: E501

        :param psu_message: The psu_message of this CommonPaymentDataRefundResponse.  # noqa: E501
        :type: str
        """

        self._psu_message = psu_message

    @property
    def account_errors(self):
        """Gets the account_errors of this CommonPaymentDataRefundResponse.  # noqa: E501

        :return: The account_errors of this CommonPaymentDataRefundResponse.  # noqa: E501
        :rtype: list[AccountError]
        """
        return self._account_errors

    @account_errors.setter
    def account_errors(self, account_errors):
        """Sets the account_errors of this CommonPaymentDataRefundResponse.

        :param account_errors: The account_errors of this CommonPaymentDataRefundResponse.  # noqa: E501
        :type: list[AccountError]
        """

        self._account_errors = account_errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonPaymentDataRefundResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonPaymentDataRefundResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
