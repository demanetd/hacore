
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class References:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_to_end_id': 'str',
        'mandate_id': 'str',
        'cheque_number': 'str',
        'statement_reference': 'list[str]',
        'transaction_reference': 'str'
    }

    attribute_map = {
        'end_to_end_id': 'EndToEndId',
        'mandate_id': 'MandateId',
        'cheque_number': 'ChequeNumber',
        'statement_reference': 'StatementReference',
        'transaction_reference': 'TransactionReference'
    }

    def __init__(self, end_to_end_id=None, mandate_id=None, cheque_number=None, statement_reference=None, transaction_reference=None):  # noqa: E501
        """References - a model defined in Swagger"""  # noqa: E501
        self._end_to_end_id = None
        self._mandate_id = None
        self._cheque_number = None
        self._statement_reference = None
        self._transaction_reference = None
        self.discriminator = None
        if end_to_end_id is not None:
            self.end_to_end_id = end_to_end_id
        if mandate_id is not None:
            self.mandate_id = mandate_id
        if cheque_number is not None:
            self.cheque_number = cheque_number
        if statement_reference is not None:
            self.statement_reference = statement_reference
        if transaction_reference is not None:
            self.transaction_reference = transaction_reference

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this References.  # noqa: E501

        Unique identification, as assigned by the Initiating Party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to end chain . Usage The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.   # noqa: E501

        :return: The end_to_end_id of this References.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this References.

        Unique identification, as assigned by the Initiating Party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to end chain . Usage The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.   # noqa: E501

        :param end_to_end_id: The end_to_end_id of this References.  # noqa: E501
        :type: str
        """

        self._end_to_end_id = end_to_end_id

    @property
    def mandate_id(self):
        """Gets the mandate_id of this References.  # noqa: E501

        Identification of Mandates, e.g. a SEPA Mandate ID.   # noqa: E501

        :return: The mandate_id of this References.  # noqa: E501
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id):
        """Sets the mandate_id of this References.

        Identification of Mandates, e.g. a SEPA Mandate ID.   # noqa: E501

        :param mandate_id: The mandate_id of this References.  # noqa: E501
        :type: str
        """

        self._mandate_id = mandate_id

    @property
    def cheque_number(self):
        """Gets the cheque_number of this References.  # noqa: E501

        Identification of a Cheque.   # noqa: E501

        :return: The cheque_number of this References.  # noqa: E501
        :rtype: str
        """
        return self._cheque_number

    @cheque_number.setter
    def cheque_number(self, cheque_number):
        """Sets the cheque_number of this References.

        Identification of a Cheque.   # noqa: E501

        :param cheque_number: The cheque_number of this References.  # noqa: E501
        :type: str
        """

        self._cheque_number = cheque_number

    @property
    def statement_reference(self):
        """Gets the statement_reference of this References.  # noqa: E501

        Can contains many statementReferences for OB UK.   # noqa: E501

        :return: The statement_reference of this References.  # noqa: E501
        :rtype: list[str]
        """
        return self._statement_reference

    @statement_reference.setter
    def statement_reference(self, statement_reference):
        """Sets the statement_reference of this References.

        Can contains many statementReferences for OB UK.   # noqa: E501

        :param statement_reference: The statement_reference of this References.  # noqa: E501
        :type: list[str]
        """

        self._statement_reference = statement_reference

    @property
    def transaction_reference(self):
        """Gets the transaction_reference of this References.  # noqa: E501

        Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.   # noqa: E501

        :return: The transaction_reference of this References.  # noqa: E501
        :rtype: str
        """
        return self._transaction_reference

    @transaction_reference.setter
    def transaction_reference(self, transaction_reference):
        """Sets the transaction_reference of this References.

        Unique reference for the transaction. This reference is optionally populated, and may as an example be the FPID in the Faster Payments context.   # noqa: E501

        :param transaction_reference: The transaction_reference of this References.  # noqa: E501
        :type: str
        """

        self._transaction_reference = transaction_reference

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(References, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, References):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
