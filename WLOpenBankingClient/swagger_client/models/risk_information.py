
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RiskInformation:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_context_code': 'str',
        'merchant_category_code': 'str',
        'merchant_customer_id': 'str',
        'delivery_address': 'AllOfRiskInformationDeliveryAddress',
        'channel_type': 'str',
        'channel_meta_data': 'str',
        'applied_authentication_approach': 'str',
        'reference_payment_order_id': 'str'
    }

    attribute_map = {
        'payment_context_code': 'PaymentContextCode',
        'merchant_category_code': 'MerchantCategoryCode',
        'merchant_customer_id': 'MerchantCustomerId',
        'delivery_address': 'DeliveryAddress',
        'channel_type': 'ChannelType',
        'channel_meta_data': 'ChannelMetaData',
        'applied_authentication_approach': 'AppliedAuthenticationApproach',
        'reference_payment_order_id': 'ReferencePaymentOrderId'
    }

    def __init__(self, payment_context_code=None, merchant_category_code=None, merchant_customer_id=None, delivery_address=None, channel_type=None, channel_meta_data=None, applied_authentication_approach=None, reference_payment_order_id=None):  # noqa: E501
        """RiskInformation - a model defined in Swagger"""  # noqa: E501
        self._payment_context_code = None
        self._merchant_category_code = None
        self._merchant_customer_id = None
        self._delivery_address = None
        self._channel_type = None
        self._channel_meta_data = None
        self._applied_authentication_approach = None
        self._reference_payment_order_id = None
        self.discriminator = None
        if payment_context_code is not None:
            self.payment_context_code = payment_context_code
        if merchant_category_code is not None:
            self.merchant_category_code = merchant_category_code
        if merchant_customer_id is not None:
            self.merchant_customer_id = merchant_customer_id
        if delivery_address is not None:
            self.delivery_address = delivery_address
        if channel_type is not None:
            self.channel_type = channel_type
        if channel_meta_data is not None:
            self.channel_meta_data = channel_meta_data
        if applied_authentication_approach is not None:
            self.applied_authentication_approach = applied_authentication_approach
        if reference_payment_order_id is not None:
            self.reference_payment_order_id = reference_payment_order_id

    @property
    def payment_context_code(self):
        """Gets the payment_context_code of this RiskInformation.  # noqa: E501

        Specifies the payment context. Payments for EcommerceGoods and EcommerceServices will be expected to have a MerchantCategoryCode and MerchantCustomerIdentification populated. Payments for EcommerceGoods will also have the DeliveryAddress populated.   # noqa: E501

        :return: The payment_context_code of this RiskInformation.  # noqa: E501
        :rtype: str
        """
        return self._payment_context_code

    @payment_context_code.setter
    def payment_context_code(self, payment_context_code):
        """Sets the payment_context_code of this RiskInformation.

        Specifies the payment context. Payments for EcommerceGoods and EcommerceServices will be expected to have a MerchantCategoryCode and MerchantCustomerIdentification populated. Payments for EcommerceGoods will also have the DeliveryAddress populated.   # noqa: E501

        :param payment_context_code: The payment_context_code of this RiskInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["BillPayment", "ContactlessTravel", "EcommerceGoods", "EcommerceServices", "Kiosk", "Parking", "P2P", "BillingGoodsAndServicesInAdvance", "BillingGoodsAndServicesInArrears", "PispPayee", "EcommerceMerchantInitiatedPayment", "FaceToFacePointOfSale", "TransferToSelf", "TransferToThirdParty"]  # noqa: E501
        if payment_context_code not in allowed_values:
            raise ValueError(
                f"Invalid value for `payment_context_code` ({payment_context_code}), must be one of {allowed_values}"  # noqa: E501

            )

        self._payment_context_code = payment_context_code

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this RiskInformation.  # noqa: E501

        Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.   # noqa: E501

        :return: The merchant_category_code of this RiskInformation.  # noqa: E501
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this RiskInformation.

        Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.   # noqa: E501

        :param merchant_category_code: The merchant_category_code of this RiskInformation.  # noqa: E501
        :type: str
        """

        self._merchant_category_code = merchant_category_code

    @property
    def merchant_customer_id(self):
        """Gets the merchant_customer_id of this RiskInformation.  # noqa: E501

        The unique customer identifier of the PSU with the merchant.   # noqa: E501

        :return: The merchant_customer_id of this RiskInformation.  # noqa: E501
        :rtype: str
        """
        return self._merchant_customer_id

    @merchant_customer_id.setter
    def merchant_customer_id(self, merchant_customer_id):
        """Sets the merchant_customer_id of this RiskInformation.

        The unique customer identifier of the PSU with the merchant.   # noqa: E501

        :param merchant_customer_id: The merchant_customer_id of this RiskInformation.  # noqa: E501
        :type: str
        """

        self._merchant_customer_id = merchant_customer_id

    @property
    def delivery_address(self):
        """Gets the delivery_address of this RiskInformation.  # noqa: E501

        The Object is deprecated and will be ignored in the current implementation. Use `DebtorInformation.ShippingAddress` from `CommonPaymentData` object instead   # noqa: E501

        :return: The delivery_address of this RiskInformation.  # noqa: E501
        :rtype: AllOfRiskInformationDeliveryAddress
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this RiskInformation.

        The Object is deprecated and will be ignored in the current implementation. Use `DebtorInformation.ShippingAddress` from `CommonPaymentData` object instead   # noqa: E501

        :param delivery_address: The delivery_address of this RiskInformation.  # noqa: E501
        :type: AllOfRiskInformationDeliveryAddress
        """

        self._delivery_address = delivery_address

    @property
    def channel_type(self):
        """Gets the channel_type of this RiskInformation.  # noqa: E501

        Payment channel type.   # noqa: E501

        :return: The channel_type of this RiskInformation.  # noqa: E501
        :rtype: str
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type):
        """Sets the channel_type of this RiskInformation.

        Payment channel type.   # noqa: E501

        :param channel_type: The channel_type of this RiskInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["ContactLess", "PointOfSale", "Ecommerce", "UnattendedTerminal"]  # noqa: E501
        if channel_type not in allowed_values:
            raise ValueError(
                f"Invalid value for `channel_type` ({channel_type}), must be one of {allowed_values}"  # noqa: E501

            )

        self._channel_type = channel_type

    @property
    def channel_meta_data(self):
        """Gets the channel_meta_data of this RiskInformation.  # noqa: E501

        Additional information related to the channel.   # noqa: E501

        :return: The channel_meta_data of this RiskInformation.  # noqa: E501
        :rtype: str
        """
        return self._channel_meta_data

    @channel_meta_data.setter
    def channel_meta_data(self, channel_meta_data):
        """Sets the channel_meta_data of this RiskInformation.

        Additional information related to the channel.   # noqa: E501

        :param channel_meta_data: The channel_meta_data of this RiskInformation.  # noqa: E501
        :type: str
        """

        self._channel_meta_data = channel_meta_data

    @property
    def applied_authentication_approach(self):
        """Gets the applied_authentication_approach of this RiskInformation.  # noqa: E501

        Indicates the Applied Authentication Approach   # noqa: E501

        :return: The applied_authentication_approach of this RiskInformation.  # noqa: E501
        :rtype: str
        """
        return self._applied_authentication_approach

    @applied_authentication_approach.setter
    def applied_authentication_approach(self, applied_authentication_approach):
        """Sets the applied_authentication_approach of this RiskInformation.

        Indicates the Applied Authentication Approach   # noqa: E501

        :param applied_authentication_approach: The applied_authentication_approach of this RiskInformation.  # noqa: E501
        :type: str
        """
        allowed_values = ["CA", "SCA"]  # noqa: E501
        if applied_authentication_approach not in allowed_values:
            raise ValueError(
                f"Invalid value for `applied_authentication_approach` ({applied_authentication_approach}), must be one of {allowed_values}"  # noqa: E501

            )

        self._applied_authentication_approach = applied_authentication_approach

    @property
    def reference_payment_order_id(self):
        """Gets the reference_payment_order_id of this RiskInformation.  # noqa: E501

        Indicates the Applied Authentication Approach   # noqa: E501

        :return: The reference_payment_order_id of this RiskInformation.  # noqa: E501
        :rtype: str
        """
        return self._reference_payment_order_id

    @reference_payment_order_id.setter
    def reference_payment_order_id(self, reference_payment_order_id):
        """Sets the reference_payment_order_id of this RiskInformation.

        Indicates the Applied Authentication Approach   # noqa: E501

        :param reference_payment_order_id: The reference_payment_order_id of this RiskInformation.  # noqa: E501
        :type: str
        """

        self._reference_payment_order_id = reference_payment_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RiskInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RiskInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
