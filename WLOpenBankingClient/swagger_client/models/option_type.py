
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class OptionType:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key1': 'str',
        'key2': 'str',
        'value': 'str',
        'level': 'OptionLevelType',
        'protocol_version': 'str'
    }

    attribute_map = {
        'key1': 'Key1',
        'key2': 'Key2',
        'value': 'Value',
        'level': 'Level',
        'protocol_version': 'ProtocolVersion'
    }

    def __init__(self, key1=None, key2=None, value=None, level=None, protocol_version=None):  # noqa: E501
        """OptionType - a model defined in Swagger"""  # noqa: E501
        self._key1 = None
        self._key2 = None
        self._value = None
        self._level = None
        self._protocol_version = None
        self.discriminator = None
        if key1 is not None:
            self.key1 = key1
        if key2 is not None:
            self.key2 = key2
        if value is not None:
            self.value = value
        if level is not None:
            self.level = level
        if protocol_version is not None:
            self.protocol_version = protocol_version

    @property
    def key1(self):
        """Gets the key1 of this OptionType.  # noqa: E501

        :return: The key1 of this OptionType.  # noqa: E501
        :rtype: str
        """
        return self._key1

    @key1.setter
    def key1(self, key1):
        """Sets the key1 of this OptionType.

        :param key1: The key1 of this OptionType.  # noqa: E501
        :type: str
        """

        self._key1 = key1

    @property
    def key2(self):
        """Gets the key2 of this OptionType.  # noqa: E501

        :return: The key2 of this OptionType.  # noqa: E501
        :rtype: str
        """
        return self._key2

    @key2.setter
    def key2(self, key2):
        """Sets the key2 of this OptionType.

        :param key2: The key2 of this OptionType.  # noqa: E501
        :type: str
        """

        self._key2 = key2

    @property
    def value(self):
        """Gets the value of this OptionType.  # noqa: E501

        :return: The value of this OptionType.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this OptionType.

        :param value: The value of this OptionType.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def level(self):
        """Gets the level of this OptionType.  # noqa: E501

        :return: The level of this OptionType.  # noqa: E501
        :rtype: OptionLevelType
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this OptionType.

        :param level: The level of this OptionType.  # noqa: E501
        :type: OptionLevelType
        """

        self._level = level

    @property
    def protocol_version(self):
        """Gets the protocol_version of this OptionType.  # noqa: E501

        The ASPSP ProtocolVersion for which this is valid.   # noqa: E501

        :return: The protocol_version of this OptionType.  # noqa: E501
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this OptionType.

        The ASPSP ProtocolVersion for which this is valid.   # noqa: E501

        :param protocol_version: The protocol_version of this OptionType.  # noqa: E501
        :type: str
        """

        self._protocol_version = protocol_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OptionType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OptionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
