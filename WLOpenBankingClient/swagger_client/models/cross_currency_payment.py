
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CrossCurrencyPayment:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cross_currency_transaction': 'bool',
        'exchange_rate_information': 'ExchangeRateInformationRequest'
    }

    attribute_map = {
        'cross_currency_transaction': 'CrossCurrencyTransaction',
        'exchange_rate_information': 'ExchangeRateInformation'
    }

    def __init__(self, cross_currency_transaction=False, exchange_rate_information=None):  # noqa: E501
        """CrossCurrencyPayment - a model defined in Swagger"""  # noqa: E501
        self._cross_currency_transaction = None
        self._exchange_rate_information = None
        self.discriminator = None
        self.cross_currency_transaction = cross_currency_transaction
        if exchange_rate_information is not None:
            self.exchange_rate_information = exchange_rate_information

    @property
    def cross_currency_transaction(self):
        """Gets the cross_currency_transaction of this CrossCurrencyPayment.  # noqa: E501

        Set to true if a currency exchangeis required. If set to true the ExchangeRateInformation section can be used.   # noqa: E501

        :return: The cross_currency_transaction of this CrossCurrencyPayment.  # noqa: E501
        :rtype: bool
        """
        return self._cross_currency_transaction

    @cross_currency_transaction.setter
    def cross_currency_transaction(self, cross_currency_transaction):
        """Sets the cross_currency_transaction of this CrossCurrencyPayment.

        Set to true if a currency exchangeis required. If set to true the ExchangeRateInformation section can be used.   # noqa: E501

        :param cross_currency_transaction: The cross_currency_transaction of this CrossCurrencyPayment.  # noqa: E501
        :type: bool
        """
        if cross_currency_transaction is None:
            raise ValueError("Invalid value for `cross_currency_transaction`, must not be `None`")  # noqa: E501

        self._cross_currency_transaction = cross_currency_transaction

    @property
    def exchange_rate_information(self):
        """Gets the exchange_rate_information of this CrossCurrencyPayment.  # noqa: E501

        :return: The exchange_rate_information of this CrossCurrencyPayment.  # noqa: E501
        :rtype: ExchangeRateInformationRequest
        """
        return self._exchange_rate_information

    @exchange_rate_information.setter
    def exchange_rate_information(self, exchange_rate_information):
        """Sets the exchange_rate_information of this CrossCurrencyPayment.

        :param exchange_rate_information: The exchange_rate_information of this CrossCurrencyPayment.  # noqa: E501
        :type: ExchangeRateInformationRequest
        """

        self._exchange_rate_information = exchange_rate_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CrossCurrencyPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrossCurrencyPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
