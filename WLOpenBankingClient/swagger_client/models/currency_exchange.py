
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CurrencyExchange:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_currency': 'str',
        'target_currency': 'str',
        'unit_currency': 'str',
        'exchange_rate': 'str',
        'contract_identification': 'str',
        'quotation_date': 'datetime'
    }

    attribute_map = {
        'source_currency': 'SourceCurrency',
        'target_currency': 'TargetCurrency',
        'unit_currency': 'UnitCurrency',
        'exchange_rate': 'ExchangeRate',
        'contract_identification': 'ContractIdentification',
        'quotation_date': 'QuotationDate'
    }

    def __init__(self, source_currency=None, target_currency=None, unit_currency=None, exchange_rate=None, contract_identification=None, quotation_date=None):  # noqa: E501
        """CurrencyExchange - a model defined in Swagger"""  # noqa: E501
        self._source_currency = None
        self._target_currency = None
        self._unit_currency = None
        self._exchange_rate = None
        self._contract_identification = None
        self._quotation_date = None
        self.discriminator = None
        if source_currency is not None:
            self.source_currency = source_currency
        if target_currency is not None:
            self.target_currency = target_currency
        if unit_currency is not None:
            self.unit_currency = unit_currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if contract_identification is not None:
            self.contract_identification = contract_identification
        if quotation_date is not None:
            self.quotation_date = quotation_date

    @property
    def source_currency(self):
        """Gets the source_currency of this CurrencyExchange.  # noqa: E501

        Currency from which an amount is to be converted in a currency conversion. ISO 4217 currency codes.   # noqa: E501

        :return: The source_currency of this CurrencyExchange.  # noqa: E501
        :rtype: str
        """
        return self._source_currency

    @source_currency.setter
    def source_currency(self, source_currency):
        """Sets the source_currency of this CurrencyExchange.

        Currency from which an amount is to be converted in a currency conversion. ISO 4217 currency codes.   # noqa: E501

        :param source_currency: The source_currency of this CurrencyExchange.  # noqa: E501
        :type: str
        """

        self._source_currency = source_currency

    @property
    def target_currency(self):
        """Gets the target_currency of this CurrencyExchange.  # noqa: E501

        Currency into which an amount is to be converted in a currency conversion. ISO 4217 currency codes.   # noqa: E501

        :return: The target_currency of this CurrencyExchange.  # noqa: E501
        :rtype: str
        """
        return self._target_currency

    @target_currency.setter
    def target_currency(self, target_currency):
        """Sets the target_currency of this CurrencyExchange.

        Currency into which an amount is to be converted in a currency conversion. ISO 4217 currency codes.   # noqa: E501

        :param target_currency: The target_currency of this CurrencyExchange.  # noqa: E501
        :type: str
        """

        self._target_currency = target_currency

    @property
    def unit_currency(self):
        """Gets the unit_currency of this CurrencyExchange.  # noqa: E501

        Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP. ISO 4217 currency codes.   # noqa: E501

        :return: The unit_currency of this CurrencyExchange.  # noqa: E501
        :rtype: str
        """
        return self._unit_currency

    @unit_currency.setter
    def unit_currency(self, unit_currency):
        """Sets the unit_currency of this CurrencyExchange.

        Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP. ISO 4217 currency codes.   # noqa: E501

        :param unit_currency: The unit_currency of this CurrencyExchange.  # noqa: E501
        :type: str
        """

        self._unit_currency = unit_currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this CurrencyExchange.  # noqa: E501

        Factor used to convert an amount from one currency into another . This reflects the price at which one currency was bought with another currency.   # noqa: E501

        :return: The exchange_rate of this CurrencyExchange.  # noqa: E501
        :rtype: str
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this CurrencyExchange.

        Factor used to convert an amount from one currency into another . This reflects the price at which one currency was bought with another currency.   # noqa: E501

        :param exchange_rate: The exchange_rate of this CurrencyExchange.  # noqa: E501
        :type: str
        """

        self._exchange_rate = exchange_rate

    @property
    def contract_identification(self):
        """Gets the contract_identification of this CurrencyExchange.  # noqa: E501

        Unique identification to unambiguously identify the foreign exchange contract   # noqa: E501

        :return: The contract_identification of this CurrencyExchange.  # noqa: E501
        :rtype: str
        """
        return self._contract_identification

    @contract_identification.setter
    def contract_identification(self, contract_identification):
        """Sets the contract_identification of this CurrencyExchange.

        Unique identification to unambiguously identify the foreign exchange contract   # noqa: E501

        :param contract_identification: The contract_identification of this CurrencyExchange.  # noqa: E501
        :type: str
        """

        self._contract_identification = contract_identification

    @property
    def quotation_date(self):
        """Gets the quotation_date of this CurrencyExchange.  # noqa: E501

        Date and time at which an exchange rate is quoted.   # noqa: E501

        :return: The quotation_date of this CurrencyExchange.  # noqa: E501
        :rtype: datetime
        """
        return self._quotation_date

    @quotation_date.setter
    def quotation_date(self, quotation_date):
        """Sets the quotation_date of this CurrencyExchange.

        Date and time at which an exchange rate is quoted.   # noqa: E501

        :param quotation_date: The quotation_date of this CurrencyExchange.  # noqa: E501
        :type: datetime
        """

        self._quotation_date = quotation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrencyExchange, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrencyExchange):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
