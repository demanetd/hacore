
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Account:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'bic': 'str',
        'currency': 'Currency',
        'name': 'str',
        'owner_name': 'str',
        'display_name': 'str',
        'account_number': 'str',
        'other_account_number': 'str',
        'account_number_type': 'str',
        'account_type': 'AccountType',
        'account_number_type_issuer': 'str',
        'sub_type': 'str',
        'details': 'str',
        'linked_account': 'str',
        'usage': 'str',
        'product': 'str',
        'psu_role': 'str'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'bic': 'BIC',
        'currency': 'Currency',
        'name': 'Name',
        'owner_name': 'OwnerName',
        'display_name': 'DisplayName',
        'account_number': 'AccountNumber',
        'other_account_number': 'OtherAccountNumber',
        'account_number_type': 'AccountNumberType',
        'account_type': 'AccountType',
        'account_number_type_issuer': 'AccountNumberTypeIssuer',
        'sub_type': 'SubType',
        'details': 'Details',
        'linked_account': 'LinkedAccount',
        'usage': 'Usage',
        'product': 'Product',
        'psu_role': 'PsuRole'
    }

    def __init__(self, account_id=None, bic=None, currency=None, name=None, owner_name=None, display_name=None, account_number=None, other_account_number=None, account_number_type=None, account_type=None, account_number_type_issuer=None, sub_type=None, details=None, linked_account=None, usage=None, product=None, psu_role=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._bic = None
        self._currency = None
        self._name = None
        self._owner_name = None
        self._display_name = None
        self._account_number = None
        self._other_account_number = None
        self._account_number_type = None
        self._account_type = None
        self._account_number_type_issuer = None
        self._sub_type = None
        self._details = None
        self._linked_account = None
        self._usage = None
        self._product = None
        self._psu_role = None
        self.discriminator = None
        self.account_id = account_id
        if bic is not None:
            self.bic = bic
        self.currency = currency
        if name is not None:
            self.name = name
        if owner_name is not None:
            self.owner_name = owner_name
        if display_name is not None:
            self.display_name = display_name
        if account_number is not None:
            self.account_number = account_number
        if other_account_number is not None:
            self.other_account_number = other_account_number
        if account_number_type is not None:
            self.account_number_type = account_number_type
        if account_type is not None:
            self.account_type = account_type
        if account_number_type_issuer is not None:
            self.account_number_type_issuer = account_number_type_issuer
        if sub_type is not None:
            self.sub_type = sub_type
        if details is not None:
            self.details = details
        if linked_account is not None:
            self.linked_account = linked_account
        if usage is not None:
            self.usage = usage
        if product is not None:
            self.product = product
        if psu_role is not None:
            self.psu_role = psu_role

    @property
    def account_id(self):
        """Gets the account_id of this Account.  # noqa: E501

        This is the account Id generated by the Open Banking Service. It should be used in subsequent api calls to refer to this account.   # noqa: E501

        :return: The account_id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Account.

        This is the account Id generated by the Open Banking Service. It should be used in subsequent api calls to refer to this account.   # noqa: E501

        :param account_id: The account_id of this Account.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def bic(self):
        """Gets the bic of this Account.  # noqa: E501

        BIC   # noqa: E501

        :return: The bic of this Account.  # noqa: E501
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this Account.

        BIC   # noqa: E501

        :param bic: The bic of this Account.  # noqa: E501
        :type: str
        """

        self._bic = bic

    @property
    def currency(self):
        """Gets the currency of this Account.  # noqa: E501

        :return: The currency of this Account.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Account.

        :param currency: The currency of this Account.  # noqa: E501
        :type: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this Account.  # noqa: E501

        Name of the account.   # noqa: E501

        :return: The name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Name of the account.   # noqa: E501

        :param name: The name of this Account.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def owner_name(self):
        """Gets the owner_name of this Account.  # noqa: E501

        Name of the legal account owner.   # noqa: E501

        :return: The owner_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this Account.

        Name of the legal account owner.   # noqa: E501

        :param owner_name: The owner_name of this Account.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def display_name(self):
        """Gets the display_name of this Account.  # noqa: E501

        Additional name of the account.   # noqa: E501

        :return: The display_name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Account.

        Additional name of the account.   # noqa: E501

        :param display_name: The display_name of this Account.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def account_number(self):
        """Gets the account_number of this Account.  # noqa: E501

        The number which identifies the account, provided by the ASPSP. Known by the PSU. This will mostly be an IBAN, but other types are possible see AccountNumberType field.   # noqa: E501

        :return: The account_number of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this Account.

        The number which identifies the account, provided by the ASPSP. Known by the PSU. This will mostly be an IBAN, but other types are possible see AccountNumberType field.   # noqa: E501

        :param account_number: The account_number of this Account.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def other_account_number(self):
        """Gets the other_account_number of this Account.  # noqa: E501

        :return: The other_account_number of this Account.  # noqa: E501
        :rtype: str
        """
        return self._other_account_number

    @other_account_number.setter
    def other_account_number(self, other_account_number):
        """Sets the other_account_number of this Account.

        :param other_account_number: The other_account_number of this Account.  # noqa: E501
        :type: str
        """

        self._other_account_number = other_account_number

    @property
    def account_number_type(self):
        """Gets the account_number_type of this Account.  # noqa: E501

        ISO 20022 Account Number Type, which is the name of the identification scheme.   # noqa: E501

        :return: The account_number_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_number_type

    @account_number_type.setter
    def account_number_type(self, account_number_type):
        """Sets the account_number_type of this Account.

        ISO 20022 Account Number Type, which is the name of the identification scheme.   # noqa: E501

        :param account_number_type: The account_number_type of this Account.  # noqa: E501
        :type: str
        """
        allowed_values = ["IBAN", "BBAN", "MSISDN", "SortCodeAccountNumber", "BANK", "COID", "SREN", "SRET", "NIDN", "OAUT", "CPAN"]  # noqa: E501
        if account_number_type not in allowed_values:
            raise ValueError(
                f"Invalid value for `account_number_type` ({account_number_type}), must be one of {allowed_values}"  # noqa: E501

            )

        self._account_number_type = account_number_type

    @property
    def account_type(self):
        """Gets the account_type of this Account.  # noqa: E501

        :return: The account_type of this Account.  # noqa: E501
        :rtype: AccountType
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this Account.

        :param account_type: The account_type of this Account.  # noqa: E501
        :type: AccountType
        """

        self._account_type = account_type

    @property
    def account_number_type_issuer(self):
        """Gets the account_number_type_issuer of this Account.  # noqa: E501

        Entity that assigns the identification. this could a country code or any organisation name or identifier that can be recognized by both parties according to ISO20022.   # noqa: E501

        :return: The account_number_type_issuer of this Account.  # noqa: E501
        :rtype: str
        """
        return self._account_number_type_issuer

    @account_number_type_issuer.setter
    def account_number_type_issuer(self, account_number_type_issuer):
        """Sets the account_number_type_issuer of this Account.

        Entity that assigns the identification. this could a country code or any organisation name or identifier that can be recognized by both parties according to ISO20022.   # noqa: E501

        :param account_number_type_issuer: The account_number_type_issuer of this Account.  # noqa: E501
        :type: str
        """

        self._account_number_type_issuer = account_number_type_issuer

    @property
    def sub_type(self):
        """Gets the sub_type of this Account.  # noqa: E501

        Since Open Banking UK V2.0. Specifies the type of account. Values: 'CACC' Checking account'.   # noqa: E501

        :return: The sub_type of this Account.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this Account.

        Since Open Banking UK V2.0. Specifies the type of account. Values: 'CACC' Checking account'.   # noqa: E501

        :param sub_type: The sub_type of this Account.  # noqa: E501
        :type: str
        """

        self._sub_type = sub_type

    @property
    def details(self):
        """Gets the details of this Account.  # noqa: E501

        Specifications that might be provided by the ASPSP. * Characteristics of the account * Characteristics of the relevant card.   # noqa: E501

        :return: The details of this Account.  # noqa: E501
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Account.

        Specifications that might be provided by the ASPSP. * Characteristics of the account * Characteristics of the relevant card.   # noqa: E501

        :param details: The details of this Account.  # noqa: E501
        :type: str
        """

        self._details = details

    @property
    def linked_account(self):
        """Gets the linked_account of this Account.  # noqa: E501

        Case of a set of pending card transactions, the ASPSP will provide the Id of the relevant cash account the card is set up on.   # noqa: E501

        :return: The linked_account of this Account.  # noqa: E501
        :rtype: str
        """
        return self._linked_account

    @linked_account.setter
    def linked_account(self, linked_account):
        """Sets the linked_account of this Account.

        Case of a set of pending card transactions, the ASPSP will provide the Id of the relevant cash account the card is set up on.   # noqa: E501

        :param linked_account: The linked_account of this Account.  # noqa: E501
        :type: str
        """

        self._linked_account = linked_account

    @property
    def usage(self):
        """Gets the usage of this Account.  # noqa: E501

        Indications how the account is being used. For example business or personal. Values - 'ORGA' professional account, 'PRIV' private personal account'.   # noqa: E501

        :return: The usage of this Account.  # noqa: E501
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this Account.

        Indications how the account is being used. For example business or personal. Values - 'ORGA' professional account, 'PRIV' private personal account'.   # noqa: E501

        :param usage: The usage of this Account.  # noqa: E501
        :type: str
        """

        self._usage = usage

    @property
    def product(self):
        """Gets the product of this Account.  # noqa: E501

        Product Name of the Bank for this account, proprietary definition.  For example: Girokonto, Fremdwahrungskonto, Multi currency account.'   # noqa: E501

        :return: The product of this Account.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Account.

        Product Name of the Bank for this account, proprietary definition.  For example: Girokonto, Fremdwahrungskonto, Multi currency account.'   # noqa: E501

        :param product: The product of this Account.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def psu_role(self):
        """Gets the psu_role of this Account.  # noqa: E501

        Relationship between the PSU and the account: account holder, Co-account holder, Attorney.   # noqa: E501

        :return: The psu_role of this Account.  # noqa: E501
        :rtype: str
        """
        return self._psu_role

    @psu_role.setter
    def psu_role(self, psu_role):
        """Sets the psu_role of this Account.

        Relationship between the PSU and the account: account holder, Co-account holder, Attorney.   # noqa: E501

        :param psu_role: The psu_role of this Account.  # noqa: E501
        :type: str
        """

        self._psu_role = psu_role

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
