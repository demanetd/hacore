
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Transactions:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_id': 'str',
        'amount': 'Amount',
        'currency': 'Currency',
        'credit_debit_indicator': 'CreditDebitIndicator',
        'status': 'str',
        'booking_date_time': 'datetime',
        'execution_date_time': 'datetime',
        'value_date_time': 'datetime',
        'transaction_date': 'str',
        'remittance_information_unstructured': 'str',
        'address_line': 'str',
        'bank_transaction_code': 'BankTransactionCode',
        'merchant_detail': 'MerchantDetail',
        'creditor_agent': 'CreditorAgent',
        'creditor_account': 'CreditorAccount',
        'debtor_agent': 'DebtorAgent',
        'debtor_account': 'DebtorAccount',
        'purpose_code': 'str',
        'remittance_information_structured': 'RemittanceInformationStructured',
        'equivalent_amount': 'EquivalentAmount',
        'references': 'References',
        'related_parties': 'RelatedParties',
        'currency_exchange': 'list[CurrencyExchange]',
        'category_id': 'str'
    }

    attribute_map = {
        'transaction_id': 'TransactionId',
        'amount': 'Amount',
        'currency': 'Currency',
        'credit_debit_indicator': 'CreditDebitIndicator',
        'status': 'Status',
        'booking_date_time': 'BookingDateTime',
        'execution_date_time': 'ExecutionDateTime',
        'value_date_time': 'ValueDateTime',
        'transaction_date': 'TransactionDate',
        'remittance_information_unstructured': 'RemittanceInformationUnstructured',
        'address_line': 'AddressLine',
        'bank_transaction_code': 'BankTransactionCode',
        'merchant_detail': 'MerchantDetail',
        'creditor_agent': 'CreditorAgent',
        'creditor_account': 'CreditorAccount',
        'debtor_agent': 'DebtorAgent',
        'debtor_account': 'DebtorAccount',
        'purpose_code': 'PurposeCode',
        'remittance_information_structured': 'RemittanceInformationStructured',
        'equivalent_amount': 'EquivalentAmount',
        'references': 'References',
        'related_parties': 'RelatedParties',
        'currency_exchange': 'CurrencyExchange',
        'category_id': 'CategoryId'
    }

    def __init__(self, transaction_id=None, amount=None, currency=None, credit_debit_indicator=None, status=None, booking_date_time=None, execution_date_time=None, value_date_time=None, transaction_date=None, remittance_information_unstructured=None, address_line=None, bank_transaction_code=None, merchant_detail=None, creditor_agent=None, creditor_account=None, debtor_agent=None, debtor_account=None, purpose_code=None, remittance_information_structured=None, equivalent_amount=None, references=None, related_parties=None, currency_exchange=None, category_id=None):  # noqa: E501
        """Transactions - a model defined in Swagger"""  # noqa: E501
        self._transaction_id = None
        self._amount = None
        self._currency = None
        self._credit_debit_indicator = None
        self._status = None
        self._booking_date_time = None
        self._execution_date_time = None
        self._value_date_time = None
        self._transaction_date = None
        self._remittance_information_unstructured = None
        self._address_line = None
        self._bank_transaction_code = None
        self._merchant_detail = None
        self._creditor_agent = None
        self._creditor_account = None
        self._debtor_agent = None
        self._debtor_account = None
        self._purpose_code = None
        self._remittance_information_structured = None
        self._equivalent_amount = None
        self._references = None
        self._related_parties = None
        self._currency_exchange = None
        self._category_id = None
        self.discriminator = None
        if transaction_id is not None:
            self.transaction_id = transaction_id
        self.amount = amount
        self.currency = currency
        self.credit_debit_indicator = credit_debit_indicator
        self.status = status
        self.booking_date_time = booking_date_time
        if execution_date_time is not None:
            self.execution_date_time = execution_date_time
        if value_date_time is not None:
            self.value_date_time = value_date_time
        if transaction_date is not None:
            self.transaction_date = transaction_date
        if remittance_information_unstructured is not None:
            self.remittance_information_unstructured = remittance_information_unstructured
        if address_line is not None:
            self.address_line = address_line
        if bank_transaction_code is not None:
            self.bank_transaction_code = bank_transaction_code
        if merchant_detail is not None:
            self.merchant_detail = merchant_detail
        if creditor_agent is not None:
            self.creditor_agent = creditor_agent
        if creditor_account is not None:
            self.creditor_account = creditor_account
        if debtor_agent is not None:
            self.debtor_agent = debtor_agent
        if debtor_account is not None:
            self.debtor_account = debtor_account
        if purpose_code is not None:
            self.purpose_code = purpose_code
        if remittance_information_structured is not None:
            self.remittance_information_structured = remittance_information_structured
        if equivalent_amount is not None:
            self.equivalent_amount = equivalent_amount
        if references is not None:
            self.references = references
        if related_parties is not None:
            self.related_parties = related_parties
        if currency_exchange is not None:
            self.currency_exchange = currency_exchange
        if category_id is not None:
            self.category_id = category_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Transactions.  # noqa: E501

        Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain. Not provided by all ASPSPs.  The transaction identification can be used for reconciliation, tracking or to link tasks relating to the transaction on the interbank level.   # noqa: E501

        :return: The transaction_id of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Transactions.

        Unique identification, as assigned by the first instructing agent, to unambiguously identify the transaction that is passed on, unchanged, throughout the entire interbank chain. Not provided by all ASPSPs.  The transaction identification can be used for reconciliation, tracking or to link tasks relating to the transaction on the interbank level.   # noqa: E501

        :param transaction_id: The transaction_id of this Transactions.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def amount(self):
        """Gets the amount of this Transactions.  # noqa: E501

        :return: The amount of this Transactions.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transactions.

        :param amount: The amount of this Transactions.  # noqa: E501
        :type: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Transactions.  # noqa: E501

        :return: The currency of this Transactions.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Transactions.

        :param currency: The currency of this Transactions.  # noqa: E501
        :type: Currency
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def credit_debit_indicator(self):
        """Gets the credit_debit_indicator of this Transactions.  # noqa: E501

        :return: The credit_debit_indicator of this Transactions.  # noqa: E501
        :rtype: CreditDebitIndicator
        """
        return self._credit_debit_indicator

    @credit_debit_indicator.setter
    def credit_debit_indicator(self, credit_debit_indicator):
        """Sets the credit_debit_indicator of this Transactions.

        :param credit_debit_indicator: The credit_debit_indicator of this Transactions.  # noqa: E501
        :type: CreditDebitIndicator
        """
        if credit_debit_indicator is None:
            raise ValueError("Invalid value for `credit_debit_indicator`, must not be `None`")  # noqa: E501

        self._credit_debit_indicator = credit_debit_indicator

    @property
    def status(self):
        """Gets the status of this Transactions.  # noqa: E501

        Type of transaction.   # noqa: E501

        :return: The status of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transactions.

        Type of transaction.   # noqa: E501

        :param status: The status of this Transactions.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["BOOK", "PDNG", "INFO", "FUTR", "OTHR"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                f"Invalid value for `status` ({status}), must be one of {allowed_values}"  # noqa: E501

            )

        self._status = status

    @property
    def booking_date_time(self):
        """Gets the booking_date_time of this Transactions.  # noqa: E501

        Booking date of the transaction on the account.   # noqa: E501

        :return: The booking_date_time of this Transactions.  # noqa: E501
        :rtype: datetime
        """
        return self._booking_date_time

    @booking_date_time.setter
    def booking_date_time(self, booking_date_time):
        """Sets the booking_date_time of this Transactions.

        Booking date of the transaction on the account.   # noqa: E501

        :param booking_date_time: The booking_date_time of this Transactions.  # noqa: E501
        :type: datetime
        """
        if booking_date_time is None:
            raise ValueError("Invalid value for `booking_date_time`, must not be `None`")  # noqa: E501

        self._booking_date_time = booking_date_time

    @property
    def execution_date_time(self):
        """Gets the execution_date_time of this Transactions.  # noqa: E501

        PSU Account transaction execution date.   # noqa: E501

        :return: The execution_date_time of this Transactions.  # noqa: E501
        :rtype: datetime
        """
        return self._execution_date_time

    @execution_date_time.setter
    def execution_date_time(self, execution_date_time):
        """Sets the execution_date_time of this Transactions.

        PSU Account transaction execution date.   # noqa: E501

        :param execution_date_time: The execution_date_time of this Transactions.  # noqa: E501
        :type: datetime
        """

        self._execution_date_time = execution_date_time

    @property
    def value_date_time(self):
        """Gets the value_date_time of this Transactions.  # noqa: E501

        Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit entry.   # noqa: E501

        :return: The value_date_time of this Transactions.  # noqa: E501
        :rtype: datetime
        """
        return self._value_date_time

    @value_date_time.setter
    def value_date_time(self, value_date_time):
        """Sets the value_date_time of this Transactions.

        Date and time at which assets become available to the account owner in case of a credit entry, or cease to be available to the account owner in case of a debit entry.   # noqa: E501

        :param value_date_time: The value_date_time of this Transactions.  # noqa: E501
        :type: datetime
        """

        self._value_date_time = value_date_time

    @property
    def transaction_date(self):
        """Gets the transaction_date of this Transactions.  # noqa: E501

        Indicates the date of the transaction. Date in ISO format yyyy -MM-dd.   # noqa: E501

        :return: The transaction_date of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._transaction_date

    @transaction_date.setter
    def transaction_date(self, transaction_date):
        """Sets the transaction_date of this Transactions.

        Indicates the date of the transaction. Date in ISO format yyyy -MM-dd.   # noqa: E501

        :param transaction_date: The transaction_date of this Transactions.  # noqa: E501
        :type: str
        """

        self._transaction_date = transaction_date

    @property
    def remittance_information_unstructured(self):
        """Gets the remittance_information_unstructured of this Transactions.  # noqa: E501

        Unstructured remittance information.   # noqa: E501

        :return: The remittance_information_unstructured of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured):
        """Sets the remittance_information_unstructured of this Transactions.

        Unstructured remittance information.   # noqa: E501

        :param remittance_information_unstructured: The remittance_information_unstructured of this Transactions.  # noqa: E501
        :type: str
        """

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def address_line(self):
        """Gets the address_line of this Transactions.  # noqa: E501

        Information that locates and identifies a specific address, as defined by postal services, that is presented in free format text.   # noqa: E501

        :return: The address_line of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._address_line

    @address_line.setter
    def address_line(self, address_line):
        """Sets the address_line of this Transactions.

        Information that locates and identifies a specific address, as defined by postal services, that is presented in free format text.   # noqa: E501

        :param address_line: The address_line of this Transactions.  # noqa: E501
        :type: str
        """

        self._address_line = address_line

    @property
    def bank_transaction_code(self):
        """Gets the bank_transaction_code of this Transactions.  # noqa: E501

        :return: The bank_transaction_code of this Transactions.  # noqa: E501
        :rtype: BankTransactionCode
        """
        return self._bank_transaction_code

    @bank_transaction_code.setter
    def bank_transaction_code(self, bank_transaction_code):
        """Sets the bank_transaction_code of this Transactions.

        :param bank_transaction_code: The bank_transaction_code of this Transactions.  # noqa: E501
        :type: BankTransactionCode
        """

        self._bank_transaction_code = bank_transaction_code

    @property
    def merchant_detail(self):
        """Gets the merchant_detail of this Transactions.  # noqa: E501

        :return: The merchant_detail of this Transactions.  # noqa: E501
        :rtype: MerchantDetail
        """
        return self._merchant_detail

    @merchant_detail.setter
    def merchant_detail(self, merchant_detail):
        """Sets the merchant_detail of this Transactions.

        :param merchant_detail: The merchant_detail of this Transactions.  # noqa: E501
        :type: MerchantDetail
        """

        self._merchant_detail = merchant_detail

    @property
    def creditor_agent(self):
        """Gets the creditor_agent of this Transactions.  # noqa: E501

        :return: The creditor_agent of this Transactions.  # noqa: E501
        :rtype: CreditorAgent
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent):
        """Sets the creditor_agent of this Transactions.

        :param creditor_agent: The creditor_agent of this Transactions.  # noqa: E501
        :type: CreditorAgent
        """

        self._creditor_agent = creditor_agent

    @property
    def creditor_account(self):
        """Gets the creditor_account of this Transactions.  # noqa: E501

        :return: The creditor_account of this Transactions.  # noqa: E501
        :rtype: CreditorAccount
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this Transactions.

        :param creditor_account: The creditor_account of this Transactions.  # noqa: E501
        :type: CreditorAccount
        """

        self._creditor_account = creditor_account

    @property
    def debtor_agent(self):
        """Gets the debtor_agent of this Transactions.  # noqa: E501

        :return: The debtor_agent of this Transactions.  # noqa: E501
        :rtype: DebtorAgent
        """
        return self._debtor_agent

    @debtor_agent.setter
    def debtor_agent(self, debtor_agent):
        """Sets the debtor_agent of this Transactions.

        :param debtor_agent: The debtor_agent of this Transactions.  # noqa: E501
        :type: DebtorAgent
        """

        self._debtor_agent = debtor_agent

    @property
    def debtor_account(self):
        """Gets the debtor_account of this Transactions.  # noqa: E501

        :return: The debtor_account of this Transactions.  # noqa: E501
        :rtype: DebtorAccount
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this Transactions.

        :param debtor_account: The debtor_account of this Transactions.  # noqa: E501
        :type: DebtorAccount
        """

        self._debtor_account = debtor_account

    @property
    def purpose_code(self):
        """Gets the purpose_code of this Transactions.  # noqa: E501

        Specifies the external purpose code in the format of character string with a maximum length of 4 characters.  ISO 20022 ExternalPurpose1Code.   # noqa: E501

        :return: The purpose_code of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this Transactions.

        Specifies the external purpose code in the format of character string with a maximum length of 4 characters.  ISO 20022 ExternalPurpose1Code.   # noqa: E501

        :param purpose_code: The purpose_code of this Transactions.  # noqa: E501
        :type: str
        """

        self._purpose_code = purpose_code

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this Transactions.  # noqa: E501

        :return: The remittance_information_structured of this Transactions.  # noqa: E501
        :rtype: RemittanceInformationStructured
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this Transactions.

        :param remittance_information_structured: The remittance_information_structured of this Transactions.  # noqa: E501
        :type: RemittanceInformationStructured
        """

        self._remittance_information_structured = remittance_information_structured

    @property
    def equivalent_amount(self):
        """Gets the equivalent_amount of this Transactions.  # noqa: E501

        :return: The equivalent_amount of this Transactions.  # noqa: E501
        :rtype: EquivalentAmount
        """
        return self._equivalent_amount

    @equivalent_amount.setter
    def equivalent_amount(self, equivalent_amount):
        """Sets the equivalent_amount of this Transactions.

        :param equivalent_amount: The equivalent_amount of this Transactions.  # noqa: E501
        :type: EquivalentAmount
        """

        self._equivalent_amount = equivalent_amount

    @property
    def references(self):
        """Gets the references of this Transactions.  # noqa: E501

        :return: The references of this Transactions.  # noqa: E501
        :rtype: References
        """
        return self._references

    @references.setter
    def references(self, references):
        """Sets the references of this Transactions.

        :param references: The references of this Transactions.  # noqa: E501
        :type: References
        """

        self._references = references

    @property
    def related_parties(self):
        """Gets the related_parties of this Transactions.  # noqa: E501

        :return: The related_parties of this Transactions.  # noqa: E501
        :rtype: RelatedParties
        """
        return self._related_parties

    @related_parties.setter
    def related_parties(self, related_parties):
        """Sets the related_parties of this Transactions.

        :param related_parties: The related_parties of this Transactions.  # noqa: E501
        :type: RelatedParties
        """

        self._related_parties = related_parties

    @property
    def currency_exchange(self):
        """Gets the currency_exchange of this Transactions.  # noqa: E501

        Set of elements used to provide details on the currency exchange.   # noqa: E501

        :return: The currency_exchange of this Transactions.  # noqa: E501
        :rtype: list[CurrencyExchange]
        """
        return self._currency_exchange

    @currency_exchange.setter
    def currency_exchange(self, currency_exchange):
        """Sets the currency_exchange of this Transactions.

        Set of elements used to provide details on the currency exchange.   # noqa: E501

        :param currency_exchange: The currency_exchange of this Transactions.  # noqa: E501
        :type: list[CurrencyExchange]
        """

        self._currency_exchange = currency_exchange

    @property
    def category_id(self):
        """Gets the category_id of this Transactions.  # noqa: E501

        Identification of the category associated with the transaction. This field is reserved for future use and will only be filled if an extended service is contracted.   # noqa: E501

        :return: The category_id of this Transactions.  # noqa: E501
        :rtype: str
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Transactions.

        Identification of the category associated with the transaction. This field is reserved for future use and will only be filled if an extended service is contracted.   # noqa: E501

        :param category_id: The category_id of this Transactions.  # noqa: E501
        :type: str
        """

        self._category_id = category_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transactions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transactions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
