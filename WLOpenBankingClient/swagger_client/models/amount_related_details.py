
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AmountRelatedDetails:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_fees': 'TransactionFees',
        'exchange_rate_information': 'ExchangeRateInformationResponse',
        'currency_conversion_fee': 'CurrencyConversionFee',
        'estimated_total_amount': 'EstimatedTotalAmount',
        'estimated_interbank_settlement_amount': 'EstimatedInterbankSettlementAmount'
    }

    attribute_map = {
        'transaction_fees': 'TransactionFees',
        'exchange_rate_information': 'ExchangeRateInformation',
        'currency_conversion_fee': 'CurrencyConversionFee',
        'estimated_total_amount': 'EstimatedTotalAmount',
        'estimated_interbank_settlement_amount': 'EstimatedInterbankSettlementAmount'
    }

    def __init__(self, transaction_fees=None, exchange_rate_information=None, currency_conversion_fee=None, estimated_total_amount=None, estimated_interbank_settlement_amount=None):  # noqa: E501
        """AmountRelatedDetails - a model defined in Swagger"""  # noqa: E501
        self._transaction_fees = None
        self._exchange_rate_information = None
        self._currency_conversion_fee = None
        self._estimated_total_amount = None
        self._estimated_interbank_settlement_amount = None
        self.discriminator = None
        if transaction_fees is not None:
            self.transaction_fees = transaction_fees
        if exchange_rate_information is not None:
            self.exchange_rate_information = exchange_rate_information
        if currency_conversion_fee is not None:
            self.currency_conversion_fee = currency_conversion_fee
        if estimated_total_amount is not None:
            self.estimated_total_amount = estimated_total_amount
        if estimated_interbank_settlement_amount is not None:
            self.estimated_interbank_settlement_amount = estimated_interbank_settlement_amount

    @property
    def transaction_fees(self):
        """Gets the transaction_fees of this AmountRelatedDetails.  # noqa: E501

        :return: The transaction_fees of this AmountRelatedDetails.  # noqa: E501
        :rtype: TransactionFees
        """
        return self._transaction_fees

    @transaction_fees.setter
    def transaction_fees(self, transaction_fees):
        """Sets the transaction_fees of this AmountRelatedDetails.

        :param transaction_fees: The transaction_fees of this AmountRelatedDetails.  # noqa: E501
        :type: TransactionFees
        """

        self._transaction_fees = transaction_fees

    @property
    def exchange_rate_information(self):
        """Gets the exchange_rate_information of this AmountRelatedDetails.  # noqa: E501

        :return: The exchange_rate_information of this AmountRelatedDetails.  # noqa: E501
        :rtype: ExchangeRateInformationResponse
        """
        return self._exchange_rate_information

    @exchange_rate_information.setter
    def exchange_rate_information(self, exchange_rate_information):
        """Sets the exchange_rate_information of this AmountRelatedDetails.

        :param exchange_rate_information: The exchange_rate_information of this AmountRelatedDetails.  # noqa: E501
        :type: ExchangeRateInformationResponse
        """

        self._exchange_rate_information = exchange_rate_information

    @property
    def currency_conversion_fee(self):
        """Gets the currency_conversion_fee of this AmountRelatedDetails.  # noqa: E501

        :return: The currency_conversion_fee of this AmountRelatedDetails.  # noqa: E501
        :rtype: CurrencyConversionFee
        """
        return self._currency_conversion_fee

    @currency_conversion_fee.setter
    def currency_conversion_fee(self, currency_conversion_fee):
        """Sets the currency_conversion_fee of this AmountRelatedDetails.

        :param currency_conversion_fee: The currency_conversion_fee of this AmountRelatedDetails.  # noqa: E501
        :type: CurrencyConversionFee
        """

        self._currency_conversion_fee = currency_conversion_fee

    @property
    def estimated_total_amount(self):
        """Gets the estimated_total_amount of this AmountRelatedDetails.  # noqa: E501

        :return: The estimated_total_amount of this AmountRelatedDetails.  # noqa: E501
        :rtype: EstimatedTotalAmount
        """
        return self._estimated_total_amount

    @estimated_total_amount.setter
    def estimated_total_amount(self, estimated_total_amount):
        """Sets the estimated_total_amount of this AmountRelatedDetails.

        :param estimated_total_amount: The estimated_total_amount of this AmountRelatedDetails.  # noqa: E501
        :type: EstimatedTotalAmount
        """

        self._estimated_total_amount = estimated_total_amount

    @property
    def estimated_interbank_settlement_amount(self):
        """Gets the estimated_interbank_settlement_amount of this AmountRelatedDetails.  # noqa: E501

        :return: The estimated_interbank_settlement_amount of this AmountRelatedDetails.  # noqa: E501
        :rtype: EstimatedInterbankSettlementAmount
        """
        return self._estimated_interbank_settlement_amount

    @estimated_interbank_settlement_amount.setter
    def estimated_interbank_settlement_amount(self, estimated_interbank_settlement_amount):
        """Sets the estimated_interbank_settlement_amount of this AmountRelatedDetails.

        :param estimated_interbank_settlement_amount: The estimated_interbank_settlement_amount of this AmountRelatedDetails.  # noqa: E501
        :type: EstimatedInterbankSettlementAmount
        """

        self._estimated_interbank_settlement_amount = estimated_interbank_settlement_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AmountRelatedDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AmountRelatedDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
