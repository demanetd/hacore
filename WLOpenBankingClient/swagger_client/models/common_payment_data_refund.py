
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CommonPaymentDataRefund:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'initiating_party_reference_id': 'str',
        'use_pre_authentication': 'bool',
        'preferred_sca_method': 'list[str]',
        'psu_data': 'PsuData',
        'refunds': 'list[Refund]'
    }

    attribute_map = {
        'initiating_party_reference_id': 'InitiatingPartyReferenceId',
        'use_pre_authentication': 'UsePreAuthentication',
        'preferred_sca_method': 'PreferredScaMethod',
        'psu_data': 'PsuData',
        'refunds': 'Refunds'
    }

    def __init__(self, initiating_party_reference_id=None, use_pre_authentication=False, preferred_sca_method=None, psu_data=None, refunds=None):  # noqa: E501
        """CommonPaymentDataRefund - a model defined in Swagger"""  # noqa: E501
        self._initiating_party_reference_id = None
        self._use_pre_authentication = None
        self._preferred_sca_method = None
        self._psu_data = None
        self._refunds = None
        self.discriminator = None
        self.initiating_party_reference_id = initiating_party_reference_id
        if use_pre_authentication is not None:
            self.use_pre_authentication = use_pre_authentication
        if preferred_sca_method is not None:
            self.preferred_sca_method = preferred_sca_method
        if psu_data is not None:
            self.psu_data = psu_data
        self.refunds = refunds

    @property
    def initiating_party_reference_id(self):
        """Gets the initiating_party_reference_id of this CommonPaymentDataRefund.  # noqa: E501

        Reference to the payment created by the Initiating Party. This Id will not be visible to the Payment Service User.   # noqa: E501

        :return: The initiating_party_reference_id of this CommonPaymentDataRefund.  # noqa: E501
        :rtype: str
        """
        return self._initiating_party_reference_id

    @initiating_party_reference_id.setter
    def initiating_party_reference_id(self, initiating_party_reference_id):
        """Sets the initiating_party_reference_id of this CommonPaymentDataRefund.

        Reference to the payment created by the Initiating Party. This Id will not be visible to the Payment Service User.   # noqa: E501

        :param initiating_party_reference_id: The initiating_party_reference_id of this CommonPaymentDataRefund.  # noqa: E501
        :type: str
        """
        if initiating_party_reference_id is None:
            raise ValueError("Invalid value for `initiating_party_reference_id`, must not be `None`")  # noqa: E501

        self._initiating_party_reference_id = initiating_party_reference_id

    @property
    def use_pre_authentication(self):
        """Gets the use_pre_authentication of this CommonPaymentDataRefund.  # noqa: E501

        Whether or not the pre-authentication token should be re-used.   # noqa: E501

        :return: The use_pre_authentication of this CommonPaymentDataRefund.  # noqa: E501
        :rtype: bool
        """
        return self._use_pre_authentication

    @use_pre_authentication.setter
    def use_pre_authentication(self, use_pre_authentication):
        """Sets the use_pre_authentication of this CommonPaymentDataRefund.

        Whether or not the pre-authentication token should be re-used.   # noqa: E501

        :param use_pre_authentication: The use_pre_authentication of this CommonPaymentDataRefund.  # noqa: E501
        :type: bool
        """

        self._use_pre_authentication = use_pre_authentication

    @property
    def preferred_sca_method(self):
        """Gets the preferred_sca_method of this CommonPaymentDataRefund.  # noqa: E501

        :return: The preferred_sca_method of this CommonPaymentDataRefund.  # noqa: E501
        :rtype: list[str]
        """
        return self._preferred_sca_method

    @preferred_sca_method.setter
    def preferred_sca_method(self, preferred_sca_method):
        """Sets the preferred_sca_method of this CommonPaymentDataRefund.

        :param preferred_sca_method: The preferred_sca_method of this CommonPaymentDataRefund.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Redirect", "Decoupled", "Embedded"]  # noqa: E501
        if not set(preferred_sca_method).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `preferred_sca_method` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(preferred_sca_method) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._preferred_sca_method = preferred_sca_method

    @property
    def psu_data(self):
        """Gets the psu_data of this CommonPaymentDataRefund.  # noqa: E501

        :return: The psu_data of this CommonPaymentDataRefund.  # noqa: E501
        :rtype: PsuData
        """
        return self._psu_data

    @psu_data.setter
    def psu_data(self, psu_data):
        """Sets the psu_data of this CommonPaymentDataRefund.

        :param psu_data: The psu_data of this CommonPaymentDataRefund.  # noqa: E501
        :type: PsuData
        """

        self._psu_data = psu_data

    @property
    def refunds(self):
        """Gets the refunds of this CommonPaymentDataRefund.  # noqa: E501

        :return: The refunds of this CommonPaymentDataRefund.  # noqa: E501
        :rtype: list[Refund]
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this CommonPaymentDataRefund.

        :param refunds: The refunds of this CommonPaymentDataRefund.  # noqa: E501
        :type: list[Refund]
        """
        if refunds is None:
            raise ValueError("Invalid value for `refunds`, must not be `None`")  # noqa: E501

        self._refunds = refunds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonPaymentDataRefund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonPaymentDataRefund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
