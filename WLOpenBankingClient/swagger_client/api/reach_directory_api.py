
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ReachDirectoryApi:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def reach(self, x_request_id, message_create_date_time, service, **kwargs):  # noqa: E501
        """Get list of ASPSPs reachable with our Open Banking Services  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reach(x_request_id, message_create_date_time, service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str service: The name of the service for which the reach will be retrieved. Only AIS or PIS is allowed.  (required)
        :param str country: List ASPSPs of given country only. ISO 3166-1, Alpha-2 standard 
        :param bool all_details: When `true` the details block in the response is provided. 
        :param bool all_options: When `true` the options block in the response is provided. 
        :param str category_label: Filter request that contains a specified Label 
        :param bool all_aspsp_specific_fields: When `true` the AspspSpecificFields block in the response is provided. 
        :return: ReachDirectoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reach_with_http_info(x_request_id, message_create_date_time, service, **kwargs)  # noqa: E501
        (data) = self.reach_with_http_info(x_request_id, message_create_date_time, service, **kwargs)  # noqa: E501
        return data

    def reach_with_http_info(self, x_request_id, message_create_date_time, service, **kwargs):  # noqa: E501
        """Get list of ASPSPs reachable with our Open Banking Services  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reach_with_http_info(x_request_id, message_create_date_time, service, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str service: The name of the service for which the reach will be retrieved. Only AIS or PIS is allowed.  (required)
        :param str country: List ASPSPs of given country only. ISO 3166-1, Alpha-2 standard 
        :param bool all_details: When `true` the details block in the response is provided. 
        :param bool all_options: When `true` the options block in the response is provided. 
        :param str category_label: Filter request that contains a specified Label 
        :param bool all_aspsp_specific_fields: When `true` the AspspSpecificFields block in the response is provided. 
        :return: ReachDirectoryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'message_create_date_time', 'service', 'country', 'all_details', 'all_options', 'category_label', 'all_aspsp_specific_fields']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reach" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `reach`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `reach`")  # noqa: E501
        # verify the required parameter 'service' is set
        if ('service' not in params or
                params['service'] is None):
            raise ValueError("Missing the required parameter `service` when calling `reach`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'country' in params:
            query_params.append(('country', params['country']))  # noqa: E501
        if 'all_details' in params:
            query_params.append(('allDetails', params['all_details']))  # noqa: E501
        if 'all_options' in params:
            query_params.append(('allOptions', params['all_options']))  # noqa: E501
        if 'category_label' in params:
            query_params.append(('categoryLabel', params['category_label']))  # noqa: E501
        if 'all_aspsp_specific_fields' in params:
            query_params.append(('allAspspSpecificFields', params['all_aspsp_specific_fields']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501
        if 'service' in params:
            header_params['Service'] = params['service']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/directory/v3/aspsps', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ReachDirectoryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
