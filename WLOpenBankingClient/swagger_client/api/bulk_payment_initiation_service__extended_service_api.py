
"""Open Banking Reach + AIS  PIS

# REACH The Reach Directory is used to get the a list of ASPSP's which can be reached for a  specific Service. **Sandbox** The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire) 97fb13a74c712d8c7a50476e71769eaf  # AIS There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the Links section which next API call is required to complete the consent request.  **Sandbox** Several AspspId's are available to test specific account information scenario's, see sandbox     documentation. The following authorization token can be used to test in the sandbox (unlike a real token this one     doesn't expire) **d5bd895a4080dbbb469a207460b6fca**  # PIS There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported. **Sandbox** Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.2.0 + 3.6.0 + 3.7.0
    
Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BulkPaymentInitiationServiceExtendedServiceApi:
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bulk_payment_authorisation(self, x_request_id, message_create_date_time, payment_id, **kwargs):  # noqa: E501
        """Payment authorisation request  # noqa: E501

        Use this operation to authorise a PSU explicitly. This has to be used if multiple PSU's have to authorise the payment. Background information: If only one PSU has to authorise, this step is started implicitly by the post bulk-payments api.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_authorisation(x_request_id, message_create_date_time, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param PaymentAuthorisationRequest body:
        :return: PaymentAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_payment_authorisation_with_http_info(x_request_id, message_create_date_time, payment_id, **kwargs)  # noqa: E501
        (data) = self.bulk_payment_authorisation_with_http_info(x_request_id, message_create_date_time, payment_id, **kwargs)  # noqa: E501
        return data

    def bulk_payment_authorisation_with_http_info(self, x_request_id, message_create_date_time, payment_id, **kwargs):  # noqa: E501
        """Payment authorisation request  # noqa: E501

        Use this operation to authorise a PSU explicitly. This has to be used if multiple PSU's have to authorise the payment. Background information: If only one PSU has to authorise, this step is started implicitly by the post bulk-payments api.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_authorisation_with_http_info(x_request_id, message_create_date_time, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param PaymentAuthorisationRequest body:
        :return: PaymentAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'message_create_date_time', 'payment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_payment_authorisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `bulk_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `bulk_payment_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `bulk_payment_authorisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ob/pis/v3/bulk-payments/{paymentId}/authorisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentAuthorisationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_payment_authorisation_update(self, x_request_id, message_create_date_time, payment_id, authorisation_id, **kwargs):  # noqa: E501
        """Payment authorisation request  # noqa: E501

        Use this operation to change the authorisation resource.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_authorisation_update(x_request_id, message_create_date_time, payment_id, authorisation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param str authorisation_id: The Id used by the Open Banking Service to refer to an authorisation resource.  (required)
        :param PaymentAuthorisationUpdateRequest body:
        :return: PaymentAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_payment_authorisation_update_with_http_info(x_request_id, message_create_date_time, payment_id, authorisation_id, **kwargs)  # noqa: E501
        (data) = self.bulk_payment_authorisation_update_with_http_info(x_request_id, message_create_date_time, payment_id, authorisation_id, **kwargs)  # noqa: E501
        return data

    def bulk_payment_authorisation_update_with_http_info(self, x_request_id, message_create_date_time, payment_id, authorisation_id, **kwargs):  # noqa: E501
        """Payment authorisation request  # noqa: E501

        Use this operation to change the authorisation resource.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_authorisation_update_with_http_info(x_request_id, message_create_date_time, payment_id, authorisation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param str authorisation_id: The Id used by the Open Banking Service to refer to an authorisation resource.  (required)
        :param PaymentAuthorisationUpdateRequest body:
        :return: PaymentAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'message_create_date_time', 'payment_id', 'authorisation_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_payment_authorisation_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `bulk_payment_authorisation_update`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `bulk_payment_authorisation_update`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `bulk_payment_authorisation_update`")  # noqa: E501
        # verify the required parameter 'authorisation_id' is set
        if ('authorisation_id' not in params or
                params['authorisation_id'] is None):
            raise ValueError("Missing the required parameter `authorisation_id` when calling `bulk_payment_authorisation_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501
        if 'authorisation_id' in params:
            path_params['authorisationId'] = params['authorisation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ob/pis/v3/bulk-payments/{paymentId}/authorisations/{authorisationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentAuthorisationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_payment_cancellation(self, payment_id, x_request_id, message_create_date_time, **kwargs):  # noqa: E501
        """Payment cancellation request  # noqa: E501

        Use this operation to cancel a payment on behalf of the Payment Service User. Strong Customer Authentication might be required by the ASPSP, the response will indicate which step is required to complete the cancellation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_cancellation(payment_id, x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str initiating_party_return_url: The callback URL for the redirection back to the Initiating Party after authorization. 
        :param str aspsp_psu_id: PSU’s Id at ASPSP. Allows the unique identification of the PSU at the ASPSP. 
        :param str aspsp_psu_id_type: Type of the Aspsp PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str aspsp_psu_corporate_id: Identification of a Corporate in the Online Channels. 
        :param str aspsp_psu_corporate_id_type: This is describing the type of the identification needed by the ASPSP to identify the PSUCorporate-ID type. 
        :param bool use_authorisation_landing_pages: If true, the Bank Selection Interface provided by Open Banking Service will be used to request required information from the PSU directly. 
        :param str locale: 2-digit ISO-639 code for the language in which the Bank Selection Interface is displayed.  For special languages can be used 5-digit code like nl-BE, where first is ISO-639 langauge code and the second is ISO-3166 country code.  If not set, the language of the Bank Selection Interface is taken over from the end user’s browser configuration or the system configuration of the Bank Selection Interface server. 
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU. 
        :return: PaymentCancellationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_payment_cancellation_with_http_info(payment_id, x_request_id, message_create_date_time, **kwargs)  # noqa: E501
        (data) = self.bulk_payment_cancellation_with_http_info(payment_id, x_request_id, message_create_date_time, **kwargs)  # noqa: E501
        return data

    def bulk_payment_cancellation_with_http_info(self, payment_id, x_request_id, message_create_date_time, **kwargs):  # noqa: E501
        """Payment cancellation request  # noqa: E501

        Use this operation to cancel a payment on behalf of the Payment Service User. Strong Customer Authentication might be required by the ASPSP, the response will indicate which step is required to complete the cancellation.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_cancellation_with_http_info(payment_id, x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str initiating_party_return_url: The callback URL for the redirection back to the Initiating Party after authorization. 
        :param str aspsp_psu_id: PSU’s Id at ASPSP. Allows the unique identification of the PSU at the ASPSP. 
        :param str aspsp_psu_id_type: Type of the Aspsp PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility. 
        :param str aspsp_psu_corporate_id: Identification of a Corporate in the Online Channels. 
        :param str aspsp_psu_corporate_id_type: This is describing the type of the identification needed by the ASPSP to identify the PSUCorporate-ID type. 
        :param bool use_authorisation_landing_pages: If true, the Bank Selection Interface provided by Open Banking Service will be used to request required information from the PSU directly. 
        :param str locale: 2-digit ISO-639 code for the language in which the Bank Selection Interface is displayed.  For special languages can be used 5-digit code like nl-BE, where first is ISO-639 langauge code and the second is ISO-3166 country code.  If not set, the language of the Bank Selection Interface is taken over from the end user’s browser configuration or the system configuration of the Bank Selection Interface server. 
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU. 
        :return: PaymentCancellationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', 'x_request_id', 'message_create_date_time', 'initiating_party_return_url', 'aspsp_psu_id', 'aspsp_psu_id_type', 'aspsp_psu_corporate_id', 'aspsp_psu_corporate_id_type', 'use_authorisation_landing_pages', 'locale', 'psu_ip_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_payment_cancellation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `bulk_payment_cancellation`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `bulk_payment_cancellation`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `bulk_payment_cancellation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501
        if 'initiating_party_return_url' in params:
            header_params['InitiatingPartyReturnUrl'] = params['initiating_party_return_url']  # noqa: E501
        if 'aspsp_psu_id' in params:
            header_params['AspspPsuId'] = params['aspsp_psu_id']  # noqa: E501
        if 'aspsp_psu_id_type' in params:
            header_params['AspspPsuIdType'] = params['aspsp_psu_id_type']  # noqa: E501
        if 'aspsp_psu_corporate_id' in params:
            header_params['AspspPsuCorporateId'] = params['aspsp_psu_corporate_id']  # noqa: E501
        if 'aspsp_psu_corporate_id_type' in params:
            header_params['AspspPsuCorporateIdType'] = params['aspsp_psu_corporate_id_type']  # noqa: E501
        if 'use_authorisation_landing_pages' in params:
            header_params['UseAuthorisationLandingPages'] = params['use_authorisation_landing_pages']  # noqa: E501
        if 'locale' in params:
            header_params['Locale'] = params['locale']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PsuIpAddress'] = params['psu_ip_address']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ob/pis/v3/bulk-payments/{paymentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentCancellationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_payment_cancellation_authorisation(self, x_request_id, message_create_date_time, payment_id, **kwargs):  # noqa: E501
        """Payment cancellation authorisation request  # noqa: E501

        Use this operation to authorise a PSU explicitly.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_cancellation_authorisation(x_request_id, message_create_date_time, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param PaymentAuthorisationRequest body:
        :return: PaymentAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_payment_cancellation_authorisation_with_http_info(x_request_id, message_create_date_time, payment_id, **kwargs)  # noqa: E501
        (data) = self.bulk_payment_cancellation_authorisation_with_http_info(x_request_id, message_create_date_time, payment_id, **kwargs)  # noqa: E501
        return data

    def bulk_payment_cancellation_authorisation_with_http_info(self, x_request_id, message_create_date_time, payment_id, **kwargs):  # noqa: E501
        """Payment cancellation authorisation request  # noqa: E501

        Use this operation to authorise a PSU explicitly.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_cancellation_authorisation_with_http_info(x_request_id, message_create_date_time, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param PaymentAuthorisationRequest body:
        :return: PaymentAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'message_create_date_time', 'payment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_payment_cancellation_authorisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `bulk_payment_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `bulk_payment_cancellation_authorisation`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `bulk_payment_cancellation_authorisation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ob/pis/v3/bulk-payments/{paymentId}/cancellation-authorisations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentAuthorisationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_payment_cancellation_authorisation_update(self, x_request_id, message_create_date_time, payment_id, authorisation_id, **kwargs):  # noqa: E501
        """Payment cancellation authorisation request update  # noqa: E501

        Use this operation to update the authorisation resource.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_cancellation_authorisation_update(x_request_id, message_create_date_time, payment_id, authorisation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param str authorisation_id: The Id used by the Open Banking Service to refer to an authorisation resource.  (required)
        :param PaymentAuthorisationUpdateRequest body:
        :return: PaymentAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_payment_cancellation_authorisation_update_with_http_info(x_request_id, message_create_date_time, payment_id, authorisation_id, **kwargs)  # noqa: E501
        (data) = self.bulk_payment_cancellation_authorisation_update_with_http_info(x_request_id, message_create_date_time, payment_id, authorisation_id, **kwargs)  # noqa: E501
        return data

    def bulk_payment_cancellation_authorisation_update_with_http_info(self, x_request_id, message_create_date_time, payment_id, authorisation_id, **kwargs):  # noqa: E501
        """Payment cancellation authorisation request update  # noqa: E501

        Use this operation to update the authorisation resource.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_cancellation_authorisation_update_with_http_info(x_request_id, message_create_date_time, payment_id, authorisation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param str authorisation_id: The Id used by the Open Banking Service to refer to an authorisation resource.  (required)
        :param PaymentAuthorisationUpdateRequest body:
        :return: PaymentAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'message_create_date_time', 'payment_id', 'authorisation_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_payment_cancellation_authorisation_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `bulk_payment_cancellation_authorisation_update`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `bulk_payment_cancellation_authorisation_update`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `bulk_payment_cancellation_authorisation_update`")  # noqa: E501
        # verify the required parameter 'authorisation_id' is set
        if ('authorisation_id' not in params or
                params['authorisation_id'] is None):
            raise ValueError("Missing the required parameter `authorisation_id` when calling `bulk_payment_cancellation_authorisation_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501
        if 'authorisation_id' in params:
            path_params['authorisationId'] = params['authorisation_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ob/pis/v3/bulk-payments/{paymentId}/cancellation-authorisations/{authorisationId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentAuthorisationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_payment_cancellation_identification(self, x_request_id, message_create_date_time, payment_id, **kwargs):  # noqa: E501
        """Payment cancellation identification request  # noqa: E501

        Use this operation to identify a PSU in decoupled approach.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_cancellation_identification(x_request_id, message_create_date_time, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param PaymentIdentificationRequest body:
        :return: PaymentIdentificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_payment_cancellation_identification_with_http_info(x_request_id, message_create_date_time, payment_id, **kwargs)  # noqa: E501
        (data) = self.bulk_payment_cancellation_identification_with_http_info(x_request_id, message_create_date_time, payment_id, **kwargs)  # noqa: E501
        return data

    def bulk_payment_cancellation_identification_with_http_info(self, x_request_id, message_create_date_time, payment_id, **kwargs):  # noqa: E501
        """Payment cancellation identification request  # noqa: E501

        Use this operation to identify a PSU in decoupled approach.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_cancellation_identification_with_http_info(x_request_id, message_create_date_time, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param PaymentIdentificationRequest body:
        :return: PaymentIdentificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'message_create_date_time', 'payment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_payment_cancellation_identification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `bulk_payment_cancellation_identification`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `bulk_payment_cancellation_identification`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `bulk_payment_cancellation_identification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ob/pis/v3/bulk-payments/{paymentId}/cancellation-identification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentIdentificationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_payment_confirmation(self, x_request_id, message_create_date_time, payment_id, **kwargs):  # noqa: E501
        """Confirmation of the payment request by the PISP  # noqa: E501

        This Api is used to confirm a payment. Confirmation is required when the link 'ConfirmationRequired' is returned. Confirmation of a payment can be required in two cases 1) When its required by the ASPSP standard 2) when a payment fee is involved.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_confirmation(x_request_id, message_create_date_time, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param ConfirmationRequest body:
        :return: PaymentConfirmationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_payment_confirmation_with_http_info(x_request_id, message_create_date_time, payment_id, **kwargs)  # noqa: E501
        (data) = self.bulk_payment_confirmation_with_http_info(x_request_id, message_create_date_time, payment_id, **kwargs)  # noqa: E501
        return data

    def bulk_payment_confirmation_with_http_info(self, x_request_id, message_create_date_time, payment_id, **kwargs):  # noqa: E501
        """Confirmation of the payment request by the PISP  # noqa: E501

        This Api is used to confirm a payment. Confirmation is required when the link 'ConfirmationRequired' is returned. Confirmation of a payment can be required in two cases 1) When its required by the ASPSP standard 2) when a payment fee is involved.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_confirmation_with_http_info(x_request_id, message_create_date_time, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param ConfirmationRequest body:
        :return: PaymentConfirmationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'message_create_date_time', 'payment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_payment_confirmation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `bulk_payment_confirmation`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `bulk_payment_confirmation`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `bulk_payment_confirmation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ob/pis/v3/bulk-payments/{paymentId}/confirmation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentConfirmationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_payment_identification(self, x_request_id, message_create_date_time, payment_id, **kwargs):  # noqa: E501
        """Payment identification request  # noqa: E501

        Use this operation to identify a PSU in decoupled approach. The response of the post payments api will provide a link to this api in the 'PostIdentificationForDecoupled' field if this step is required.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_identification(x_request_id, message_create_date_time, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param PaymentIdentificationRequest body:
        :return: PaymentIdentificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_payment_identification_with_http_info(x_request_id, message_create_date_time, payment_id, **kwargs)  # noqa: E501
        (data) = self.bulk_payment_identification_with_http_info(x_request_id, message_create_date_time, payment_id, **kwargs)  # noqa: E501
        return data

    def bulk_payment_identification_with_http_info(self, x_request_id, message_create_date_time, payment_id, **kwargs):  # noqa: E501
        """Payment identification request  # noqa: E501

        Use this operation to identify a PSU in decoupled approach. The response of the post payments api will provide a link to this api in the 'PostIdentificationForDecoupled' field if this step is required.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_identification_with_http_info(x_request_id, message_create_date_time, payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param PaymentIdentificationRequest body:
        :return: PaymentIdentificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'message_create_date_time', 'payment_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_payment_identification" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `bulk_payment_identification`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `bulk_payment_identification`")  # noqa: E501
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `bulk_payment_identification`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ob/pis/v3/bulk-payments/{paymentId}/identification', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentIdentificationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_payment_initiate(self, x_request_id, message_create_date_time, psu_id, **kwargs):  # noqa: E501
        """Payment initiation request  # noqa: E501

        Use this operation to initiate a payment on behalf of the Payment Service User. Strong customer authentication might be required by the ASPSP, the response will indicate which step is required to complete the payment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_initiate(x_request_id, message_create_date_time, psu_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str psu_id: This field can be filled with an ID from the Initiating Party which refers to the PSU.  (required)
        :param BulkPaymentInitiationRequest body:
        :param str initiating_party_return_url: The callback URL for the redirection back to the Initiating Party after authorization. 
        :param bool use_authorisation_landing_pages: If true, the Bank Selection Interface provided by Open Banking Service will be used to request required information from the PSU directly. 
        :param str locale: 2-digit ISO-639 code for the language in which the Bank Selection Interface is displayed.  For special languages can be used 5-digit code like nl-BE, where first is ISO-639 langauge code and the second is ISO-3166 country code.  If not set, the language of the Bank Selection Interface is taken over from the end user’s browser configuration or the system configuration of the Bank Selection Interface server. 
        :param bool app_redirect_preferred: Indicates whether the user uses mobile device\\tablet or PC 
        :param datetime last_login: PSU Session information.  The time when the PSU last logged in with the TPP. 
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: PSU Session information.  The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str http_method: PSU Session information.  HTTP method used at the PSU-TPP interface. Available values - GET, POST, PUT, DELETE. 
        :param str http_header_user_agent: PSU Session information.  The forwarded Agent header field of the HTTP request between PSU and TPP. 
        :param str http_header_referer: PSU Session information. 
        :param str http_header_accept: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP. 
        :param str http_header_accept_charset: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP. 
        :param str http_header_accept_encoding: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP. 
        :param str http_header_accept_language: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP. 
        :param str device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP. 
        :param str signature: Conditionally required for iDEAL payments. The signature in the request should include a keyId with the value of fingerprint of the certificate 
        :param str digest: Is contained if and only if the `Signature` element is contained in the header of the request.
        :param str confirm: If set to 'true' the transaction will be immediately confirmed by the Open Banking Service if confirmation of the payment by the Initiating Party is required by the ASPSP. <br>**Note:** This field is only applicable when the notification service is used by the Initiating Party to receive the status of the payment. When the notification is not used this flag can be set in the GET status API. 
        :return: PaymentInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_payment_initiate_with_http_info(x_request_id, message_create_date_time, psu_id, **kwargs)  # noqa: E501
        (data) = self.bulk_payment_initiate_with_http_info(x_request_id, message_create_date_time, psu_id, **kwargs)  # noqa: E501
        return data

    def bulk_payment_initiate_with_http_info(self, x_request_id, message_create_date_time, psu_id, **kwargs):  # noqa: E501
        """Payment initiation request  # noqa: E501

        Use this operation to initiate a payment on behalf of the Payment Service User. Strong customer authentication might be required by the ASPSP, the response will indicate which step is required to complete the payment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_initiate_with_http_info(x_request_id, message_create_date_time, psu_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str psu_id: This field can be filled with an ID from the Initiating Party which refers to the PSU.  (required)
        :param BulkPaymentInitiationRequest body:
        :param str initiating_party_return_url: The callback URL for the redirection back to the Initiating Party after authorization. 
        :param bool use_authorisation_landing_pages: If true, the Bank Selection Interface provided by Open Banking Service will be used to request required information from the PSU directly. 
        :param str locale: 2-digit ISO-639 code for the language in which the Bank Selection Interface is displayed.  For special languages can be used 5-digit code like nl-BE, where first is ISO-639 langauge code and the second is ISO-3166 country code.  If not set, the language of the Bank Selection Interface is taken over from the end user’s browser configuration or the system configuration of the Bank Selection Interface server. 
        :param bool app_redirect_preferred: Indicates whether the user uses mobile device\\tablet or PC 
        :param datetime last_login: PSU Session information.  The time when the PSU last logged in with the TPP. 
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str psu_ip_port: PSU Session information.  The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. 
        :param str http_method: PSU Session information.  HTTP method used at the PSU-TPP interface. Available values - GET, POST, PUT, DELETE. 
        :param str http_header_user_agent: PSU Session information.  The forwarded Agent header field of the HTTP request between PSU and TPP. 
        :param str http_header_referer: PSU Session information. 
        :param str http_header_accept: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP. 
        :param str http_header_accept_charset: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP. 
        :param str http_header_accept_encoding: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP. 
        :param str http_header_accept_language: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP. 
        :param str device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device. 
        :param str geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP. 
        :param str signature: Conditionally required for iDEAL payments. The signature in the request should include a keyId with the value of fingerprint of the certificate 
        :param str digest: Is contained if and only if the `Signature` element is contained in the header of the request.
        :param str confirm: If set to 'true' the transaction will be immediately confirmed by the Open Banking Service if confirmation of the payment by the Initiating Party is required by the ASPSP. <br>**Note:** This field is only applicable when the notification service is used by the Initiating Party to receive the status of the payment. When the notification is not used this flag can be set in the GET status API. 
        :return: PaymentInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_request_id', 'message_create_date_time', 'psu_id', 'body', 'initiating_party_return_url', 'use_authorisation_landing_pages', 'locale', 'app_redirect_preferred', 'last_login', 'psu_ip_address', 'psu_ip_port', 'http_method', 'http_header_user_agent', 'http_header_referer', 'http_header_accept', 'http_header_accept_charset', 'http_header_accept_encoding', 'http_header_accept_language', 'device_id', 'geo_location', 'signature', 'digest', 'confirm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_payment_initiate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `bulk_payment_initiate`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `bulk_payment_initiate`")  # noqa: E501
        # verify the required parameter 'psu_id' is set
        if ('psu_id' not in params or
                params['psu_id'] is None):
            raise ValueError("Missing the required parameter `psu_id` when calling `bulk_payment_initiate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'psu_id' in params:
            path_params['psuId'] = params['psu_id']  # noqa: E501

        query_params = []
        if 'confirm' in params:
            query_params.append(('confirm', params['confirm']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501
        if 'initiating_party_return_url' in params:
            header_params['InitiatingPartyReturnUrl'] = params['initiating_party_return_url']  # noqa: E501
        if 'use_authorisation_landing_pages' in params:
            header_params['UseAuthorisationLandingPages'] = params['use_authorisation_landing_pages']  # noqa: E501
        if 'locale' in params:
            header_params['Locale'] = params['locale']  # noqa: E501
        if 'app_redirect_preferred' in params:
            header_params['AppRedirectPreferred'] = params['app_redirect_preferred']  # noqa: E501
        if 'last_login' in params:
            header_params['LastLogin'] = params['last_login']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PsuIpAddress'] = params['psu_ip_address']  # noqa: E501
        if 'psu_ip_port' in params:
            header_params['PsuIpPort'] = params['psu_ip_port']  # noqa: E501
        if 'http_method' in params:
            header_params['HttpMethod'] = params['http_method']  # noqa: E501
        if 'http_header_user_agent' in params:
            header_params['HttpHeaderUserAgent'] = params['http_header_user_agent']  # noqa: E501
        if 'http_header_referer' in params:
            header_params['HttpHeaderReferer'] = params['http_header_referer']  # noqa: E501
        if 'http_header_accept' in params:
            header_params['HttpHeaderAccept'] = params['http_header_accept']  # noqa: E501
        if 'http_header_accept_charset' in params:
            header_params['HttpHeaderAcceptCharset'] = params['http_header_accept_charset']  # noqa: E501
        if 'http_header_accept_encoding' in params:
            header_params['HttpHeaderAcceptEncoding'] = params['http_header_accept_encoding']  # noqa: E501
        if 'http_header_accept_language' in params:
            header_params['HttpHeaderAcceptLanguage'] = params['http_header_accept_language']  # noqa: E501
        if 'device_id' in params:
            header_params['DeviceId'] = params['device_id']  # noqa: E501
        if 'geo_location' in params:
            header_params['GeoLocation'] = params['geo_location']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ob/pis/v3/bulk-payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentInitiationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def bulk_payment_status(self, payment_id, x_request_id, message_create_date_time, **kwargs):  # noqa: E501
        """Status of the payment request  # noqa: E501

        Use this operation to retrieve the status of a payment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_status(payment_id, x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str confirm: If set to 'true' the transaction will be immediately confirmed by the Open Banking Service if confirmation of the payment by the Initiating Party is required by the ASPSP. 
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str signature: Conditionally required for iDEAL payments. The signature in the request should include a keyId with the value of fingerprint of the certificate 
        :param str digest: Is contained if and only if the `Signature` element is contained in the header of the request.
        :return: PaymentDetailedInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.bulk_payment_status_with_http_info(payment_id, x_request_id, message_create_date_time, **kwargs)  # noqa: E501
        (data) = self.bulk_payment_status_with_http_info(payment_id, x_request_id, message_create_date_time, **kwargs)  # noqa: E501
        return data

    def bulk_payment_status_with_http_info(self, payment_id, x_request_id, message_create_date_time, **kwargs):  # noqa: E501
        """Status of the payment request  # noqa: E501

        Use this operation to retrieve the status of a payment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.bulk_payment_status_with_http_info(payment_id, x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_id: The Id used by the Open Banking Service to refer to a payment.  Optionally the payment can also be refered by the **InitiatingPartyReferenceId** or the **EndToEndId**, to do so start with **ref** or **e2e** prefixes followed by the respective identifier.  (required)
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str confirm: If set to 'true' the transaction will be immediately confirmed by the Open Banking Service if confirmation of the payment by the Initiating Party is required by the ASPSP. 
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU. 
        :param str signature: Conditionally required for iDEAL payments. The signature in the request should include a keyId with the value of fingerprint of the certificate 
        :param str digest: Is contained if and only if the `Signature` element is contained in the header of the request.
        :return: PaymentDetailedInformation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', 'x_request_id', 'message_create_date_time', 'confirm', 'psu_ip_address', 'signature', 'digest']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bulk_payment_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `bulk_payment_status`")  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if ('x_request_id' not in params or
                params['x_request_id'] is None):
            raise ValueError("Missing the required parameter `x_request_id` when calling `bulk_payment_status`")  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if ('message_create_date_time' not in params or
                params['message_create_date_time'] is None):
            raise ValueError("Missing the required parameter `message_create_date_time` when calling `bulk_payment_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['paymentId'] = params['payment_id']  # noqa: E501

        query_params = []
        if 'confirm' in params:
            query_params.append(('confirm', params['confirm']))  # noqa: E501

        header_params = {}
        if 'x_request_id' in params:
            header_params['X-Request-ID'] = params['x_request_id']  # noqa: E501
        if 'message_create_date_time' in params:
            header_params['MessageCreateDateTime'] = params['message_create_date_time']  # noqa: E501
        if 'psu_ip_address' in params:
            header_params['PsuIpAddress'] = params['psu_ip_address']  # noqa: E501
        if 'signature' in params:
            header_params['Signature'] = params['signature']  # noqa: E501
        if 'digest' in params:
            header_params['Digest'] = params['digest']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Authorization']  # noqa: E501

        return self.api_client.call_api(
            '/ob/pis/v3/bulk-payments/{paymentId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentDetailedInformation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
