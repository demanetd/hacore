# coding: utf-8

"""
Open Banking Account Information V3

There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

OpenAPI spec version: 3.7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from ais_client.api_client import ApiClient


class AccountInformationServiceExtendedServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_registration(
        self, x_request_id, message_create_date_time, registration_id, **kwargs
    ):  # noqa: E501
        """Delete an existing registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration(x_request_id, message_create_date_time, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str registration_id: Registration ID is the source ID, which is being created to link the PSUs under the same ProductType  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_registration_with_http_info(
                x_request_id, message_create_date_time, registration_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_registration_with_http_info(
                x_request_id, message_create_date_time, registration_id, **kwargs
            )  # noqa: E501
            return data

    def delete_registration_with_http_info(
        self, x_request_id, message_create_date_time, registration_id, **kwargs
    ):  # noqa: E501
        """Delete an existing registration  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_registration_with_http_info(x_request_id, message_create_date_time, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str registration_id: Registration ID is the source ID, which is being created to link the PSUs under the same ProductType  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["x_request_id", "message_create_date_time", "registration_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_registration" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `delete_registration`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `delete_registration`"
            )  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if "registration_id" not in params or params["registration_id"] is None:
            raise ValueError(
                "Missing the required parameter `registration_id` when calling `delete_registration`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "registration_id" in params:
            path_params["registrationId"] = params["registration_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/register/{registrationId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_registration_status(
        self, x_request_id, message_create_date_time, registration_id, **kwargs
    ):  # noqa: E501
        """Get an existing registration status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_status(x_request_id, message_create_date_time, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str registration_id: Registration ID is the source ID, which is being created to link the PSUs under the same ProductType  (required)
        :return: GetRegistrationResponseStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_registration_status_with_http_info(
                x_request_id, message_create_date_time, registration_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_registration_status_with_http_info(
                x_request_id, message_create_date_time, registration_id, **kwargs
            )  # noqa: E501
            return data

    def get_registration_status_with_http_info(
        self, x_request_id, message_create_date_time, registration_id, **kwargs
    ):  # noqa: E501
        """Get an existing registration status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_registration_status_with_http_info(x_request_id, message_create_date_time, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str registration_id: Registration ID is the source ID, which is being created to link the PSUs under the same ProductType  (required)
        :return: GetRegistrationResponseStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["x_request_id", "message_create_date_time", "registration_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_registration_status" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `get_registration_status`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `get_registration_status`"
            )  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if "registration_id" not in params or params["registration_id"] is None:
            raise ValueError(
                "Missing the required parameter `registration_id` when calling `get_registration_status`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "registration_id" in params:
            path_params["registrationId"] = params["registration_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/register/{registrationId}/status",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="GetRegistrationResponseStatus",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_consent_authorisation(
        self, x_request_id, message_create_date_time, registration_id, psu_id, **kwargs
    ):  # noqa: E501
        """Get the link to the IS for the consent authorisation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_consent_authorisation(x_request_id, message_create_date_time, registration_id, psu_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str registration_id: Registration ID is the source ID, which is being created to link the PSUs under the same ProductType  (required)
        :param str psu_id: This field can be filled with an ID from the Initiating Party which refers to the PSU.  (required)
        :param InitialisationRequest body:
        :param str locale: 2-digit ISO-639 code for the language in which the Bank Selection Interface is displayed.  For special languages can be used 5-digit code like nl-BE, where first is ISO-639 langauge code and the second is ISO-3166 country code.  If not set, the language of the Bank Selection Interface is taken over from the end user’s browser configuration or the system configuration of the Bank Selection Interface server.
        :param str initiating_party_return_url: The callback URL for the redirection back to the Initiating Party after authorization.
        :return: InitialisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_consent_authorisation_with_http_info(
                x_request_id,
                message_create_date_time,
                registration_id,
                psu_id,
                **kwargs,
            )  # noqa: E501
        else:
            (data) = self.post_consent_authorisation_with_http_info(
                x_request_id,
                message_create_date_time,
                registration_id,
                psu_id,
                **kwargs,
            )  # noqa: E501
            return data

    def post_consent_authorisation_with_http_info(
        self, x_request_id, message_create_date_time, registration_id, psu_id, **kwargs
    ):  # noqa: E501
        """Get the link to the IS for the consent authorisation  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_consent_authorisation_with_http_info(x_request_id, message_create_date_time, registration_id, psu_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str registration_id: Registration ID is the source ID, which is being created to link the PSUs under the same ProductType  (required)
        :param str psu_id: This field can be filled with an ID from the Initiating Party which refers to the PSU.  (required)
        :param InitialisationRequest body:
        :param str locale: 2-digit ISO-639 code for the language in which the Bank Selection Interface is displayed.  For special languages can be used 5-digit code like nl-BE, where first is ISO-639 langauge code and the second is ISO-3166 country code.  If not set, the language of the Bank Selection Interface is taken over from the end user’s browser configuration or the system configuration of the Bank Selection Interface server.
        :param str initiating_party_return_url: The callback URL for the redirection back to the Initiating Party after authorization.
        :return: InitialisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "x_request_id",
            "message_create_date_time",
            "registration_id",
            "psu_id",
            "body",
            "locale",
            "initiating_party_return_url",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_consent_authorisation" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `post_consent_authorisation`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `post_consent_authorisation`"
            )  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if "registration_id" not in params or params["registration_id"] is None:
            raise ValueError(
                "Missing the required parameter `registration_id` when calling `post_consent_authorisation`"
            )  # noqa: E501
        # verify the required parameter 'psu_id' is set
        if "psu_id" not in params or params["psu_id"] is None:
            raise ValueError(
                "Missing the required parameter `psu_id` when calling `post_consent_authorisation`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "registration_id" in params:
            path_params["registrationId"] = params["registration_id"]  # noqa: E501
        if "psu_id" in params:
            path_params["psuId"] = params["psu_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501
        if "locale" in params:
            header_params["Locale"] = params["locale"]  # noqa: E501
        if "initiating_party_return_url" in params:
            header_params["InitiatingPartyReturnUrl"] = params[
                "initiating_party_return_url"
            ]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/register/{registrationId}/initialisation/{psuId}",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="InitialisationResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_registration(
        self, x_request_id, message_create_date_time, registration_id, **kwargs
    ):  # noqa: E501
        """Update an existing registration for the PSU  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_registration(x_request_id, message_create_date_time, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str registration_id: Registration ID is the source ID, which is being created to link the PSUs under the same ProductType  (required)
        :param PutRegistrationRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_registration_with_http_info(
                x_request_id, message_create_date_time, registration_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_registration_with_http_info(
                x_request_id, message_create_date_time, registration_id, **kwargs
            )  # noqa: E501
            return data

    def put_registration_with_http_info(
        self, x_request_id, message_create_date_time, registration_id, **kwargs
    ):  # noqa: E501
        """Update an existing registration for the PSU  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_registration_with_http_info(x_request_id, message_create_date_time, registration_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str registration_id: Registration ID is the source ID, which is being created to link the PSUs under the same ProductType  (required)
        :param PutRegistrationRequest body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "x_request_id",
            "message_create_date_time",
            "registration_id",
            "body",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_registration" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `put_registration`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `put_registration`"
            )  # noqa: E501
        # verify the required parameter 'registration_id' is set
        if "registration_id" not in params or params["registration_id"] is None:
            raise ValueError(
                "Missing the required parameter `registration_id` when calling `put_registration`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "registration_id" in params:
            path_params["registrationId"] = params["registration_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/register/{registrationId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def registration(self, x_request_id, message_create_date_time, **kwargs):  # noqa: E501
        """POST a new registration resource for a specific product.  # noqa: E501

        The available products utilize the PSUs AIS consent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registration(x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param PostRegistrationRequest body:
        :return: PostRegistrationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.registration_with_http_info(
                x_request_id, message_create_date_time, **kwargs
            )  # noqa: E501
        else:
            (data) = self.registration_with_http_info(
                x_request_id, message_create_date_time, **kwargs
            )  # noqa: E501
            return data

    def registration_with_http_info(
        self, x_request_id, message_create_date_time, **kwargs
    ):  # noqa: E501
        """POST a new registration resource for a specific product.  # noqa: E501

        The available products utilize the PSUs AIS consent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.registration_with_http_info(x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param PostRegistrationRequest body:
        :return: PostRegistrationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["x_request_id", "message_create_date_time", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method registration" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `registration`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `registration`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/register",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PostRegistrationResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
