# coding: utf-8

"""
Open Banking Account Information V3

There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

OpenAPI spec version: 3.7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from ais_client.models.pagination_links import PaginationLinks  # noqa: F401,E501


class AccountLinks(PaginationLinks):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"account": "list[AccountItemLink]"}
    if hasattr(PaginationLinks, "swagger_types"):
        swagger_types.update(PaginationLinks.swagger_types)

    attribute_map = {"account": "Account"}
    if hasattr(PaginationLinks, "attribute_map"):
        attribute_map.update(PaginationLinks.attribute_map)

    def __init__(self, account=None, *args, **kwargs):  # noqa: E501
        """AccountLinks - a model defined in Swagger"""  # noqa: E501
        self._account = None
        self.discriminator = None
        if account is not None:
            self.account = account
        PaginationLinks.__init__(self, *args, **kwargs)

    @property
    def account(self):
        """Gets the account of this AccountLinks.  # noqa: E501


        :return: The account of this AccountLinks.  # noqa: E501
        :rtype: list[AccountItemLink]
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AccountLinks.


        :param account: The account of this AccountLinks.  # noqa: E501
        :type: list[AccountItemLink]
        """

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(AccountLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
