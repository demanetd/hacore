# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MerchantDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'merchant_name': 'str',
        'merchant_category_code': 'str'
    }

    attribute_map = {
        'merchant_name': 'MerchantName',
        'merchant_category_code': 'MerchantCategoryCode'
    }

    def __init__(self, merchant_name=None, merchant_category_code=None):  # noqa: E501
        """MerchantDetail - a model defined in Swagger"""  # noqa: E501
        self._merchant_name = None
        self._merchant_category_code = None
        self.discriminator = None
        if merchant_name is not None:
            self.merchant_name = merchant_name
        if merchant_category_code is not None:
            self.merchant_category_code = merchant_category_code

    @property
    def merchant_name(self):
        """Gets the merchant_name of this MerchantDetail.  # noqa: E501

        Name of the merchant.   # noqa: E501

        :return: The merchant_name of this MerchantDetail.  # noqa: E501
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this MerchantDetail.

        Name of the merchant.   # noqa: E501

        :param merchant_name: The merchant_name of this MerchantDetail.  # noqa: E501
        :type: str
        """

        self._merchant_name = merchant_name

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this MerchantDetail.  # noqa: E501

        Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.   # noqa: E501

        :return: The merchant_category_code of this MerchantDetail.  # noqa: E501
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this MerchantDetail.

        Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.   # noqa: E501

        :param merchant_category_code: The merchant_category_code of this MerchantDetail.  # noqa: E501
        :type: str
        """

        self._merchant_category_code = merchant_category_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MerchantDetail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MerchantDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
