# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Consent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consent_id': 'str',
        'consent_status': 'ConsentStatusEnum',
        'valid_until': 'datetime',
        'aspsp_id': 'str',
        'accounts': 'list[AccountDetails]'
    }

    attribute_map = {
        'consent_id': 'ConsentId',
        'consent_status': 'ConsentStatus',
        'valid_until': 'ValidUntil',
        'aspsp_id': 'AspspId',
        'accounts': 'Accounts'
    }

    def __init__(self, consent_id=None, consent_status=None, valid_until=None, aspsp_id=None, accounts=None):  # noqa: E501
        """Consent - a model defined in Swagger"""  # noqa: E501
        self._consent_id = None
        self._consent_status = None
        self._valid_until = None
        self._aspsp_id = None
        self._accounts = None
        self.discriminator = None
        self.consent_id = consent_id
        if consent_status is not None:
            self.consent_status = consent_status
        if valid_until is not None:
            self.valid_until = valid_until
        if aspsp_id is not None:
            self.aspsp_id = aspsp_id
        if accounts is not None:
            self.accounts = accounts

    @property
    def consent_id(self):
        """Gets the consent_id of this Consent.  # noqa: E501


        :return: The consent_id of this Consent.  # noqa: E501
        :rtype: str
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this Consent.


        :param consent_id: The consent_id of this Consent.  # noqa: E501
        :type: str
        """
        if consent_id is None:
            raise ValueError("Invalid value for `consent_id`, must not be `None`")  # noqa: E501

        self._consent_id = consent_id

    @property
    def consent_status(self):
        """Gets the consent_status of this Consent.  # noqa: E501


        :return: The consent_status of this Consent.  # noqa: E501
        :rtype: ConsentStatusEnum
        """
        return self._consent_status

    @consent_status.setter
    def consent_status(self, consent_status):
        """Sets the consent_status of this Consent.


        :param consent_status: The consent_status of this Consent.  # noqa: E501
        :type: ConsentStatusEnum
        """

        self._consent_status = consent_status

    @property
    def valid_until(self):
        """Gets the valid_until of this Consent.  # noqa: E501


        :return: The valid_until of this Consent.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until

    @valid_until.setter
    def valid_until(self, valid_until):
        """Sets the valid_until of this Consent.


        :param valid_until: The valid_until of this Consent.  # noqa: E501
        :type: datetime
        """

        self._valid_until = valid_until

    @property
    def aspsp_id(self):
        """Gets the aspsp_id of this Consent.  # noqa: E501


        :return: The aspsp_id of this Consent.  # noqa: E501
        :rtype: str
        """
        return self._aspsp_id

    @aspsp_id.setter
    def aspsp_id(self, aspsp_id):
        """Sets the aspsp_id of this Consent.


        :param aspsp_id: The aspsp_id of this Consent.  # noqa: E501
        :type: str
        """

        self._aspsp_id = aspsp_id

    @property
    def accounts(self):
        """Gets the accounts of this Consent.  # noqa: E501


        :return: The accounts of this Consent.  # noqa: E501
        :rtype: list[AccountDetails]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this Consent.


        :param accounts: The accounts of this Consent.  # noqa: E501
        :type: list[AccountDetails]
        """

        self._accounts = accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Consent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Consent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
