# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PsuDataIdentification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aspsp_psu_id': 'str',
        'aspsp_customer_id': 'str',
        'aspsp_psu_id_type': 'str',
        'aspsp_psu_corporate_id': 'str',
        'aspsp_psu_corporate_id_type': 'str'
    }

    attribute_map = {
        'aspsp_psu_id': 'AspspPsuId',
        'aspsp_customer_id': 'AspspCustomerId',
        'aspsp_psu_id_type': 'AspspPsuIdType',
        'aspsp_psu_corporate_id': 'AspspPsuCorporateId',
        'aspsp_psu_corporate_id_type': 'AspspPsuCorporateIdType'
    }

    def __init__(self, aspsp_psu_id=None, aspsp_customer_id=None, aspsp_psu_id_type=None, aspsp_psu_corporate_id=None, aspsp_psu_corporate_id_type=None):  # noqa: E501
        """PsuDataIdentification - a model defined in Swagger"""  # noqa: E501
        self._aspsp_psu_id = None
        self._aspsp_customer_id = None
        self._aspsp_psu_id_type = None
        self._aspsp_psu_corporate_id = None
        self._aspsp_psu_corporate_id_type = None
        self.discriminator = None
        if aspsp_psu_id is not None:
            self.aspsp_psu_id = aspsp_psu_id
        if aspsp_customer_id is not None:
            self.aspsp_customer_id = aspsp_customer_id
        if aspsp_psu_id_type is not None:
            self.aspsp_psu_id_type = aspsp_psu_id_type
        if aspsp_psu_corporate_id is not None:
            self.aspsp_psu_corporate_id = aspsp_psu_corporate_id
        if aspsp_psu_corporate_id_type is not None:
            self.aspsp_psu_corporate_id_type = aspsp_psu_corporate_id_type

    @property
    def aspsp_psu_id(self):
        """Gets the aspsp_psu_id of this PsuDataIdentification.  # noqa: E501

        PSU’s Id at ASPSP. Allows the unique identification of the PSU at the ASPSP.   # noqa: E501

        :return: The aspsp_psu_id of this PsuDataIdentification.  # noqa: E501
        :rtype: str
        """
        return self._aspsp_psu_id

    @aspsp_psu_id.setter
    def aspsp_psu_id(self, aspsp_psu_id):
        """Sets the aspsp_psu_id of this PsuDataIdentification.

        PSU’s Id at ASPSP. Allows the unique identification of the PSU at the ASPSP.   # noqa: E501

        :param aspsp_psu_id: The aspsp_psu_id of this PsuDataIdentification.  # noqa: E501
        :type: str
        """

        self._aspsp_psu_id = aspsp_psu_id

    @property
    def aspsp_customer_id(self):
        """Gets the aspsp_customer_id of this PsuDataIdentification.  # noqa: E501

        PSU’s second Id at ASPSP. Required for some ASPSPs   # noqa: E501

        :return: The aspsp_customer_id of this PsuDataIdentification.  # noqa: E501
        :rtype: str
        """
        return self._aspsp_customer_id

    @aspsp_customer_id.setter
    def aspsp_customer_id(self, aspsp_customer_id):
        """Sets the aspsp_customer_id of this PsuDataIdentification.

        PSU’s second Id at ASPSP. Required for some ASPSPs   # noqa: E501

        :param aspsp_customer_id: The aspsp_customer_id of this PsuDataIdentification.  # noqa: E501
        :type: str
        """

        self._aspsp_customer_id = aspsp_customer_id

    @property
    def aspsp_psu_id_type(self):
        """Gets the aspsp_psu_id_type of this PsuDataIdentification.  # noqa: E501

        Type of the Aspsp PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.   # noqa: E501

        :return: The aspsp_psu_id_type of this PsuDataIdentification.  # noqa: E501
        :rtype: str
        """
        return self._aspsp_psu_id_type

    @aspsp_psu_id_type.setter
    def aspsp_psu_id_type(self, aspsp_psu_id_type):
        """Sets the aspsp_psu_id_type of this PsuDataIdentification.

        Type of the Aspsp PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.   # noqa: E501

        :param aspsp_psu_id_type: The aspsp_psu_id_type of this PsuDataIdentification.  # noqa: E501
        :type: str
        """

        self._aspsp_psu_id_type = aspsp_psu_id_type

    @property
    def aspsp_psu_corporate_id(self):
        """Gets the aspsp_psu_corporate_id of this PsuDataIdentification.  # noqa: E501

        Identification of a Corporate in the Online Channels.   # noqa: E501

        :return: The aspsp_psu_corporate_id of this PsuDataIdentification.  # noqa: E501
        :rtype: str
        """
        return self._aspsp_psu_corporate_id

    @aspsp_psu_corporate_id.setter
    def aspsp_psu_corporate_id(self, aspsp_psu_corporate_id):
        """Sets the aspsp_psu_corporate_id of this PsuDataIdentification.

        Identification of a Corporate in the Online Channels.   # noqa: E501

        :param aspsp_psu_corporate_id: The aspsp_psu_corporate_id of this PsuDataIdentification.  # noqa: E501
        :type: str
        """

        self._aspsp_psu_corporate_id = aspsp_psu_corporate_id

    @property
    def aspsp_psu_corporate_id_type(self):
        """Gets the aspsp_psu_corporate_id_type of this PsuDataIdentification.  # noqa: E501

        This is describing the type of the identification needed by the ASPSP to identify the PSUCorporate-ID content.   # noqa: E501

        :return: The aspsp_psu_corporate_id_type of this PsuDataIdentification.  # noqa: E501
        :rtype: str
        """
        return self._aspsp_psu_corporate_id_type

    @aspsp_psu_corporate_id_type.setter
    def aspsp_psu_corporate_id_type(self, aspsp_psu_corporate_id_type):
        """Sets the aspsp_psu_corporate_id_type of this PsuDataIdentification.

        This is describing the type of the identification needed by the ASPSP to identify the PSUCorporate-ID content.   # noqa: E501

        :param aspsp_psu_corporate_id_type: The aspsp_psu_corporate_id_type of this PsuDataIdentification.  # noqa: E501
        :type: str
        """

        self._aspsp_psu_corporate_id_type = aspsp_psu_corporate_id_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PsuDataIdentification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PsuDataIdentification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
