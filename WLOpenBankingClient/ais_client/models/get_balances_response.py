# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetBalancesResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'timestamp': 'datetime',
        'balances': 'list[Balance]',
        'links': 'BalanceLinks',
        'metadata': 'Meta'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'timestamp': 'Timestamp',
        'balances': 'Balances',
        'links': 'Links',
        'metadata': 'Metadata'
    }

    def __init__(self, account_id=None, timestamp=None, balances=None, links=None, metadata=None):  # noqa: E501
        """GetBalancesResponse - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._timestamp = None
        self._balances = None
        self._links = None
        self._metadata = None
        self.discriminator = None
        self.account_id = account_id
        self.timestamp = timestamp
        self.balances = balances
        if links is not None:
            self.links = links
        if metadata is not None:
            self.metadata = metadata

    @property
    def account_id(self):
        """Gets the account_id of this GetBalancesResponse.  # noqa: E501

        Id of the account of the PSU as retrieved form the GET accounts response.   # noqa: E501

        :return: The account_id of this GetBalancesResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this GetBalancesResponse.

        Id of the account of the PSU as retrieved form the GET accounts response.   # noqa: E501

        :param account_id: The account_id of this GetBalancesResponse.  # noqa: E501
        :type: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def timestamp(self):
        """Gets the timestamp of this GetBalancesResponse.  # noqa: E501

        Indicates the date (and time) of the balance. All dates are represented in ISO 8601 date-time.   # noqa: E501

        :return: The timestamp of this GetBalancesResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this GetBalancesResponse.

        Indicates the date (and time) of the balance. All dates are represented in ISO 8601 date-time.   # noqa: E501

        :param timestamp: The timestamp of this GetBalancesResponse.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def balances(self):
        """Gets the balances of this GetBalancesResponse.  # noqa: E501


        :return: The balances of this GetBalancesResponse.  # noqa: E501
        :rtype: list[Balance]
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this GetBalancesResponse.


        :param balances: The balances of this GetBalancesResponse.  # noqa: E501
        :type: list[Balance]
        """
        if balances is None:
            raise ValueError("Invalid value for `balances`, must not be `None`")  # noqa: E501

        self._balances = balances

    @property
    def links(self):
        """Gets the links of this GetBalancesResponse.  # noqa: E501


        :return: The links of this GetBalancesResponse.  # noqa: E501
        :rtype: BalanceLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GetBalancesResponse.


        :param links: The links of this GetBalancesResponse.  # noqa: E501
        :type: BalanceLinks
        """

        self._links = links

    @property
    def metadata(self):
        """Gets the metadata of this GetBalancesResponse.  # noqa: E501


        :return: The metadata of this GetBalancesResponse.  # noqa: E501
        :rtype: Meta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GetBalancesResponse.


        :param metadata: The metadata of this GetBalancesResponse.  # noqa: E501
        :type: Meta
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetBalancesResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetBalancesResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
