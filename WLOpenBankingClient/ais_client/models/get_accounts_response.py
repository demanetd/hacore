# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetAccountsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounts': 'list[Account]',
        'links': 'AccountLinks',
        'metadata': 'Meta'
    }

    attribute_map = {
        'accounts': 'Accounts',
        'links': 'Links',
        'metadata': 'Metadata'
    }

    def __init__(self, accounts=None, links=None, metadata=None):  # noqa: E501
        """GetAccountsResponse - a model defined in Swagger"""  # noqa: E501
        self._accounts = None
        self._links = None
        self._metadata = None
        self.discriminator = None
        self.accounts = accounts
        if links is not None:
            self.links = links
        if metadata is not None:
            self.metadata = metadata

    @property
    def accounts(self):
        """Gets the accounts of this GetAccountsResponse.  # noqa: E501


        :return: The accounts of this GetAccountsResponse.  # noqa: E501
        :rtype: list[Account]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this GetAccountsResponse.


        :param accounts: The accounts of this GetAccountsResponse.  # noqa: E501
        :type: list[Account]
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")  # noqa: E501

        self._accounts = accounts

    @property
    def links(self):
        """Gets the links of this GetAccountsResponse.  # noqa: E501


        :return: The links of this GetAccountsResponse.  # noqa: E501
        :rtype: AccountLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GetAccountsResponse.


        :param links: The links of this GetAccountsResponse.  # noqa: E501
        :type: AccountLinks
        """

        self._links = links

    @property
    def metadata(self):
        """Gets the metadata of this GetAccountsResponse.  # noqa: E501


        :return: The metadata of this GetAccountsResponse.  # noqa: E501
        :rtype: Meta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GetAccountsResponse.


        :param metadata: The metadata of this GetAccountsResponse.  # noqa: E501
        :type: Meta
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetAccountsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetAccountsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
