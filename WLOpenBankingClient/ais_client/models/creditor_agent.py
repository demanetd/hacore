# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditorAgent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scheme_name': 'str',
        'identification': 'str'
    }

    attribute_map = {
        'scheme_name': 'SchemeName',
        'identification': 'Identification'
    }

    def __init__(self, scheme_name=None, identification=None):  # noqa: E501
        """CreditorAgent - a model defined in Swagger"""  # noqa: E501
        self._scheme_name = None
        self._identification = None
        self.discriminator = None
        if scheme_name is not None:
            self.scheme_name = scheme_name
        if identification is not None:
            self.identification = identification

    @property
    def scheme_name(self):
        """Gets the scheme_name of this CreditorAgent.  # noqa: E501

        Name of the creditor agent identification scheme, in a coded form as published in an external list.   # noqa: E501

        :return: The scheme_name of this CreditorAgent.  # noqa: E501
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this CreditorAgent.

        Name of the creditor agent identification scheme, in a coded form as published in an external list.   # noqa: E501

        :param scheme_name: The scheme_name of this CreditorAgent.  # noqa: E501
        :type: str
        """
        allowed_values = ["BICFI"]  # noqa: E501
        if scheme_name not in allowed_values:
            raise ValueError(
                "Invalid value for `scheme_name` ({0}), must be one of {1}"  # noqa: E501
                .format(scheme_name, allowed_values)
            )

        self._scheme_name = scheme_name

    @property
    def identification(self):
        """Gets the identification of this CreditorAgent.  # noqa: E501

        Unique and unambiguous creditor agent identification of a financial institution or a branch of a financial institution.   # noqa: E501

        :return: The identification of this CreditorAgent.  # noqa: E501
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this CreditorAgent.

        Unique and unambiguous creditor agent identification of a financial institution or a branch of a financial institution.   # noqa: E501

        :param identification: The identification of this CreditorAgent.  # noqa: E501
        :type: str
        """

        self._identification = identification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditorAgent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditorAgent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
