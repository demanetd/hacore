# coding: utf-8

"""
Open Banking Account Information V3

There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

OpenAPI spec version: 3.7.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CreditLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "amount": "Amount",
        "currency": "Currency",
        "type": "str",
        "included": "bool",
    }

    attribute_map = {
        "amount": "Amount",
        "currency": "Currency",
        "type": "Type",
        "included": "Included",
    }

    def __init__(self, amount=None, currency=None, type=None, included=None):  # noqa: E501
        """CreditLine - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._currency = None
        self._type = None
        self._included = None
        self.discriminator = None
        self.amount = amount
        self.currency = currency
        self.type = type
        self.included = included

    @property
    def amount(self):
        """Gets the amount of this CreditLine.  # noqa: E501


        :return: The amount of this CreditLine.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreditLine.


        :param amount: The amount of this CreditLine.  # noqa: E501
        :type: Amount
        """
        # if amount is None:
        # raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this CreditLine.  # noqa: E501


        :return: The currency of this CreditLine.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreditLine.


        :param currency: The currency of this CreditLine.  # noqa: E501
        :type: Currency
        """
        # if currency is None:
        # raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def type(self):
        """Gets the type of this CreditLine.  # noqa: E501

        Limit type, in a coded form.   # noqa: E501

        :return: The type of this CreditLine.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreditLine.

        Limit type, in a coded form.   # noqa: E501

        :param type: The type of this CreditLine.  # noqa: E501
        :type: str
        """
        # if type is None:
        # raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["Pre-Agreed", "Emergency", "Temporary", "Available", "Credit"]  # noqa: E501
        if type is not None and type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}".format(  # noqa: E501
                    type, allowed_values
                )
            )

        self._type = type

    @property
    def included(self):
        """Gets the included of this CreditLine.  # noqa: E501

        Indicates whether or not the credit line is included in the balance of the account.   # noqa: E501

        :return: The included of this CreditLine.  # noqa: E501
        :rtype: bool
        """
        return self._included

    @included.setter
    def included(self, included):
        """Sets the included of this CreditLine.

        Indicates whether or not the credit line is included in the balance of the account.   # noqa: E501

        :param included: The included of this CreditLine.  # noqa: E501
        :type: bool
        """
        if included is None:
            raise ValueError("Invalid value for `included`, must not be `None`")  # noqa: E501

        self._included = included

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict")
                        else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(CreditLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditLine):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
