# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsentDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'permitted_account_references': 'list[PermittedAccountReference]',
        'valid_until_date': 'date',
        'frequency_per_day': 'int',
        'recurring_indicator': 'bool',
        'combined_service_indicator': 'bool',
        'owner_name': 'bool'
    }

    attribute_map = {
        'permitted_account_references': 'PermittedAccountReferences',
        'valid_until_date': 'ValidUntilDate',
        'frequency_per_day': 'FrequencyPerDay',
        'recurring_indicator': 'RecurringIndicator',
        'combined_service_indicator': 'CombinedServiceIndicator',
        'owner_name': 'OwnerName'
    }

    def __init__(self, permitted_account_references=None, valid_until_date=None, frequency_per_day=None, recurring_indicator=None, combined_service_indicator=False, owner_name=False):  # noqa: E501
        """ConsentDetails - a model defined in Swagger"""  # noqa: E501
        self._permitted_account_references = None
        self._valid_until_date = None
        self._frequency_per_day = None
        self._recurring_indicator = None
        self._combined_service_indicator = None
        self._owner_name = None
        self.discriminator = None
        if permitted_account_references is not None:
            self.permitted_account_references = permitted_account_references
        if valid_until_date is not None:
            self.valid_until_date = valid_until_date
        if frequency_per_day is not None:
            self.frequency_per_day = frequency_per_day
        if recurring_indicator is not None:
            self.recurring_indicator = recurring_indicator
        if combined_service_indicator is not None:
            self.combined_service_indicator = combined_service_indicator
        if owner_name is not None:
            self.owner_name = owner_name

    @property
    def permitted_account_references(self):
        """Gets the permitted_account_references of this ConsentDetails.  # noqa: E501


        :return: The permitted_account_references of this ConsentDetails.  # noqa: E501
        :rtype: list[PermittedAccountReference]
        """
        return self._permitted_account_references

    @permitted_account_references.setter
    def permitted_account_references(self, permitted_account_references):
        """Sets the permitted_account_references of this ConsentDetails.


        :param permitted_account_references: The permitted_account_references of this ConsentDetails.  # noqa: E501
        :type: list[PermittedAccountReference]
        """

        self._permitted_account_references = permitted_account_references

    @property
    def valid_until_date(self):
        """Gets the valid_until_date of this ConsentDetails.  # noqa: E501

        This parameter is requesting a valid until date for the requested consent. If this date is not given in the request a validity period of 90 days is used towards the ASPSP.   # noqa: E501

        :return: The valid_until_date of this ConsentDetails.  # noqa: E501
        :rtype: date
        """
        return self._valid_until_date

    @valid_until_date.setter
    def valid_until_date(self, valid_until_date):
        """Sets the valid_until_date of this ConsentDetails.

        This parameter is requesting a valid until date for the requested consent. If this date is not given in the request a validity period of 90 days is used towards the ASPSP.   # noqa: E501

        :param valid_until_date: The valid_until_date of this ConsentDetails.  # noqa: E501
        :type: date
        """

        self._valid_until_date = valid_until_date

    @property
    def frequency_per_day(self):
        """Gets the frequency_per_day of this ConsentDetails.  # noqa: E501

        This field indicates the requested maximum frequency for an access per day. Allowed unattended requests per day 1-4.   # noqa: E501

        :return: The frequency_per_day of this ConsentDetails.  # noqa: E501
        :rtype: int
        """
        return self._frequency_per_day

    @frequency_per_day.setter
    def frequency_per_day(self, frequency_per_day):
        """Sets the frequency_per_day of this ConsentDetails.

        This field indicates the requested maximum frequency for an access per day. Allowed unattended requests per day 1-4.   # noqa: E501

        :param frequency_per_day: The frequency_per_day of this ConsentDetails.  # noqa: E501
        :type: int
        """

        self._frequency_per_day = frequency_per_day

    @property
    def recurring_indicator(self):
        """Gets the recurring_indicator of this ConsentDetails.  # noqa: E501

        Indicates if the consent is for recurring access or for one time access to the account data.  **Note -** Default value is set to false, only for ASPSPs having implemented the CBI protocol.   # noqa: E501

        :return: The recurring_indicator of this ConsentDetails.  # noqa: E501
        :rtype: bool
        """
        return self._recurring_indicator

    @recurring_indicator.setter
    def recurring_indicator(self, recurring_indicator):
        """Sets the recurring_indicator of this ConsentDetails.

        Indicates if the consent is for recurring access or for one time access to the account data.  **Note -** Default value is set to false, only for ASPSPs having implemented the CBI protocol.   # noqa: E501

        :param recurring_indicator: The recurring_indicator of this ConsentDetails.  # noqa: E501
        :type: bool
        """

        self._recurring_indicator = recurring_indicator

    @property
    def combined_service_indicator(self):
        """Gets the combined_service_indicator of this ConsentDetails.  # noqa: E501

        If \"true\" indicates that a payment initiation service will be addressed in the same \"session\".   # noqa: E501

        :return: The combined_service_indicator of this ConsentDetails.  # noqa: E501
        :rtype: bool
        """
        return self._combined_service_indicator

    @combined_service_indicator.setter
    def combined_service_indicator(self, combined_service_indicator):
        """Sets the combined_service_indicator of this ConsentDetails.

        If \"true\" indicates that a payment initiation service will be addressed in the same \"session\".   # noqa: E501

        :param combined_service_indicator: The combined_service_indicator of this ConsentDetails.  # noqa: E501
        :type: bool
        """

        self._combined_service_indicator = combined_service_indicator

    @property
    def owner_name(self):
        """Gets the owner_name of this ConsentDetails.  # noqa: E501

        If true the Open Banking Service will ask the ASPSP for the Owername of the accounts.   # noqa: E501

        :return: The owner_name of this ConsentDetails.  # noqa: E501
        :rtype: bool
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this ConsentDetails.

        If true the Open Banking Service will ask the ASPSP for the Owername of the accounts.   # noqa: E501

        :param owner_name: The owner_name of this ConsentDetails.  # noqa: E501
        :type: bool
        """

        self._owner_name = owner_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsentDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsentDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
