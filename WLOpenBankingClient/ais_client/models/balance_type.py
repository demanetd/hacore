# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BalanceType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'proprietary': 'str',
        'proprietary_origin': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'proprietary': 'Proprietary',
        'proprietary_origin': 'ProprietaryOrigin'
    }

    def __init__(self, name=None, proprietary=None, proprietary_origin=None):  # noqa: E501
        """BalanceType - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._proprietary = None
        self._proprietary_origin = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if proprietary is not None:
            self.proprietary = proprietary
        if proprietary_origin is not None:
            self.proprietary_origin = proprietary_origin

    @property
    def name(self):
        """Gets the name of this BalanceType.  # noqa: E501

        ISO 20022 Balance Type Code.   # noqa: E501

        :return: The name of this BalanceType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BalanceType.

        ISO 20022 Balance Type Code.   # noqa: E501

        :param name: The name of this BalanceType.  # noqa: E501
        :type: str
        """
        allowed_values = ["CLAV", "CLBD", "FWAV", "INFO", "ITAV", "ITBD", "OPAV", "OPBD", "PRCD", "XPCD"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"  # noqa: E501
                .format(name, allowed_values)
            )

        self._name = name

    @property
    def proprietary(self):
        """Gets the proprietary of this BalanceType.  # noqa: E501

        Proprietary balance type as some schemes may define it.   # noqa: E501

        :return: The proprietary of this BalanceType.  # noqa: E501
        :rtype: str
        """
        return self._proprietary

    @proprietary.setter
    def proprietary(self, proprietary):
        """Sets the proprietary of this BalanceType.

        Proprietary balance type as some schemes may define it.   # noqa: E501

        :param proprietary: The proprietary of this BalanceType.  # noqa: E501
        :type: str
        """

        self._proprietary = proprietary

    @property
    def proprietary_origin(self):
        """Gets the proprietary_origin of this BalanceType.  # noqa: E501

        The application this proprietary balance type was originated from.   # noqa: E501

        :return: The proprietary_origin of this BalanceType.  # noqa: E501
        :rtype: str
        """
        return self._proprietary_origin

    @proprietary_origin.setter
    def proprietary_origin(self, proprietary_origin):
        """Sets the proprietary_origin of this BalanceType.

        The application this proprietary balance type was originated from.   # noqa: E501

        :param proprietary_origin: The proprietary_origin of this BalanceType.  # noqa: E501
        :type: str
        """

        self._proprietary_origin = proprietary_origin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BalanceType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BalanceType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
