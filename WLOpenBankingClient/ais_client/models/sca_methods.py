# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScaMethods(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_type': 'str',
        'authentication_method_id': 'str',
        'version': 'str',
        'name': 'str',
        'explanation': 'str'
    }

    attribute_map = {
        'authentication_type': 'AuthenticationType',
        'authentication_method_id': 'AuthenticationMethodId',
        'version': 'Version',
        'name': 'Name',
        'explanation': 'Explanation'
    }

    def __init__(self, authentication_type=None, authentication_method_id=None, version=None, name=None, explanation=None):  # noqa: E501
        """ScaMethods - a model defined in Swagger"""  # noqa: E501
        self._authentication_type = None
        self._authentication_method_id = None
        self._version = None
        self._name = None
        self._explanation = None
        self.discriminator = None
        self.authentication_type = authentication_type
        self.authentication_method_id = authentication_method_id
        if version is not None:
            self.version = version
        if name is not None:
            self.name = name
        if explanation is not None:
            self.explanation = explanation

    @property
    def authentication_type(self):
        """Gets the authentication_type of this ScaMethods.  # noqa: E501

        Type of the SCA authentication method. The following methods are commonly seen coming from the ASPSP: -  SMS_OTP: The PSU will receive a One Time Password via SMS -  CHIP_OTP: The PSU will be presented with a picture or text to create a One Time Password using their bank card -  PHOTO_OTP: The PSU will be presented with a picture to create a One Time Password -  PUSH_OTP: The PSU will receive a One Time Password via push notification on their mobile device -  SMTP_OTP: The PSU will receive a One Time Password via email   # noqa: E501

        :return: The authentication_type of this ScaMethods.  # noqa: E501
        :rtype: str
        """
        return self._authentication_type

    @authentication_type.setter
    def authentication_type(self, authentication_type):
        """Sets the authentication_type of this ScaMethods.

        Type of the SCA authentication method. The following methods are commonly seen coming from the ASPSP: -  SMS_OTP: The PSU will receive a One Time Password via SMS -  CHIP_OTP: The PSU will be presented with a picture or text to create a One Time Password using their bank card -  PHOTO_OTP: The PSU will be presented with a picture to create a One Time Password -  PUSH_OTP: The PSU will receive a One Time Password via push notification on their mobile device -  SMTP_OTP: The PSU will receive a One Time Password via email   # noqa: E501

        :param authentication_type: The authentication_type of this ScaMethods.  # noqa: E501
        :type: str
        """
        if authentication_type is None:
            raise ValueError("Invalid value for `authentication_type`, must not be `None`")  # noqa: E501

        self._authentication_type = authentication_type

    @property
    def authentication_method_id(self):
        """Gets the authentication_method_id of this ScaMethods.  # noqa: E501

        An identification provided by the ASPSP for the later identification of the authentication method selection.   # noqa: E501

        :return: The authentication_method_id of this ScaMethods.  # noqa: E501
        :rtype: str
        """
        return self._authentication_method_id

    @authentication_method_id.setter
    def authentication_method_id(self, authentication_method_id):
        """Sets the authentication_method_id of this ScaMethods.

        An identification provided by the ASPSP for the later identification of the authentication method selection.   # noqa: E501

        :param authentication_method_id: The authentication_method_id of this ScaMethods.  # noqa: E501
        :type: str
        """
        if authentication_method_id is None:
            raise ValueError("Invalid value for `authentication_method_id`, must not be `None`")  # noqa: E501

        self._authentication_method_id = authentication_method_id

    @property
    def version(self):
        """Gets the version of this ScaMethods.  # noqa: E501

        Depending on the AuthenticationType. This version can be used by differentiating authentication tools used within performing OTP generation in the same authentication type. This version can be referred to in the ASPSP's documentation.   # noqa: E501

        :return: The version of this ScaMethods.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ScaMethods.

        Depending on the AuthenticationType. This version can be used by differentiating authentication tools used within performing OTP generation in the same authentication type. This version can be referred to in the ASPSP's documentation.   # noqa: E501

        :param version: The version of this ScaMethods.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def name(self):
        """Gets the name of this ScaMethods.  # noqa: E501

        This is the name of the authentication method defined by the PSU in the Online Banking frontend of the ASPSP. Alternatively this could be a description provided by the ASPSP like \"SMS OTP on phone +49160 xxxxx 28\". This name shall be used by the TPP when presenting a list of authentication methods to the PSU, if available.   # noqa: E501

        :return: The name of this ScaMethods.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ScaMethods.

        This is the name of the authentication method defined by the PSU in the Online Banking frontend of the ASPSP. Alternatively this could be a description provided by the ASPSP like \"SMS OTP on phone +49160 xxxxx 28\". This name shall be used by the TPP when presenting a list of authentication methods to the PSU, if available.   # noqa: E501

        :param name: The name of this ScaMethods.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def explanation(self):
        """Gets the explanation of this ScaMethods.  # noqa: E501

        Detailed information about the SCA method, meant for the PSU.   # noqa: E501

        :return: The explanation of this ScaMethods.  # noqa: E501
        :rtype: str
        """
        return self._explanation

    @explanation.setter
    def explanation(self, explanation):
        """Sets the explanation of this ScaMethods.

        Detailed information about the SCA method, meant for the PSU.   # noqa: E501

        :param explanation: The explanation of this ScaMethods.  # noqa: E501
        :type: str
        """

        self._explanation = explanation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScaMethods, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScaMethods):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
