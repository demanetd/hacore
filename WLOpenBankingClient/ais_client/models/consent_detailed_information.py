# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsentDetailedInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consent_id': 'str',
        'consent_status': 'ConsentStatusEnum',
        'aspsp_id': 'str',
        'authorisation_required_data': 'AuthorisationRequiredData',
        'permission_information': 'str',
        'frequency_per_day': 'int',
        'recurring_indicator': 'bool',
        'valid_until_date': 'datetime',
        'last_action_date': 'date',
        'transaction_from_date_time': 'datetime',
        'transaction_to_date_time': 'datetime',
        'links': 'ConsentStatusLinks',
        'psu_message': 'str'
    }

    attribute_map = {
        'consent_id': 'ConsentId',
        'consent_status': 'ConsentStatus',
        'aspsp_id': 'AspspId',
        'authorisation_required_data': 'AuthorisationRequiredData',
        'permission_information': 'PermissionInformation',
        'frequency_per_day': 'FrequencyPerDay',
        'recurring_indicator': 'RecurringIndicator',
        'valid_until_date': 'ValidUntilDate',
        'last_action_date': 'LastActionDate',
        'transaction_from_date_time': 'TransactionFromDateTime',
        'transaction_to_date_time': 'TransactionToDateTime',
        'links': 'Links',
        'psu_message': 'PsuMessage'
    }

    def __init__(self, consent_id=None, consent_status=None, aspsp_id=None, authorisation_required_data=None, permission_information=None, frequency_per_day=None, recurring_indicator=None, valid_until_date=None, last_action_date=None, transaction_from_date_time=None, transaction_to_date_time=None, links=None, psu_message=None):  # noqa: E501
        """ConsentDetailedInformation - a model defined in Swagger"""  # noqa: E501
        self._consent_id = None
        self._consent_status = None
        self._aspsp_id = None
        self._authorisation_required_data = None
        self._permission_information = None
        self._frequency_per_day = None
        self._recurring_indicator = None
        self._valid_until_date = None
        self._last_action_date = None
        self._transaction_from_date_time = None
        self._transaction_to_date_time = None
        self._links = None
        self._psu_message = None
        self.discriminator = None
        self.consent_id = consent_id
        self.consent_status = consent_status
        if aspsp_id is not None:
            self.aspsp_id = aspsp_id
        if authorisation_required_data is not None:
            self.authorisation_required_data = authorisation_required_data
        if permission_information is not None:
            self.permission_information = permission_information
        if frequency_per_day is not None:
            self.frequency_per_day = frequency_per_day
        if recurring_indicator is not None:
            self.recurring_indicator = recurring_indicator
        if valid_until_date is not None:
            self.valid_until_date = valid_until_date
        if last_action_date is not None:
            self.last_action_date = last_action_date
        if transaction_from_date_time is not None:
            self.transaction_from_date_time = transaction_from_date_time
        if transaction_to_date_time is not None:
            self.transaction_to_date_time = transaction_to_date_time
        if links is not None:
            self.links = links
        if psu_message is not None:
            self.psu_message = psu_message

    @property
    def consent_id(self):
        """Gets the consent_id of this ConsentDetailedInformation.  # noqa: E501

        Id generated by the Open Banking Service. This should be used to refer to this consent.   # noqa: E501

        :return: The consent_id of this ConsentDetailedInformation.  # noqa: E501
        :rtype: str
        """
        return self._consent_id

    @consent_id.setter
    def consent_id(self, consent_id):
        """Sets the consent_id of this ConsentDetailedInformation.

        Id generated by the Open Banking Service. This should be used to refer to this consent.   # noqa: E501

        :param consent_id: The consent_id of this ConsentDetailedInformation.  # noqa: E501
        :type: str
        """
        if consent_id is None:
            raise ValueError("Invalid value for `consent_id`, must not be `None`")  # noqa: E501

        self._consent_id = consent_id

    @property
    def consent_status(self):
        """Gets the consent_status of this ConsentDetailedInformation.  # noqa: E501


        :return: The consent_status of this ConsentDetailedInformation.  # noqa: E501
        :rtype: ConsentStatusEnum
        """
        return self._consent_status

    @consent_status.setter
    def consent_status(self, consent_status):
        """Sets the consent_status of this ConsentDetailedInformation.


        :param consent_status: The consent_status of this ConsentDetailedInformation.  # noqa: E501
        :type: ConsentStatusEnum
        """
        if consent_status is None:
            raise ValueError("Invalid value for `consent_status`, must not be `None`")  # noqa: E501

        self._consent_status = consent_status

    @property
    def aspsp_id(self):
        """Gets the aspsp_id of this ConsentDetailedInformation.  # noqa: E501

        The Id of the ASPSP. The Open Banking Service uses this information to route the consent and accounts information requests.   # noqa: E501

        :return: The aspsp_id of this ConsentDetailedInformation.  # noqa: E501
        :rtype: str
        """
        return self._aspsp_id

    @aspsp_id.setter
    def aspsp_id(self, aspsp_id):
        """Sets the aspsp_id of this ConsentDetailedInformation.

        The Id of the ASPSP. The Open Banking Service uses this information to route the consent and accounts information requests.   # noqa: E501

        :param aspsp_id: The aspsp_id of this ConsentDetailedInformation.  # noqa: E501
        :type: str
        """

        self._aspsp_id = aspsp_id

    @property
    def authorisation_required_data(self):
        """Gets the authorisation_required_data of this ConsentDetailedInformation.  # noqa: E501


        :return: The authorisation_required_data of this ConsentDetailedInformation.  # noqa: E501
        :rtype: AuthorisationRequiredData
        """
        return self._authorisation_required_data

    @authorisation_required_data.setter
    def authorisation_required_data(self, authorisation_required_data):
        """Sets the authorisation_required_data of this ConsentDetailedInformation.


        :param authorisation_required_data: The authorisation_required_data of this ConsentDetailedInformation.  # noqa: E501
        :type: AuthorisationRequiredData
        """

        self._authorisation_required_data = authorisation_required_data

    @property
    def permission_information(self):
        """Gets the permission_information of this ConsentDetailedInformation.  # noqa: E501

        Optionally a text for detailed information on the permission handling of the ASPSP is given. E.g. by default a consent is allowing a frequency of up to 4 requests per day. This default is set implicitly by the Open Banking Service. If this parameter is not supported by the ASPSP the Initiating Party is informed by this.   # noqa: E501

        :return: The permission_information of this ConsentDetailedInformation.  # noqa: E501
        :rtype: str
        """
        return self._permission_information

    @permission_information.setter
    def permission_information(self, permission_information):
        """Sets the permission_information of this ConsentDetailedInformation.

        Optionally a text for detailed information on the permission handling of the ASPSP is given. E.g. by default a consent is allowing a frequency of up to 4 requests per day. This default is set implicitly by the Open Banking Service. If this parameter is not supported by the ASPSP the Initiating Party is informed by this.   # noqa: E501

        :param permission_information: The permission_information of this ConsentDetailedInformation.  # noqa: E501
        :type: str
        """

        self._permission_information = permission_information

    @property
    def frequency_per_day(self):
        """Gets the frequency_per_day of this ConsentDetailedInformation.  # noqa: E501

        This field indicates the maximum frequency for an access per day. For a one-off access, this attribute is set to \"1.   # noqa: E501

        :return: The frequency_per_day of this ConsentDetailedInformation.  # noqa: E501
        :rtype: int
        """
        return self._frequency_per_day

    @frequency_per_day.setter
    def frequency_per_day(self, frequency_per_day):
        """Sets the frequency_per_day of this ConsentDetailedInformation.

        This field indicates the maximum frequency for an access per day. For a one-off access, this attribute is set to \"1.   # noqa: E501

        :param frequency_per_day: The frequency_per_day of this ConsentDetailedInformation.  # noqa: E501
        :type: int
        """

        self._frequency_per_day = frequency_per_day

    @property
    def recurring_indicator(self):
        """Gets the recurring_indicator of this ConsentDetailedInformation.  # noqa: E501

        \"true\", if the consent is for recurring access to the account data.  \"false\", if the consent is for one access to the account data.   # noqa: E501

        :return: The recurring_indicator of this ConsentDetailedInformation.  # noqa: E501
        :rtype: bool
        """
        return self._recurring_indicator

    @recurring_indicator.setter
    def recurring_indicator(self, recurring_indicator):
        """Sets the recurring_indicator of this ConsentDetailedInformation.

        \"true\", if the consent is for recurring access to the account data.  \"false\", if the consent is for one access to the account data.   # noqa: E501

        :param recurring_indicator: The recurring_indicator of this ConsentDetailedInformation.  # noqa: E501
        :type: bool
        """

        self._recurring_indicator = recurring_indicator

    @property
    def valid_until_date(self):
        """Gets the valid_until_date of this ConsentDetailedInformation.  # noqa: E501

        Date to which the consent is valid.   # noqa: E501

        :return: The valid_until_date of this ConsentDetailedInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._valid_until_date

    @valid_until_date.setter
    def valid_until_date(self, valid_until_date):
        """Sets the valid_until_date of this ConsentDetailedInformation.

        Date to which the consent is valid.   # noqa: E501

        :param valid_until_date: The valid_until_date of this ConsentDetailedInformation.  # noqa: E501
        :type: datetime
        """

        self._valid_until_date = valid_until_date

    @property
    def last_action_date(self):
        """Gets the last_action_date of this ConsentDetailedInformation.  # noqa: E501

        Date of the last change to the consent object. Either through the XS2A interface or the PSU/ASPSP interface.   # noqa: E501

        :return: The last_action_date of this ConsentDetailedInformation.  # noqa: E501
        :rtype: date
        """
        return self._last_action_date

    @last_action_date.setter
    def last_action_date(self, last_action_date):
        """Sets the last_action_date of this ConsentDetailedInformation.

        Date of the last change to the consent object. Either through the XS2A interface or the PSU/ASPSP interface.   # noqa: E501

        :param last_action_date: The last_action_date of this ConsentDetailedInformation.  # noqa: E501
        :type: date
        """

        self._last_action_date = last_action_date

    @property
    def transaction_from_date_time(self):
        """Gets the transaction_from_date_time of this ConsentDetailedInformation.  # noqa: E501

        Specified start date and time for the transaction query period.   # noqa: E501

        :return: The transaction_from_date_time of this ConsentDetailedInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_from_date_time

    @transaction_from_date_time.setter
    def transaction_from_date_time(self, transaction_from_date_time):
        """Sets the transaction_from_date_time of this ConsentDetailedInformation.

        Specified start date and time for the transaction query period.   # noqa: E501

        :param transaction_from_date_time: The transaction_from_date_time of this ConsentDetailedInformation.  # noqa: E501
        :type: datetime
        """

        self._transaction_from_date_time = transaction_from_date_time

    @property
    def transaction_to_date_time(self):
        """Gets the transaction_to_date_time of this ConsentDetailedInformation.  # noqa: E501

        Specified end date and time for the transaction query period.   # noqa: E501

        :return: The transaction_to_date_time of this ConsentDetailedInformation.  # noqa: E501
        :rtype: datetime
        """
        return self._transaction_to_date_time

    @transaction_to_date_time.setter
    def transaction_to_date_time(self, transaction_to_date_time):
        """Sets the transaction_to_date_time of this ConsentDetailedInformation.

        Specified end date and time for the transaction query period.   # noqa: E501

        :param transaction_to_date_time: The transaction_to_date_time of this ConsentDetailedInformation.  # noqa: E501
        :type: datetime
        """

        self._transaction_to_date_time = transaction_to_date_time

    @property
    def links(self):
        """Gets the links of this ConsentDetailedInformation.  # noqa: E501


        :return: The links of this ConsentDetailedInformation.  # noqa: E501
        :rtype: ConsentStatusLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ConsentDetailedInformation.


        :param links: The links of this ConsentDetailedInformation.  # noqa: E501
        :type: ConsentStatusLinks
        """

        self._links = links

    @property
    def psu_message(self):
        """Gets the psu_message of this ConsentDetailedInformation.  # noqa: E501

        Text to be displayed to the PSU.   # noqa: E501

        :return: The psu_message of this ConsentDetailedInformation.  # noqa: E501
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this ConsentDetailedInformation.

        Text to be displayed to the PSU.   # noqa: E501

        :param psu_message: The psu_message of this ConsentDetailedInformation.  # noqa: E501
        :type: str
        """

        self._psu_message = psu_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsentDetailedInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsentDetailedInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
