# coding: utf-8

"""
    Open Banking Account Information V3

    There are several possible flows (sequence of API calls) to obtain a consent before Account Information data can be retrieved. Which API's are required depend on the ASPSP (the bank of the PSU) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the consent request.  #### PSD2 Sandbox  Several AspspId's are available to test specific account information scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **d5bd895a4080dbbb469a207460b6fca**   # noqa: E501

    OpenAPI spec version: 3.7.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaginationLinks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_self': 'Link',
        'first': 'Link',
        'last': 'Link',
        'next': 'Link',
        'prev': 'Link'
    }

    attribute_map = {
        '_self': 'Self',
        'first': 'First',
        'last': 'Last',
        'next': 'Next',
        'prev': 'Prev'
    }

    discriminator_value_class_map = {
          'TransactionLinks': 'TransactionLinks',
'BalanceLinks': 'BalanceLinks',
'AccountLinks': 'AccountLinks'    }

    def __init__(self, _self=None, first=None, last=None, next=None, prev=None):  # noqa: E501
        """PaginationLinks - a model defined in Swagger"""  # noqa: E501
        self.__self = None
        self._first = None
        self._last = None
        self._next = None
        self._prev = None
        self.discriminator = 'classType'
        self._self = _self
        if first is not None:
            self.first = first
        if last is not None:
            self.last = last
        if next is not None:
            self.next = next
        if prev is not None:
            self.prev = prev

    @property
    def _self(self):
        """Gets the _self of this PaginationLinks.  # noqa: E501


        :return: The _self of this PaginationLinks.  # noqa: E501
        :rtype: Link
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this PaginationLinks.


        :param _self: The _self of this PaginationLinks.  # noqa: E501
        :type: Link
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")  # noqa: E501

        self.__self = _self

    @property
    def first(self):
        """Gets the first of this PaginationLinks.  # noqa: E501


        :return: The first of this PaginationLinks.  # noqa: E501
        :rtype: Link
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this PaginationLinks.


        :param first: The first of this PaginationLinks.  # noqa: E501
        :type: Link
        """

        self._first = first

    @property
    def last(self):
        """Gets the last of this PaginationLinks.  # noqa: E501


        :return: The last of this PaginationLinks.  # noqa: E501
        :rtype: Link
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this PaginationLinks.


        :param last: The last of this PaginationLinks.  # noqa: E501
        :type: Link
        """

        self._last = last

    @property
    def next(self):
        """Gets the next of this PaginationLinks.  # noqa: E501


        :return: The next of this PaginationLinks.  # noqa: E501
        :rtype: Link
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PaginationLinks.


        :param next: The next of this PaginationLinks.  # noqa: E501
        :type: Link
        """

        self._next = next

    @property
    def prev(self):
        """Gets the prev of this PaginationLinks.  # noqa: E501


        :return: The prev of this PaginationLinks.  # noqa: E501
        :rtype: Link
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this PaginationLinks.


        :param prev: The prev of this PaginationLinks.  # noqa: E501
        :type: Link
        """

        self._prev = prev

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_value = data[self.discriminator].lower()
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaginationLinks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginationLinks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
