# coding: utf-8

"""
Open Banking Payment Initiation Service

### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pis_client.api_client import ApiClient


class RefundInitiationServiceV3ExtendedServicesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def refund_authorisation(
        self, x_request_id, message_create_date_time, refund_id, **kwargs
    ):  # noqa: E501
        """Refund authorisation request  # noqa: E501

        Use this operation to authorise a refund explicitly.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_authorisation(x_request_id, message_create_date_time, refund_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str refund_id: The Id used by the Open Banking Service to refer to a refund.  (required)
        :param PaymentAuthorisationRequest body: Description of request.

        :return: RefundAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.refund_authorisation_with_http_info(
                x_request_id, message_create_date_time, refund_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.refund_authorisation_with_http_info(
                x_request_id, message_create_date_time, refund_id, **kwargs
            )  # noqa: E501
            return data

    def refund_authorisation_with_http_info(
        self, x_request_id, message_create_date_time, refund_id, **kwargs
    ):  # noqa: E501
        """Refund authorisation request  # noqa: E501

        Use this operation to authorise a refund explicitly.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_authorisation_with_http_info(x_request_id, message_create_date_time, refund_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str refund_id: The Id used by the Open Banking Service to refer to a refund.  (required)
        :param PaymentAuthorisationRequest body: Description of request.

        :return: RefundAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["x_request_id", "message_create_date_time", "refund_id", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_authorisation" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `refund_authorisation`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `refund_authorisation`"
            )  # noqa: E501
        # verify the required parameter 'refund_id' is set
        if "refund_id" not in params or params["refund_id"] is None:
            raise ValueError(
                "Missing the required parameter `refund_id` when calling `refund_authorisation`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "refund_id" in params:
            path_params["refundId"] = params["refund_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/refunds/{refundId}/authorisations",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RefundAuthorisationResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def refund_authorisation_update(
        self,
        x_request_id,
        message_create_date_time,
        refund_id,
        authorisation_id,
        **kwargs,
    ):  # noqa: E501
        """Refund authorisation request  # noqa: E501

        Use this operation to change the authorisation resource.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_authorisation_update(x_request_id, message_create_date_time, refund_id, authorisation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str refund_id: The Id used by the Open Banking Service to refer to a refund.  (required)
        :param str authorisation_id: The Id used by the Open Banking Service to refer to an authorisation resource.  (required)
        :param PaymentAuthorisationUpdateRequest body:
        :return: RefundAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.refund_authorisation_update_with_http_info(
                x_request_id,
                message_create_date_time,
                refund_id,
                authorisation_id,
                **kwargs,
            )  # noqa: E501
        else:
            (data) = self.refund_authorisation_update_with_http_info(
                x_request_id,
                message_create_date_time,
                refund_id,
                authorisation_id,
                **kwargs,
            )  # noqa: E501
            return data

    def refund_authorisation_update_with_http_info(
        self,
        x_request_id,
        message_create_date_time,
        refund_id,
        authorisation_id,
        **kwargs,
    ):  # noqa: E501
        """Refund authorisation request  # noqa: E501

        Use this operation to change the authorisation resource.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_authorisation_update_with_http_info(x_request_id, message_create_date_time, refund_id, authorisation_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str refund_id: The Id used by the Open Banking Service to refer to a refund.  (required)
        :param str authorisation_id: The Id used by the Open Banking Service to refer to an authorisation resource.  (required)
        :param PaymentAuthorisationUpdateRequest body:
        :return: RefundAuthorisationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "x_request_id",
            "message_create_date_time",
            "refund_id",
            "authorisation_id",
            "body",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_authorisation_update" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `refund_authorisation_update`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `refund_authorisation_update`"
            )  # noqa: E501
        # verify the required parameter 'refund_id' is set
        if "refund_id" not in params or params["refund_id"] is None:
            raise ValueError(
                "Missing the required parameter `refund_id` when calling `refund_authorisation_update`"
            )  # noqa: E501
        # verify the required parameter 'authorisation_id' is set
        if "authorisation_id" not in params or params["authorisation_id"] is None:
            raise ValueError(
                "Missing the required parameter `authorisation_id` when calling `refund_authorisation_update`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "refund_id" in params:
            path_params["refundId"] = params["refund_id"]  # noqa: E501
        if "authorisation_id" in params:
            path_params["authorisationId"] = params["authorisation_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/refunds/{refundId}/authorisations/{authorisationId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RefundAuthorisationResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def refund_confirmation(
        self, x_request_id, message_create_date_time, refund_id, **kwargs
    ):  # noqa: E501
        """Confirmation of the refund request by the PISP  # noqa: E501

        This API is used to confirm a refund, confirmation is required when the link 'ConfirmationRequired' is returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_confirmation(x_request_id, message_create_date_time, refund_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str refund_id: The Id used by the Open Banking Service to refer to a refund.  (required)
        :param ConfirmationRequest body:
        :param str initiating_party_return_url: The callback URL for the redirection back to the initiating party after authorization.
        :param datetime last_login: PSU Session information.  The time when the PSU last logged in with the TPP. ISO 8601 DateTime.
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU.
        :param str psu_ip_port: PSU Session information.  The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
        :param str http_method: PSU Session information.  HTTP method used at the PSU-TPP interface. Available values - GET, POST, PUT, DELETE.
        :param str http_header_user_agent: PSU Session information.  The forwarded Agent header field of the HTTP request between PSU and TPP.  Required if * the `PaymentProduct`equals `IDEAL` * `PsuId`is provided * `UseDebtorToken` does not equal `false`
        :param str http_header_referer: PSU Session information.
        :param str http_header_accept: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_charset: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_encoding: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_language: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device.
        :param str geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP.
        :return: RefundConfirmationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.refund_confirmation_with_http_info(
                x_request_id, message_create_date_time, refund_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.refund_confirmation_with_http_info(
                x_request_id, message_create_date_time, refund_id, **kwargs
            )  # noqa: E501
            return data

    def refund_confirmation_with_http_info(
        self, x_request_id, message_create_date_time, refund_id, **kwargs
    ):  # noqa: E501
        """Confirmation of the refund request by the PISP  # noqa: E501

        This API is used to confirm a refund, confirmation is required when the link 'ConfirmationRequired' is returned.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_confirmation_with_http_info(x_request_id, message_create_date_time, refund_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str refund_id: The Id used by the Open Banking Service to refer to a refund.  (required)
        :param ConfirmationRequest body:
        :param str initiating_party_return_url: The callback URL for the redirection back to the initiating party after authorization.
        :param datetime last_login: PSU Session information.  The time when the PSU last logged in with the TPP. ISO 8601 DateTime.
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU.
        :param str psu_ip_port: PSU Session information.  The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
        :param str http_method: PSU Session information.  HTTP method used at the PSU-TPP interface. Available values - GET, POST, PUT, DELETE.
        :param str http_header_user_agent: PSU Session information.  The forwarded Agent header field of the HTTP request between PSU and TPP.  Required if * the `PaymentProduct`equals `IDEAL` * `PsuId`is provided * `UseDebtorToken` does not equal `false`
        :param str http_header_referer: PSU Session information.
        :param str http_header_accept: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_charset: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_encoding: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_language: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device.
        :param str geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP.
        :return: RefundConfirmationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "x_request_id",
            "message_create_date_time",
            "refund_id",
            "body",
            "initiating_party_return_url",
            "last_login",
            "psu_ip_address",
            "psu_ip_port",
            "http_method",
            "http_header_user_agent",
            "http_header_referer",
            "http_header_accept",
            "http_header_accept_charset",
            "http_header_accept_encoding",
            "http_header_accept_language",
            "device_id",
            "geo_location",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_confirmation" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `refund_confirmation`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `refund_confirmation`"
            )  # noqa: E501
        # verify the required parameter 'refund_id' is set
        if "refund_id" not in params or params["refund_id"] is None:
            raise ValueError(
                "Missing the required parameter `refund_id` when calling `refund_confirmation`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "refund_id" in params:
            path_params["refundId"] = params["refund_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501
        if "initiating_party_return_url" in params:
            header_params["InitiatingPartyReturnUrl"] = params[
                "initiating_party_return_url"
            ]  # noqa: E501
        if "last_login" in params:
            header_params["LastLogin"] = params["last_login"]  # noqa: E501
        if "psu_ip_address" in params:
            header_params["PsuIpAddress"] = params["psu_ip_address"]  # noqa: E501
        if "psu_ip_port" in params:
            header_params["PsuIpPort"] = params["psu_ip_port"]  # noqa: E501
        if "http_method" in params:
            header_params["HttpMethod"] = params["http_method"]  # noqa: E501
        if "http_header_user_agent" in params:
            header_params["HttpHeaderUserAgent"] = params["http_header_user_agent"]  # noqa: E501
        if "http_header_referer" in params:
            header_params["HttpHeaderReferer"] = params["http_header_referer"]  # noqa: E501
        if "http_header_accept" in params:
            header_params["HttpHeaderAccept"] = params["http_header_accept"]  # noqa: E501
        if "http_header_accept_charset" in params:
            header_params["HttpHeaderAcceptCharset"] = params[
                "http_header_accept_charset"
            ]  # noqa: E501
        if "http_header_accept_encoding" in params:
            header_params["HttpHeaderAcceptEncoding"] = params[
                "http_header_accept_encoding"
            ]  # noqa: E501
        if "http_header_accept_language" in params:
            header_params["HttpHeaderAcceptLanguage"] = params[
                "http_header_accept_language"
            ]  # noqa: E501
        if "device_id" in params:
            header_params["DeviceId"] = params["device_id"]  # noqa: E501
        if "geo_location" in params:
            header_params["GeoLocation"] = params["geo_location"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/refunds/{refundId}/confirmation",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RefundConfirmationResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def refund_identification(
        self, x_request_id, message_create_date_time, refund_id, **kwargs
    ):  # noqa: E501
        """Refund identification request  # noqa: E501

        Use this operation to identify a PSU in decoupled approach. The response of the post refunds API will provide a link to this api in the 'PostIdentificationForDecoupled' field if this step is required.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_identification(x_request_id, message_create_date_time, refund_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str refund_id: The Id used by the Open Banking Service to refer to a refund.  (required)
        :param PaymentIdentificationRequest body:
        :return: RefundIdentificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.refund_identification_with_http_info(
                x_request_id, message_create_date_time, refund_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.refund_identification_with_http_info(
                x_request_id, message_create_date_time, refund_id, **kwargs
            )  # noqa: E501
            return data

    def refund_identification_with_http_info(
        self, x_request_id, message_create_date_time, refund_id, **kwargs
    ):  # noqa: E501
        """Refund identification request  # noqa: E501

        Use this operation to identify a PSU in decoupled approach. The response of the post refunds API will provide a link to this api in the 'PostIdentificationForDecoupled' field if this step is required.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_identification_with_http_info(x_request_id, message_create_date_time, refund_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str refund_id: The Id used by the Open Banking Service to refer to a refund.  (required)
        :param PaymentIdentificationRequest body:
        :return: RefundIdentificationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["x_request_id", "message_create_date_time", "refund_id", "body"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_identification" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `refund_identification`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `refund_identification`"
            )  # noqa: E501
        # verify the required parameter 'refund_id' is set
        if "refund_id" not in params or params["refund_id"] is None:
            raise ValueError(
                "Missing the required parameter `refund_id` when calling `refund_identification`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "refund_id" in params:
            path_params["refundId"] = params["refund_id"]  # noqa: E501

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/refunds/{refundId}/identification",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RefundIdentificationResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def refund_initiate(self, x_request_id, message_create_date_time, **kwargs):  # noqa: E501
        """Refund initiation request  # noqa: E501

        Use this operation to initiate an order for refunds containing more than 1 refund instruction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_initiate(x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param RefundInitiationRequest body:
        :param str initiating_party_return_url: The callback URL for the redirection back to the initiating party after authorization.
        :param bool use_authorisation_landing_pages: If true, Bank Selection Interface will be used to request required information from PSU directly
        :param str locale: 2-digit ISO-639 code for the language in which the Bank Selection Interface are displayed.  For special languages can be used 5-digit code like nl-BE, where first is ISO-639 langauge code and the second is ISO-3166 country code.  If not set, the language of the Bank Selection Interface is taken over from the end user’s browser configuration or the system configuration of the Bank Selection Interface server.
        :param datetime last_login: PSU Session information.  The time when the PSU last logged in with the TPP. ISO 8601 DateTime.
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU.
        :param str psu_ip_port: PSU Session information.  The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
        :param str http_method: PSU Session information.  HTTP method used at the PSU-TPP interface. Available values - GET, POST, PUT, DELETE.
        :param str http_header_user_agent: PSU Session information.  The forwarded Agent header field of the HTTP request between PSU and TPP.  Required if * the `PaymentProduct`equals `IDEAL` * `PsuId`is provided * `UseDebtorToken` does not equal `false`
        :param str http_header_referer: PSU Session information.
        :param str http_header_accept: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_charset: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_encoding: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_language: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device.
        :param str geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP.
        :param str confirm: If set to 'true' the transaction will be immediately confirmed by the Open Banking Service if confirmation of the payment by the Initiating Party is required by the ASPSP. <br>**Note:** This field is only applicable when the notification service is used by the Initiating Party to receive the status of the payment. When the notification is not used this flag can be set in the GET status API.
        :return: RefundInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.refund_initiate_with_http_info(
                x_request_id, message_create_date_time, **kwargs
            )  # noqa: E501
        else:
            (data) = self.refund_initiate_with_http_info(
                x_request_id, message_create_date_time, **kwargs
            )  # noqa: E501
            return data

    def refund_initiate_with_http_info(
        self, x_request_id, message_create_date_time, **kwargs
    ):  # noqa: E501
        """Refund initiation request  # noqa: E501

        Use this operation to initiate an order for refunds containing more than 1 refund instruction.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_initiate_with_http_info(x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param RefundInitiationRequest body:
        :param str initiating_party_return_url: The callback URL for the redirection back to the initiating party after authorization.
        :param bool use_authorisation_landing_pages: If true, Bank Selection Interface will be used to request required information from PSU directly
        :param str locale: 2-digit ISO-639 code for the language in which the Bank Selection Interface are displayed.  For special languages can be used 5-digit code like nl-BE, where first is ISO-639 langauge code and the second is ISO-3166 country code.  If not set, the language of the Bank Selection Interface is taken over from the end user’s browser configuration or the system configuration of the Bank Selection Interface server.
        :param datetime last_login: PSU Session information.  The time when the PSU last logged in with the TPP. ISO 8601 DateTime.
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU.
        :param str psu_ip_port: PSU Session information.  The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available.
        :param str http_method: PSU Session information.  HTTP method used at the PSU-TPP interface. Available values - GET, POST, PUT, DELETE.
        :param str http_header_user_agent: PSU Session information.  The forwarded Agent header field of the HTTP request between PSU and TPP.  Required if * the `PaymentProduct`equals `IDEAL` * `PsuId`is provided * `UseDebtorToken` does not equal `false`
        :param str http_header_referer: PSU Session information.
        :param str http_header_accept: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_charset: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_encoding: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str http_header_accept_language: PSU Session information.  The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP.
        :param str device_id: UUID (Universally Unique Identifier) for a device, which is used by the PSU. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID need to be unaltered until removal from device.
        :param str geo_location: The forwarded Geo Location of the corresponding http request between PSU and TPP.
        :param str confirm: If set to 'true' the transaction will be immediately confirmed by the Open Banking Service if confirmation of the payment by the Initiating Party is required by the ASPSP. <br>**Note:** This field is only applicable when the notification service is used by the Initiating Party to receive the status of the payment. When the notification is not used this flag can be set in the GET status API.
        :return: RefundInitiationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "x_request_id",
            "message_create_date_time",
            "body",
            "initiating_party_return_url",
            "use_authorisation_landing_pages",
            "locale",
            "last_login",
            "psu_ip_address",
            "psu_ip_port",
            "http_method",
            "http_header_user_agent",
            "http_header_referer",
            "http_header_accept",
            "http_header_accept_charset",
            "http_header_accept_encoding",
            "http_header_accept_language",
            "device_id",
            "geo_location",
            "confirm",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_initiate" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `refund_initiate`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `refund_initiate`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "confirm" in params:
            query_params.append(("confirm", params["confirm"]))  # noqa: E501

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501
        if "initiating_party_return_url" in params:
            header_params["InitiatingPartyReturnUrl"] = params[
                "initiating_party_return_url"
            ]  # noqa: E501
        if "use_authorisation_landing_pages" in params:
            header_params["UseAuthorisationLandingPages"] = params[
                "use_authorisation_landing_pages"
            ]  # noqa: E501
        if "locale" in params:
            header_params["Locale"] = params["locale"]  # noqa: E501
        if "last_login" in params:
            header_params["LastLogin"] = params["last_login"]  # noqa: E501
        if "psu_ip_address" in params:
            header_params["PsuIpAddress"] = params["psu_ip_address"]  # noqa: E501
        if "psu_ip_port" in params:
            header_params["PsuIpPort"] = params["psu_ip_port"]  # noqa: E501
        if "http_method" in params:
            header_params["HttpMethod"] = params["http_method"]  # noqa: E501
        if "http_header_user_agent" in params:
            header_params["HttpHeaderUserAgent"] = params["http_header_user_agent"]  # noqa: E501
        if "http_header_referer" in params:
            header_params["HttpHeaderReferer"] = params["http_header_referer"]  # noqa: E501
        if "http_header_accept" in params:
            header_params["HttpHeaderAccept"] = params["http_header_accept"]  # noqa: E501
        if "http_header_accept_charset" in params:
            header_params["HttpHeaderAcceptCharset"] = params[
                "http_header_accept_charset"
            ]  # noqa: E501
        if "http_header_accept_encoding" in params:
            header_params["HttpHeaderAcceptEncoding"] = params[
                "http_header_accept_encoding"
            ]  # noqa: E501
        if "http_header_accept_language" in params:
            header_params["HttpHeaderAcceptLanguage"] = params[
                "http_header_accept_language"
            ]  # noqa: E501
        if "device_id" in params:
            header_params["DeviceId"] = params["device_id"]  # noqa: E501
        if "geo_location" in params:
            header_params["GeoLocation"] = params["geo_location"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if "body" in params:
            body_params = params["body"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/refunds",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RefundInitiationResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def refund_status(
        self, refund_id, x_request_id, message_create_date_time, **kwargs
    ):  # noqa: E501
        """Status of the refund  # noqa: E501

        Use this operation to retrieve the status of a refund.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_status(refund_id, x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str refund_id: The Id used by the Open Banking Service to refer to a refund.  (required)
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str confirm: If set to 'true' the transaction will be immediately confirmed by the Open Banking Service if confirmation of the payment by the Initiating Party is required by the ASPSP.
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU.
        :return: RefundStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.refund_status_with_http_info(
                refund_id, x_request_id, message_create_date_time, **kwargs
            )  # noqa: E501
        else:
            (data) = self.refund_status_with_http_info(
                refund_id, x_request_id, message_create_date_time, **kwargs
            )  # noqa: E501
            return data

    def refund_status_with_http_info(
        self, refund_id, x_request_id, message_create_date_time, **kwargs
    ):  # noqa: E501
        """Status of the refund  # noqa: E501

        Use this operation to retrieve the status of a refund.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.refund_status_with_http_info(refund_id, x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str refund_id: The Id used by the Open Banking Service to refer to a refund.  (required)
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str confirm: If set to 'true' the transaction will be immediately confirmed by the Open Banking Service if confirmation of the payment by the Initiating Party is required by the ASPSP.
        :param str psu_ip_address: PSU Session information.  The forwarded IP Address header field consists of the corresponding HTTP request IP Address field between PSU and TPP . It shall be contained if and only if this request was actively initiated by the PSU.
        :return: RefundStatusResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "refund_id",
            "x_request_id",
            "message_create_date_time",
            "confirm",
            "psu_ip_address",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refund_status" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'refund_id' is set
        if "refund_id" not in params or params["refund_id"] is None:
            raise ValueError(
                "Missing the required parameter `refund_id` when calling `refund_status`"
            )  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `refund_status`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `refund_status`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "refund_id" in params:
            path_params["refundId"] = params["refund_id"]  # noqa: E501

        query_params = []
        if "confirm" in params:
            query_params.append(("confirm", params["confirm"]))  # noqa: E501

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501
        if "psu_ip_address" in params:
            header_params["PsuIpAddress"] = params["psu_ip_address"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/refunds/{refundId}/status",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="RefundStatusResponse",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
