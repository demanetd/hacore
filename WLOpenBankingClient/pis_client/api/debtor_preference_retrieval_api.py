# coding: utf-8

"""
Open Banking Payment Initiation Service

### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

OpenAPI spec version: 3.9.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from pis_client.api_client import ApiClient


class DebtorPreferenceRetrievalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_all_psu_banks_with_accounts(
        self, psuid, x_request_id, message_create_date_time, **kwargs
    ):  # noqa: E501
        """Get PSU preferred bank and preferred account  # noqa: E501

        Currently could be used only for iDEAL 2.0 payments   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_psu_banks_with_accounts(psuid, x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str psuid: The Id of the PSU registered at the Open Banking Service  (required)
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str signature: Conditionally required for iDEAL payments. The signature in the request should include a keyId with the value of fingerprint of the certificate
        :param str digest: Is contained if and only if the `Signature` element is contained in the header of the request.
        :param str aspsp_id: The AspspId used within the Open Banking Service to identify a specific ASPSP.
        :param str initiating_party_sub_id: External identification of the subsidiary initiating party.
        :return: PsuBankPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_all_psu_banks_with_accounts_with_http_info(
                psuid, x_request_id, message_create_date_time, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_all_psu_banks_with_accounts_with_http_info(
                psuid, x_request_id, message_create_date_time, **kwargs
            )  # noqa: E501
            return data

    def get_all_psu_banks_with_accounts_with_http_info(
        self, psuid, x_request_id, message_create_date_time, **kwargs
    ):  # noqa: E501
        """Get PSU preferred bank and preferred account  # noqa: E501

        Currently could be used only for iDEAL 2.0 payments   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_psu_banks_with_accounts_with_http_info(psuid, x_request_id, message_create_date_time, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str psuid: The Id of the PSU registered at the Open Banking Service  (required)
        :param str x_request_id: UUID for unique request identification.  (required)
        :param datetime message_create_date_time: The message create date time.  ISO 8601 DateTime.  (required)
        :param str signature: Conditionally required for iDEAL payments. The signature in the request should include a keyId with the value of fingerprint of the certificate
        :param str digest: Is contained if and only if the `Signature` element is contained in the header of the request.
        :param str aspsp_id: The AspspId used within the Open Banking Service to identify a specific ASPSP.
        :param str initiating_party_sub_id: External identification of the subsidiary initiating party.
        :return: PsuBankPreferences
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "psuid",
            "x_request_id",
            "message_create_date_time",
            "signature",
            "digest",
            "aspsp_id",
            "initiating_party_sub_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_psu_banks_with_accounts" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'psuid' is set
        if "psuid" not in params or params["psuid"] is None:
            raise ValueError(
                "Missing the required parameter `psuid` when calling `get_all_psu_banks_with_accounts`"
            )  # noqa: E501
        # verify the required parameter 'x_request_id' is set
        if "x_request_id" not in params or params["x_request_id"] is None:
            raise ValueError(
                "Missing the required parameter `x_request_id` when calling `get_all_psu_banks_with_accounts`"
            )  # noqa: E501
        # verify the required parameter 'message_create_date_time' is set
        if (
            "message_create_date_time" not in params
            or params["message_create_date_time"] is None
        ):
            raise ValueError(
                "Missing the required parameter `message_create_date_time` when calling `get_all_psu_banks_with_accounts`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "psuid" in params:
            path_params["Psuid"] = params["psuid"]  # noqa: E501

        query_params = []

        header_params = {}
        if "x_request_id" in params:
            header_params["X-Request-ID"] = params["x_request_id"]  # noqa: E501
        if "message_create_date_time" in params:
            header_params["MessageCreateDateTime"] = params["message_create_date_time"]  # noqa: E501
        if "signature" in params:
            header_params["Signature"] = params["signature"]  # noqa: E501
        if "digest" in params:
            header_params["Digest"] = params["digest"]  # noqa: E501
        if "aspsp_id" in params:
            header_params["AspspId"] = params["aspsp_id"]  # noqa: E501
        if "initiating_party_sub_id" in params:
            header_params["InitiatingPartySubId"] = params["initiating_party_sub_id"]  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["Authorization"]  # noqa: E501

        return self.api_client.call_api(
            "/preferences/{Psuid}/",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="PsuBankPreferences",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
