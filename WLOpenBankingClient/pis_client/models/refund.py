# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Refund(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_id': 'str',
        'end_to_end_id': 'str',
        'amount': 'Amount',
        'creditor_information': 'CreditorInformation'
    }

    attribute_map = {
        'payment_id': 'PaymentId',
        'end_to_end_id': 'EndToEndId',
        'amount': 'Amount',
        'creditor_information': 'CreditorInformation'
    }

    def __init__(self, payment_id=None, end_to_end_id=None, amount=None, creditor_information=None):  # noqa: E501
        """Refund - a model defined in Swagger"""  # noqa: E501
        self._payment_id = None
        self._end_to_end_id = None
        self._amount = None
        self._creditor_information = None
        self.discriminator = None
        self.payment_id = payment_id
        if end_to_end_id is not None:
            self.end_to_end_id = end_to_end_id
        self.amount = amount
        if creditor_information is not None:
            self.creditor_information = creditor_information

    @property
    def payment_id(self):
        """Gets the payment_id of this Refund.  # noqa: E501

        Id generated by the Open Banking Service. This should be used to refer to this payment in subsequent api calls.   # noqa: E501

        :return: The payment_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this Refund.

        Id generated by the Open Banking Service. This should be used to refer to this payment in subsequent api calls.   # noqa: E501

        :param payment_id: The payment_id of this Refund.  # noqa: E501
        :type: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")  # noqa: E501

        self._payment_id = payment_id

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this Refund.  # noqa: E501

        Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.   # noqa: E501

        :return: The end_to_end_id of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this Refund.

        Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.   # noqa: E501

        :param end_to_end_id: The end_to_end_id of this Refund.  # noqa: E501
        :type: str
        """

        self._end_to_end_id = end_to_end_id

    @property
    def amount(self):
        """Gets the amount of this Refund.  # noqa: E501


        :return: The amount of this Refund.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Refund.


        :param amount: The amount of this Refund.  # noqa: E501
        :type: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def creditor_information(self):
        """Gets the creditor_information of this Refund.  # noqa: E501


        :return: The creditor_information of this Refund.  # noqa: E501
        :rtype: CreditorInformation
        """
        return self._creditor_information

    @creditor_information.setter
    def creditor_information(self, creditor_information):
        """Sets the creditor_information of this Refund.


        :param creditor_information: The creditor_information of this Refund.  # noqa: E501
        :type: CreditorInformation
        """

        self._creditor_information = creditor_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Refund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Refund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
