# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IDEALPaymentsExpectedCheckoutData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'debtor_contact_details': 'DebtorContactDetails',
        'shipping_address': 'bool',
        'billing_address': 'bool'
    }

    attribute_map = {
        'debtor_contact_details': 'DebtorContactDetails',
        'shipping_address': 'ShippingAddress',
        'billing_address': 'BillingAddress'
    }

    def __init__(self, debtor_contact_details=None, shipping_address=False, billing_address=False):  # noqa: E501
        """IDEALPaymentsExpectedCheckoutData - a model defined in Swagger"""  # noqa: E501
        self._debtor_contact_details = None
        self._shipping_address = None
        self._billing_address = None
        self.discriminator = None
        if debtor_contact_details is not None:
            self.debtor_contact_details = debtor_contact_details
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if billing_address is not None:
            self.billing_address = billing_address

    @property
    def debtor_contact_details(self):
        """Gets the debtor_contact_details of this IDEALPaymentsExpectedCheckoutData.  # noqa: E501


        :return: The debtor_contact_details of this IDEALPaymentsExpectedCheckoutData.  # noqa: E501
        :rtype: DebtorContactDetails
        """
        return self._debtor_contact_details

    @debtor_contact_details.setter
    def debtor_contact_details(self, debtor_contact_details):
        """Sets the debtor_contact_details of this IDEALPaymentsExpectedCheckoutData.


        :param debtor_contact_details: The debtor_contact_details of this IDEALPaymentsExpectedCheckoutData.  # noqa: E501
        :type: DebtorContactDetails
        """

        self._debtor_contact_details = debtor_contact_details

    @property
    def shipping_address(self):
        """Gets the shipping_address of this IDEALPaymentsExpectedCheckoutData.  # noqa: E501

        Request to provide the details of the shipping address of the debtor   # noqa: E501

        :return: The shipping_address of this IDEALPaymentsExpectedCheckoutData.  # noqa: E501
        :rtype: bool
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this IDEALPaymentsExpectedCheckoutData.

        Request to provide the details of the shipping address of the debtor   # noqa: E501

        :param shipping_address: The shipping_address of this IDEALPaymentsExpectedCheckoutData.  # noqa: E501
        :type: bool
        """

        self._shipping_address = shipping_address

    @property
    def billing_address(self):
        """Gets the billing_address of this IDEALPaymentsExpectedCheckoutData.  # noqa: E501

        Request to provide the details of the billing address of the debtor   # noqa: E501

        :return: The billing_address of this IDEALPaymentsExpectedCheckoutData.  # noqa: E501
        :rtype: bool
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this IDEALPaymentsExpectedCheckoutData.

        Request to provide the details of the billing address of the debtor   # noqa: E501

        :param billing_address: The billing_address of this IDEALPaymentsExpectedCheckoutData.  # noqa: E501
        :type: bool
        """

        self._billing_address = billing_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IDEALPaymentsExpectedCheckoutData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IDEALPaymentsExpectedCheckoutData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
