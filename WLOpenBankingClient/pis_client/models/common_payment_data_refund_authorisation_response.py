# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonPaymentDataRefundAuthorisationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'refund_id': 'str',
        'refund_status': 'PaymentStatusEnum',
        'auth_status': 'AuthStatusEnum',
        'transaction_fees': 'TransactionFees',
        'authorisation_required_data': 'AuthorisationRequiredData',
        'psu_message': 'str'
    }

    attribute_map = {
        'refund_id': 'RefundId',
        'refund_status': 'RefundStatus',
        'auth_status': 'AuthStatus',
        'transaction_fees': 'TransactionFees',
        'authorisation_required_data': 'AuthorisationRequiredData',
        'psu_message': 'PsuMessage'
    }

    def __init__(self, refund_id=None, refund_status=None, auth_status=None, transaction_fees=None, authorisation_required_data=None, psu_message=None):  # noqa: E501
        """CommonPaymentDataRefundAuthorisationResponse - a model defined in Swagger"""  # noqa: E501
        self._refund_id = None
        self._refund_status = None
        self._auth_status = None
        self._transaction_fees = None
        self._authorisation_required_data = None
        self._psu_message = None
        self.discriminator = None
        self.refund_id = refund_id
        self.refund_status = refund_status
        if auth_status is not None:
            self.auth_status = auth_status
        if transaction_fees is not None:
            self.transaction_fees = transaction_fees
        if authorisation_required_data is not None:
            self.authorisation_required_data = authorisation_required_data
        if psu_message is not None:
            self.psu_message = psu_message

    @property
    def refund_id(self):
        """Gets the refund_id of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501

        Id generated by the Open Banking Service. This should be used to refer to this payment in subsequent api calls.   # noqa: E501

        :return: The refund_id of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._refund_id

    @refund_id.setter
    def refund_id(self, refund_id):
        """Sets the refund_id of this CommonPaymentDataRefundAuthorisationResponse.

        Id generated by the Open Banking Service. This should be used to refer to this payment in subsequent api calls.   # noqa: E501

        :param refund_id: The refund_id of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :type: str
        """
        if refund_id is None:
            raise ValueError("Invalid value for `refund_id`, must not be `None`")  # noqa: E501

        self._refund_id = refund_id

    @property
    def refund_status(self):
        """Gets the refund_status of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501


        :return: The refund_status of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :rtype: PaymentStatusEnum
        """
        return self._refund_status

    @refund_status.setter
    def refund_status(self, refund_status):
        """Sets the refund_status of this CommonPaymentDataRefundAuthorisationResponse.


        :param refund_status: The refund_status of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :type: PaymentStatusEnum
        """
        if refund_status is None:
            raise ValueError("Invalid value for `refund_status`, must not be `None`")  # noqa: E501

        self._refund_status = refund_status

    @property
    def auth_status(self):
        """Gets the auth_status of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501


        :return: The auth_status of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :rtype: AuthStatusEnum
        """
        return self._auth_status

    @auth_status.setter
    def auth_status(self, auth_status):
        """Sets the auth_status of this CommonPaymentDataRefundAuthorisationResponse.


        :param auth_status: The auth_status of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :type: AuthStatusEnum
        """

        self._auth_status = auth_status

    @property
    def transaction_fees(self):
        """Gets the transaction_fees of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501


        :return: The transaction_fees of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :rtype: TransactionFees
        """
        return self._transaction_fees

    @transaction_fees.setter
    def transaction_fees(self, transaction_fees):
        """Sets the transaction_fees of this CommonPaymentDataRefundAuthorisationResponse.


        :param transaction_fees: The transaction_fees of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :type: TransactionFees
        """

        self._transaction_fees = transaction_fees

    @property
    def authorisation_required_data(self):
        """Gets the authorisation_required_data of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501


        :return: The authorisation_required_data of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :rtype: AuthorisationRequiredData
        """
        return self._authorisation_required_data

    @authorisation_required_data.setter
    def authorisation_required_data(self, authorisation_required_data):
        """Sets the authorisation_required_data of this CommonPaymentDataRefundAuthorisationResponse.


        :param authorisation_required_data: The authorisation_required_data of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :type: AuthorisationRequiredData
        """

        self._authorisation_required_data = authorisation_required_data

    @property
    def psu_message(self):
        """Gets the psu_message of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501

        Text to be displayed to the PSU.   # noqa: E501

        :return: The psu_message of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this CommonPaymentDataRefundAuthorisationResponse.

        Text to be displayed to the PSU.   # noqa: E501

        :param psu_message: The psu_message of this CommonPaymentDataRefundAuthorisationResponse.  # noqa: E501
        :type: str
        """

        self._psu_message = psu_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonPaymentDataRefundAuthorisationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonPaymentDataRefundAuthorisationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
