# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentInitiationRequestBasic(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'use_pre_authentication': 'bool',
        'end_to_end_id': 'str',
        'initiating_party_reference_id': 'str',
        'preferred_sca_method': 'list[str]',
        'transaction_type': 'str',
        'expiration_period': 'int',
        'amount': 'Amount',
        'debtor_information': 'DebtorInformation',
        'creditor_information': 'CreditorInformation',
        'charge_bearer': 'str',
        'purpose_code': 'str',
        'category_purpose': 'CategoryPurposeEnum',
        'payment_context': 'RiskInformation',
        'cross_currency_payments': 'CrossCurrencyPayment',
        'regulatory_reporting_codes': 'list[RegulatoryReportingCode]',
        'remittance_information': 'str',
        'remittance_information_structured': 'RemittanceInformationStructured'
    }

    attribute_map = {
        'use_pre_authentication': 'UsePreAuthentication',
        'end_to_end_id': 'EndToEndId',
        'initiating_party_reference_id': 'InitiatingPartyReferenceId',
        'preferred_sca_method': 'PreferredScaMethod',
        'transaction_type': 'TransactionType',
        'expiration_period': 'ExpirationPeriod',
        'amount': 'Amount',
        'debtor_information': 'DebtorInformation',
        'creditor_information': 'CreditorInformation',
        'charge_bearer': 'ChargeBearer',
        'purpose_code': 'PurposeCode',
        'category_purpose': 'CategoryPurpose',
        'payment_context': 'PaymentContext',
        'cross_currency_payments': 'CrossCurrencyPayments',
        'regulatory_reporting_codes': 'RegulatoryReportingCodes',
        'remittance_information': 'RemittanceInformation',
        'remittance_information_structured': 'RemittanceInformationStructured'
    }

    def __init__(self, use_pre_authentication=False, end_to_end_id=None, initiating_party_reference_id=None, preferred_sca_method=None, transaction_type='Online', expiration_period=None, amount=None, debtor_information=None, creditor_information=None, charge_bearer=None, purpose_code=None, category_purpose=None, payment_context=None, cross_currency_payments=None, regulatory_reporting_codes=None, remittance_information=None, remittance_information_structured=None):  # noqa: E501
        """PaymentInitiationRequestBasic - a model defined in Swagger"""  # noqa: E501
        self._use_pre_authentication = None
        self._end_to_end_id = None
        self._initiating_party_reference_id = None
        self._preferred_sca_method = None
        self._transaction_type = None
        self._expiration_period = None
        self._amount = None
        self._debtor_information = None
        self._creditor_information = None
        self._charge_bearer = None
        self._purpose_code = None
        self._category_purpose = None
        self._payment_context = None
        self._cross_currency_payments = None
        self._regulatory_reporting_codes = None
        self._remittance_information = None
        self._remittance_information_structured = None
        self.discriminator = None
        if use_pre_authentication is not None:
            self.use_pre_authentication = use_pre_authentication
        if end_to_end_id is not None:
            self.end_to_end_id = end_to_end_id
        if initiating_party_reference_id is not None:
            self.initiating_party_reference_id = initiating_party_reference_id
        if preferred_sca_method is not None:
            self.preferred_sca_method = preferred_sca_method
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if expiration_period is not None:
            self.expiration_period = expiration_period
        self.amount = amount
        if debtor_information is not None:
            self.debtor_information = debtor_information
        if creditor_information is not None:
            self.creditor_information = creditor_information
        if charge_bearer is not None:
            self.charge_bearer = charge_bearer
        if purpose_code is not None:
            self.purpose_code = purpose_code
        if category_purpose is not None:
            self.category_purpose = category_purpose
        if payment_context is not None:
            self.payment_context = payment_context
        if cross_currency_payments is not None:
            self.cross_currency_payments = cross_currency_payments
        if regulatory_reporting_codes is not None:
            self.regulatory_reporting_codes = regulatory_reporting_codes
        if remittance_information is not None:
            self.remittance_information = remittance_information
        if remittance_information_structured is not None:
            self.remittance_information_structured = remittance_information_structured

    @property
    def use_pre_authentication(self):
        """Gets the use_pre_authentication of this PaymentInitiationRequestBasic.  # noqa: E501

        This field is only applicable for Aspsp which support pre-authentication. It can also be filled in payments toward other ASPSP's, but the value will then be ignored. * If set to true the Open Banking Service will store the pre-authentication token for use with future payments. This will only work if also a PsuId is provided which is stored in the Open Banking Service. * If set to false the pre-authentication token will only be used to finish one payment. After which it will be discarded.   # noqa: E501

        :return: The use_pre_authentication of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: bool
        """
        return self._use_pre_authentication

    @use_pre_authentication.setter
    def use_pre_authentication(self, use_pre_authentication):
        """Sets the use_pre_authentication of this PaymentInitiationRequestBasic.

        This field is only applicable for Aspsp which support pre-authentication. It can also be filled in payments toward other ASPSP's, but the value will then be ignored. * If set to true the Open Banking Service will store the pre-authentication token for use with future payments. This will only work if also a PsuId is provided which is stored in the Open Banking Service. * If set to false the pre-authentication token will only be used to finish one payment. After which it will be discarded.   # noqa: E501

        :param use_pre_authentication: The use_pre_authentication of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: bool
        """

        self._use_pre_authentication = use_pre_authentication

    @property
    def end_to_end_id(self):
        """Gets the end_to_end_id of this PaymentInitiationRequestBasic.  # noqa: E501

        Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. Required for PSD2 payments   # noqa: E501

        :return: The end_to_end_id of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_id

    @end_to_end_id.setter
    def end_to_end_id(self, end_to_end_id):
        """Sets the end_to_end_id of this PaymentInitiationRequestBasic.

        Unique identification, as assigned by the initiating party, to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. Required for PSD2 payments   # noqa: E501

        :param end_to_end_id: The end_to_end_id of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: str
        """

        self._end_to_end_id = end_to_end_id

    @property
    def initiating_party_reference_id(self):
        """Gets the initiating_party_reference_id of this PaymentInitiationRequestBasic.  # noqa: E501

        Reference to the payment created by the Initiating Party. This Id will not be visible to the Payment Service User. Required for PSD2 payments   # noqa: E501

        :return: The initiating_party_reference_id of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: str
        """
        return self._initiating_party_reference_id

    @initiating_party_reference_id.setter
    def initiating_party_reference_id(self, initiating_party_reference_id):
        """Sets the initiating_party_reference_id of this PaymentInitiationRequestBasic.

        Reference to the payment created by the Initiating Party. This Id will not be visible to the Payment Service User. Required for PSD2 payments   # noqa: E501

        :param initiating_party_reference_id: The initiating_party_reference_id of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: str
        """

        self._initiating_party_reference_id = initiating_party_reference_id

    @property
    def preferred_sca_method(self):
        """Gets the preferred_sca_method of this PaymentInitiationRequestBasic.  # noqa: E501

        Multiple preferred methods can be choosen. It is not guaranteed that the ASPSP will use the preferred method.   # noqa: E501

        :return: The preferred_sca_method of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: list[str]
        """
        return self._preferred_sca_method

    @preferred_sca_method.setter
    def preferred_sca_method(self, preferred_sca_method):
        """Sets the preferred_sca_method of this PaymentInitiationRequestBasic.

        Multiple preferred methods can be choosen. It is not guaranteed that the ASPSP will use the preferred method.   # noqa: E501

        :param preferred_sca_method: The preferred_sca_method of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Redirect", "Decoupled", "Embedded"]  # noqa: E501
        if not set(preferred_sca_method).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `preferred_sca_method` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(preferred_sca_method) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._preferred_sca_method = preferred_sca_method

    @property
    def transaction_type(self):
        """Gets the transaction_type of this PaymentInitiationRequestBasic.  # noqa: E501

        Transaction type used in this transaction. ONLINE - Used particularly for Online transactions, e.g. a webshop QR - Used for transactions from a QR. eg. Invoice INSTORE - Used for instore transactions for eg.- a POS device P2P - Used for peer-to-peer (customer-to-customer) transactions, e.g. a Transaction Request   # noqa: E501

        :return: The transaction_type of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this PaymentInitiationRequestBasic.

        Transaction type used in this transaction. ONLINE - Used particularly for Online transactions, e.g. a webshop QR - Used for transactions from a QR. eg. Invoice INSTORE - Used for instore transactions for eg.- a POS device P2P - Used for peer-to-peer (customer-to-customer) transactions, e.g. a Transaction Request   # noqa: E501

        :param transaction_type: The transaction_type of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: str
        """
        allowed_values = ["Online", "QR", "Instore", "P2P"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def expiration_period(self):
        """Gets the expiration_period of this PaymentInitiationRequestBasic.  # noqa: E501

        Time in seconds after which the transaction will expire. If not provided a default value will be used if the `PaymentProduct` equals `IDEAL`. For ONLINE - 1200 and for INSTORE - 120. Required for QR type transactions   # noqa: E501

        :return: The expiration_period of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: int
        """
        return self._expiration_period

    @expiration_period.setter
    def expiration_period(self, expiration_period):
        """Sets the expiration_period of this PaymentInitiationRequestBasic.

        Time in seconds after which the transaction will expire. If not provided a default value will be used if the `PaymentProduct` equals `IDEAL`. For ONLINE - 1200 and for INSTORE - 120. Required for QR type transactions   # noqa: E501

        :param expiration_period: The expiration_period of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: int
        """

        self._expiration_period = expiration_period

    @property
    def amount(self):
        """Gets the amount of this PaymentInitiationRequestBasic.  # noqa: E501


        :return: The amount of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentInitiationRequestBasic.


        :param amount: The amount of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def debtor_information(self):
        """Gets the debtor_information of this PaymentInitiationRequestBasic.  # noqa: E501


        :return: The debtor_information of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: DebtorInformation
        """
        return self._debtor_information

    @debtor_information.setter
    def debtor_information(self, debtor_information):
        """Sets the debtor_information of this PaymentInitiationRequestBasic.


        :param debtor_information: The debtor_information of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: DebtorInformation
        """

        self._debtor_information = debtor_information

    @property
    def creditor_information(self):
        """Gets the creditor_information of this PaymentInitiationRequestBasic.  # noqa: E501


        :return: The creditor_information of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: CreditorInformation
        """
        return self._creditor_information

    @creditor_information.setter
    def creditor_information(self, creditor_information):
        """Sets the creditor_information of this PaymentInitiationRequestBasic.


        :param creditor_information: The creditor_information of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: CreditorInformation
        """

        self._creditor_information = creditor_information

    @property
    def charge_bearer(self):
        """Gets the charge_bearer of this PaymentInitiationRequestBasic.  # noqa: E501

        Charge bearer.  Note - ISO20022 ChargeBearerType1Code.   # noqa: E501

        :return: The charge_bearer of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: str
        """
        return self._charge_bearer

    @charge_bearer.setter
    def charge_bearer(self, charge_bearer):
        """Sets the charge_bearer of this PaymentInitiationRequestBasic.

        Charge bearer.  Note - ISO20022 ChargeBearerType1Code.   # noqa: E501

        :param charge_bearer: The charge_bearer of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEBT", "CRED", "SHAR", "SLEV"]  # noqa: E501
        if charge_bearer not in allowed_values:
            raise ValueError(
                "Invalid value for `charge_bearer` ({0}), must be one of {1}"  # noqa: E501
                .format(charge_bearer, allowed_values)
            )

        self._charge_bearer = charge_bearer

    @property
    def purpose_code(self):
        """Gets the purpose_code of this PaymentInitiationRequestBasic.  # noqa: E501

        Specifies the purpose code that resulted in a payment initiation. Fill with a 4 characters code from the ExternalPurpose1Code list published by ISO20022 or use the values ‘Commerce’, ‘Carpark’, ‘Transport’.   # noqa: E501

        :return: The purpose_code of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: str
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this PaymentInitiationRequestBasic.

        Specifies the purpose code that resulted in a payment initiation. Fill with a 4 characters code from the ExternalPurpose1Code list published by ISO20022 or use the values ‘Commerce’, ‘Carpark’, ‘Transport’.   # noqa: E501

        :param purpose_code: The purpose_code of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: str
        """

        self._purpose_code = purpose_code

    @property
    def category_purpose(self):
        """Gets the category_purpose of this PaymentInitiationRequestBasic.  # noqa: E501


        :return: The category_purpose of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: CategoryPurposeEnum
        """
        return self._category_purpose

    @category_purpose.setter
    def category_purpose(self, category_purpose):
        """Sets the category_purpose of this PaymentInitiationRequestBasic.


        :param category_purpose: The category_purpose of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: CategoryPurposeEnum
        """

        self._category_purpose = category_purpose

    @property
    def payment_context(self):
        """Gets the payment_context of this PaymentInitiationRequestBasic.  # noqa: E501


        :return: The payment_context of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: RiskInformation
        """
        return self._payment_context

    @payment_context.setter
    def payment_context(self, payment_context):
        """Sets the payment_context of this PaymentInitiationRequestBasic.


        :param payment_context: The payment_context of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: RiskInformation
        """

        self._payment_context = payment_context

    @property
    def cross_currency_payments(self):
        """Gets the cross_currency_payments of this PaymentInitiationRequestBasic.  # noqa: E501


        :return: The cross_currency_payments of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: CrossCurrencyPayment
        """
        return self._cross_currency_payments

    @cross_currency_payments.setter
    def cross_currency_payments(self, cross_currency_payments):
        """Sets the cross_currency_payments of this PaymentInitiationRequestBasic.


        :param cross_currency_payments: The cross_currency_payments of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: CrossCurrencyPayment
        """

        self._cross_currency_payments = cross_currency_payments

    @property
    def regulatory_reporting_codes(self):
        """Gets the regulatory_reporting_codes of this PaymentInitiationRequestBasic.  # noqa: E501

        List of needed regulatory reporting codes for international payments   # noqa: E501

        :return: The regulatory_reporting_codes of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: list[RegulatoryReportingCode]
        """
        return self._regulatory_reporting_codes

    @regulatory_reporting_codes.setter
    def regulatory_reporting_codes(self, regulatory_reporting_codes):
        """Sets the regulatory_reporting_codes of this PaymentInitiationRequestBasic.

        List of needed regulatory reporting codes for international payments   # noqa: E501

        :param regulatory_reporting_codes: The regulatory_reporting_codes of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: list[RegulatoryReportingCode]
        """

        self._regulatory_reporting_codes = regulatory_reporting_codes

    @property
    def remittance_information(self):
        """Gets the remittance_information of this PaymentInitiationRequestBasic.  # noqa: E501

        Information supplied to enable the matching of an entry with the items that the transfer is intended to settle. This information will be visible to the Payment Service User.  **Conditional validation:** * In case the PaymentProduct is set to IDEAL the maxLength is limited to 35   # noqa: E501

        :return: The remittance_information of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: str
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information):
        """Sets the remittance_information of this PaymentInitiationRequestBasic.

        Information supplied to enable the matching of an entry with the items that the transfer is intended to settle. This information will be visible to the Payment Service User.  **Conditional validation:** * In case the PaymentProduct is set to IDEAL the maxLength is limited to 35   # noqa: E501

        :param remittance_information: The remittance_information of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: str
        """

        self._remittance_information = remittance_information

    @property
    def remittance_information_structured(self):
        """Gets the remittance_information_structured of this PaymentInitiationRequestBasic.  # noqa: E501


        :return: The remittance_information_structured of this PaymentInitiationRequestBasic.  # noqa: E501
        :rtype: RemittanceInformationStructured
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured):
        """Sets the remittance_information_structured of this PaymentInitiationRequestBasic.


        :param remittance_information_structured: The remittance_information_structured of this PaymentInitiationRequestBasic.  # noqa: E501
        :type: RemittanceInformationStructured
        """

        self._remittance_information_structured = remittance_information_structured

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentInitiationRequestBasic, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentInitiationRequestBasic):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
