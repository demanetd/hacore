# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CommonPaymentDataRefundDetailsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'refund_id': 'str',
        'refund_status': 'PaymentStatusEnum',
        'initiating_party_reference_id': 'str',
        'funds_available': 'bool',
        'debtor_information': 'DebtorInformation',
        'authorisation_required_data': 'AuthorisationRequiredData',
        'psu_message': 'str'
    }

    attribute_map = {
        'refund_id': 'RefundId',
        'refund_status': 'RefundStatus',
        'initiating_party_reference_id': 'InitiatingPartyReferenceId',
        'funds_available': 'FundsAvailable',
        'debtor_information': 'DebtorInformation',
        'authorisation_required_data': 'AuthorisationRequiredData',
        'psu_message': 'PsuMessage'
    }

    def __init__(self, refund_id=None, refund_status=None, initiating_party_reference_id=None, funds_available=None, debtor_information=None, authorisation_required_data=None, psu_message=None):  # noqa: E501
        """CommonPaymentDataRefundDetailsResponse - a model defined in Swagger"""  # noqa: E501
        self._refund_id = None
        self._refund_status = None
        self._initiating_party_reference_id = None
        self._funds_available = None
        self._debtor_information = None
        self._authorisation_required_data = None
        self._psu_message = None
        self.discriminator = None
        self.refund_id = refund_id
        self.refund_status = refund_status
        if initiating_party_reference_id is not None:
            self.initiating_party_reference_id = initiating_party_reference_id
        if funds_available is not None:
            self.funds_available = funds_available
        if debtor_information is not None:
            self.debtor_information = debtor_information
        if authorisation_required_data is not None:
            self.authorisation_required_data = authorisation_required_data
        if psu_message is not None:
            self.psu_message = psu_message

    @property
    def refund_id(self):
        """Gets the refund_id of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501

        Id generated by the Open Banking Service. This should be used to refer to this refund in subsequent api calls.   # noqa: E501

        :return: The refund_id of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._refund_id

    @refund_id.setter
    def refund_id(self, refund_id):
        """Sets the refund_id of this CommonPaymentDataRefundDetailsResponse.

        Id generated by the Open Banking Service. This should be used to refer to this refund in subsequent api calls.   # noqa: E501

        :param refund_id: The refund_id of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :type: str
        """
        if refund_id is None:
            raise ValueError("Invalid value for `refund_id`, must not be `None`")  # noqa: E501

        self._refund_id = refund_id

    @property
    def refund_status(self):
        """Gets the refund_status of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501


        :return: The refund_status of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :rtype: PaymentStatusEnum
        """
        return self._refund_status

    @refund_status.setter
    def refund_status(self, refund_status):
        """Sets the refund_status of this CommonPaymentDataRefundDetailsResponse.


        :param refund_status: The refund_status of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :type: PaymentStatusEnum
        """
        if refund_status is None:
            raise ValueError("Invalid value for `refund_status`, must not be `None`")  # noqa: E501

        self._refund_status = refund_status

    @property
    def initiating_party_reference_id(self):
        """Gets the initiating_party_reference_id of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501

        Reference to the payment created by the Initiating Party. This Id will not be visible to the Payment Service User.   # noqa: E501

        :return: The initiating_party_reference_id of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._initiating_party_reference_id

    @initiating_party_reference_id.setter
    def initiating_party_reference_id(self, initiating_party_reference_id):
        """Sets the initiating_party_reference_id of this CommonPaymentDataRefundDetailsResponse.

        Reference to the payment created by the Initiating Party. This Id will not be visible to the Payment Service User.   # noqa: E501

        :param initiating_party_reference_id: The initiating_party_reference_id of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :type: str
        """

        self._initiating_party_reference_id = initiating_party_reference_id

    @property
    def funds_available(self):
        """Gets the funds_available of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501

        Information whether sufficient funding is available.   # noqa: E501

        :return: The funds_available of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._funds_available

    @funds_available.setter
    def funds_available(self, funds_available):
        """Sets the funds_available of this CommonPaymentDataRefundDetailsResponse.

        Information whether sufficient funding is available.   # noqa: E501

        :param funds_available: The funds_available of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :type: bool
        """

        self._funds_available = funds_available

    @property
    def debtor_information(self):
        """Gets the debtor_information of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501


        :return: The debtor_information of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :rtype: DebtorInformation
        """
        return self._debtor_information

    @debtor_information.setter
    def debtor_information(self, debtor_information):
        """Sets the debtor_information of this CommonPaymentDataRefundDetailsResponse.


        :param debtor_information: The debtor_information of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :type: DebtorInformation
        """

        self._debtor_information = debtor_information

    @property
    def authorisation_required_data(self):
        """Gets the authorisation_required_data of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501


        :return: The authorisation_required_data of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :rtype: AuthorisationRequiredData
        """
        return self._authorisation_required_data

    @authorisation_required_data.setter
    def authorisation_required_data(self, authorisation_required_data):
        """Sets the authorisation_required_data of this CommonPaymentDataRefundDetailsResponse.


        :param authorisation_required_data: The authorisation_required_data of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :type: AuthorisationRequiredData
        """

        self._authorisation_required_data = authorisation_required_data

    @property
    def psu_message(self):
        """Gets the psu_message of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501

        Text to be displayed to the PSU.   # noqa: E501

        :return: The psu_message of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :rtype: str
        """
        return self._psu_message

    @psu_message.setter
    def psu_message(self, psu_message):
        """Sets the psu_message of this CommonPaymentDataRefundDetailsResponse.

        Text to be displayed to the PSU.   # noqa: E501

        :param psu_message: The psu_message of this CommonPaymentDataRefundDetailsResponse.  # noqa: E501
        :type: str
        """

        self._psu_message = psu_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CommonPaymentDataRefundDetailsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CommonPaymentDataRefundDetailsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
