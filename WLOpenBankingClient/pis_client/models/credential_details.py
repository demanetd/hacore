# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CredentialDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_secret': 'bool',
        'credential_id': 'str',
        'label_list': 'list[CredentialLabel]'
    }

    attribute_map = {
        'is_secret': 'IsSecret',
        'credential_id': 'CredentialId',
        'label_list': 'LabelList'
    }

    def __init__(self, is_secret=None, credential_id=None, label_list=None):  # noqa: E501
        """CredentialDetails - a model defined in Swagger"""  # noqa: E501
        self._is_secret = None
        self._credential_id = None
        self._label_list = None
        self.discriminator = None
        self.is_secret = is_secret
        self.credential_id = credential_id
        self.label_list = label_list

    @property
    def is_secret(self):
        """Gets the is_secret of this CredentialDetails.  # noqa: E501

        Binary identification of the transparancy of the provided credentials by the PSU. Can have 2 values, * true * false  Can be provided by ASPSP. If not provided by the ASPSP then by default, * true, if the CredentialId=ewl-password * false, if CredentialId=ewl-user-id   # noqa: E501

        :return: The is_secret of this CredentialDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_secret

    @is_secret.setter
    def is_secret(self, is_secret):
        """Sets the is_secret of this CredentialDetails.

        Binary identification of the transparancy of the provided credentials by the PSU. Can have 2 values, * true * false  Can be provided by ASPSP. If not provided by the ASPSP then by default, * true, if the CredentialId=ewl-password * false, if CredentialId=ewl-user-id   # noqa: E501

        :param is_secret: The is_secret of this CredentialDetails.  # noqa: E501
        :type: bool
        """
        if is_secret is None:
            raise ValueError("Invalid value for `is_secret`, must not be `None`")  # noqa: E501

        self._is_secret = is_secret

    @property
    def credential_id(self):
        """Gets the credential_id of this CredentialDetails.  # noqa: E501

        Credential detail identification of the PSU credential at the bank (provided bi CBI if approach is Embedded). If not provided by the ASPSP, then default values should be, * ewl-user-id, when IsSecret=false * ewl-password, when IsSecret=true   # noqa: E501

        :return: The credential_id of this CredentialDetails.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this CredentialDetails.

        Credential detail identification of the PSU credential at the bank (provided bi CBI if approach is Embedded). If not provided by the ASPSP, then default values should be, * ewl-user-id, when IsSecret=false * ewl-password, when IsSecret=true   # noqa: E501

        :param credential_id: The credential_id of this CredentialDetails.  # noqa: E501
        :type: str
        """
        if credential_id is None:
            raise ValueError("Invalid value for `credential_id`, must not be `None`")  # noqa: E501

        self._credential_id = credential_id

    @property
    def label_list(self):
        """Gets the label_list of this CredentialDetails.  # noqa: E501

        The list of the labels to show to the PSU. They are internationalized.   # noqa: E501

        :return: The label_list of this CredentialDetails.  # noqa: E501
        :rtype: list[CredentialLabel]
        """
        return self._label_list

    @label_list.setter
    def label_list(self, label_list):
        """Sets the label_list of this CredentialDetails.

        The list of the labels to show to the PSU. They are internationalized.   # noqa: E501

        :param label_list: The label_list of this CredentialDetails.  # noqa: E501
        :type: list[CredentialLabel]
        """
        if label_list is None:
            raise ValueError("Invalid value for `label_list`, must not be `None`")  # noqa: E501

        self._label_list = label_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CredentialDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CredentialDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
