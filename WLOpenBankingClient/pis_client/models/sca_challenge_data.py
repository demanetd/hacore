# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ScaChallengeData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_information': 'str',
        'data': 'list[str]',
        'image': 'str',
        'image_link': 'str',
        'otp_format': 'str',
        'otp_max_length': 'int'
    }

    attribute_map = {
        'additional_information': 'AdditionalInformation',
        'data': 'Data',
        'image': 'Image',
        'image_link': 'ImageLink',
        'otp_format': 'OtpFormat',
        'otp_max_length': 'OtpMaxLength'
    }

    def __init__(self, additional_information=None, data=None, image=None, image_link=None, otp_format=None, otp_max_length=None):  # noqa: E501
        """ScaChallengeData - a model defined in Swagger"""  # noqa: E501
        self._additional_information = None
        self._data = None
        self._image = None
        self._image_link = None
        self._otp_format = None
        self._otp_max_length = None
        self.discriminator = None
        if additional_information is not None:
            self.additional_information = additional_information
        if data is not None:
            self.data = data
        if image is not None:
            self.image = image
        if image_link is not None:
            self.image_link = image_link
        if otp_format is not None:
            self.otp_format = otp_format
        if otp_max_length is not None:
            self.otp_max_length = otp_max_length

    @property
    def additional_information(self):
        """Gets the additional_information of this ScaChallengeData.  # noqa: E501

        Additional Information for the PSU describing the method.   # noqa: E501

        :return: The additional_information of this ScaChallengeData.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this ScaChallengeData.

        Additional Information for the PSU describing the method.   # noqa: E501

        :param additional_information: The additional_information of this ScaChallengeData.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    @property
    def data(self):
        """Gets the data of this ScaChallengeData.  # noqa: E501

        A collection of strings as challenge data.   # noqa: E501

        :return: The data of this ScaChallengeData.  # noqa: E501
        :rtype: list[str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ScaChallengeData.

        A collection of strings as challenge data.   # noqa: E501

        :param data: The data of this ScaChallengeData.  # noqa: E501
        :type: list[str]
        """

        self._data = data

    @property
    def image(self):
        """Gets the image of this ScaChallengeData.  # noqa: E501

        Image in base64 encoding   # noqa: E501

        :return: The image of this ScaChallengeData.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this ScaChallengeData.

        Image in base64 encoding   # noqa: E501

        :param image: The image of this ScaChallengeData.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def image_link(self):
        """Gets the image_link of this ScaChallengeData.  # noqa: E501

        URL of image   # noqa: E501

        :return: The image_link of this ScaChallengeData.  # noqa: E501
        :rtype: str
        """
        return self._image_link

    @image_link.setter
    def image_link(self, image_link):
        """Sets the image_link of this ScaChallengeData.

        URL of image   # noqa: E501

        :param image_link: The image_link of this ScaChallengeData.  # noqa: E501
        :type: str
        """

        self._image_link = image_link

    @property
    def otp_format(self):
        """Gets the otp_format of this ScaChallengeData.  # noqa: E501

        The OTP format.   # noqa: E501

        :return: The otp_format of this ScaChallengeData.  # noqa: E501
        :rtype: str
        """
        return self._otp_format

    @otp_format.setter
    def otp_format(self, otp_format):
        """Sets the otp_format of this ScaChallengeData.

        The OTP format.   # noqa: E501

        :param otp_format: The otp_format of this ScaChallengeData.  # noqa: E501
        :type: str
        """

        self._otp_format = otp_format

    @property
    def otp_max_length(self):
        """Gets the otp_max_length of this ScaChallengeData.  # noqa: E501

        The maximum length for the OTP.   # noqa: E501

        :return: The otp_max_length of this ScaChallengeData.  # noqa: E501
        :rtype: int
        """
        return self._otp_max_length

    @otp_max_length.setter
    def otp_max_length(self, otp_max_length):
        """Sets the otp_max_length of this ScaChallengeData.

        The maximum length for the OTP.   # noqa: E501

        :param otp_max_length: The otp_max_length of this ScaChallengeData.  # noqa: E501
        :type: int
        """

        self._otp_max_length = otp_max_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ScaChallengeData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScaChallengeData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
