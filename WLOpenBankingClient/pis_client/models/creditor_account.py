# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditorAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'secondary_identification': 'str',
        'scheme_name': 'IdentificationTypeEnum',
        'identification': 'str',
        'currency': 'str'
    }

    attribute_map = {
        'secondary_identification': 'SecondaryIdentification',
        'scheme_name': 'SchemeName',
        'identification': 'Identification',
        'currency': 'Currency'
    }

    def __init__(self, secondary_identification=None, scheme_name=None, identification=None, currency=None):  # noqa: E501
        """CreditorAccount - a model defined in Swagger"""  # noqa: E501
        self._secondary_identification = None
        self._scheme_name = None
        self._identification = None
        self._currency = None
        self.discriminator = None
        if secondary_identification is not None:
            self.secondary_identification = secondary_identification
        if scheme_name is not None:
            self.scheme_name = scheme_name
        if identification is not None:
            self.identification = identification
        if currency is not None:
            self.currency = currency

    @property
    def secondary_identification(self):
        """Gets the secondary_identification of this CreditorAccount.  # noqa: E501

        Secondary identification of the Creditor Account, to which a credit entry will be made as a result of the transaction. (Only Openbank UK)   # noqa: E501

        :return: The secondary_identification of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._secondary_identification

    @secondary_identification.setter
    def secondary_identification(self, secondary_identification):
        """Sets the secondary_identification of this CreditorAccount.

        Secondary identification of the Creditor Account, to which a credit entry will be made as a result of the transaction. (Only Openbank UK)   # noqa: E501

        :param secondary_identification: The secondary_identification of this CreditorAccount.  # noqa: E501
        :type: str
        """

        self._secondary_identification = secondary_identification

    @property
    def scheme_name(self):
        """Gets the scheme_name of this CreditorAccount.  # noqa: E501


        :return: The scheme_name of this CreditorAccount.  # noqa: E501
        :rtype: IdentificationTypeEnum
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this CreditorAccount.


        :param scheme_name: The scheme_name of this CreditorAccount.  # noqa: E501
        :type: IdentificationTypeEnum
        """

        self._scheme_name = scheme_name

    @property
    def identification(self):
        """Gets the identification of this CreditorAccount.  # noqa: E501

        Identification of the Creditor Account. Can be given for P2P payments only.   # noqa: E501

        :return: The identification of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this CreditorAccount.

        Identification of the Creditor Account. Can be given for P2P payments only.   # noqa: E501

        :param identification: The identification of this CreditorAccount.  # noqa: E501
        :type: str
        """

        self._identification = identification

    @property
    def currency(self):
        """Gets the currency of this CreditorAccount.  # noqa: E501

        A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".   # noqa: E501

        :return: The currency of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreditorAccount.

        A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 \"Codes for the representation of currencies and funds\".   # noqa: E501

        :param currency: The currency of this CreditorAccount.  # noqa: E501
        :type: str
        """

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditorAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditorAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
