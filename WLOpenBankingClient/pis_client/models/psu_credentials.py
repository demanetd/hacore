# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PsuCredentials(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aspsp_product_code': 'str',
        'credentials_details': 'list[CredentialDetails]'
    }

    attribute_map = {
        'aspsp_product_code': 'AspspProductCode',
        'credentials_details': 'CredentialsDetails'
    }

    def __init__(self, aspsp_product_code=None, credentials_details=None):  # noqa: E501
        """PsuCredentials - a model defined in Swagger"""  # noqa: E501
        self._aspsp_product_code = None
        self._credentials_details = None
        self.discriminator = None
        if aspsp_product_code is not None:
            self.aspsp_product_code = aspsp_product_code
        self.credentials_details = credentials_details

    @property
    def aspsp_product_code(self):
        """Gets the aspsp_product_code of this PsuCredentials.  # noqa: E501

        Product Identification. Used to contextualize the credentials provided by the PSU for those ASPSP that need of it.   # noqa: E501

        :return: The aspsp_product_code of this PsuCredentials.  # noqa: E501
        :rtype: str
        """
        return self._aspsp_product_code

    @aspsp_product_code.setter
    def aspsp_product_code(self, aspsp_product_code):
        """Sets the aspsp_product_code of this PsuCredentials.

        Product Identification. Used to contextualize the credentials provided by the PSU for those ASPSP that need of it.   # noqa: E501

        :param aspsp_product_code: The aspsp_product_code of this PsuCredentials.  # noqa: E501
        :type: str
        """

        self._aspsp_product_code = aspsp_product_code

    @property
    def credentials_details(self):
        """Gets the credentials_details of this PsuCredentials.  # noqa: E501

        Credentials Details  # noqa: E501

        :return: The credentials_details of this PsuCredentials.  # noqa: E501
        :rtype: list[CredentialDetails]
        """
        return self._credentials_details

    @credentials_details.setter
    def credentials_details(self, credentials_details):
        """Sets the credentials_details of this PsuCredentials.

        Credentials Details  # noqa: E501

        :param credentials_details: The credentials_details of this PsuCredentials.  # noqa: E501
        :type: list[CredentialDetails]
        """
        if credentials_details is None:
            raise ValueError("Invalid value for `credentials_details`, must not be `None`")  # noqa: E501

        self._credentials_details = credentials_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PsuCredentials, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PsuCredentials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
