# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentAuthorisationUpdateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'psu_data': 'PsuDataIdentification',
        'psu_credentials': 'list[PsuAuthCredentials]',
        'authentication_method_id': 'str',
        'sca_authentication_data': 'str'
    }

    attribute_map = {
        'psu_data': 'PsuData',
        'psu_credentials': 'PsuCredentials',
        'authentication_method_id': 'AuthenticationMethodId',
        'sca_authentication_data': 'ScaAuthenticationData'
    }

    def __init__(self, psu_data=None, psu_credentials=None, authentication_method_id=None, sca_authentication_data=None):  # noqa: E501
        """PaymentAuthorisationUpdateRequest - a model defined in Swagger"""  # noqa: E501
        self._psu_data = None
        self._psu_credentials = None
        self._authentication_method_id = None
        self._sca_authentication_data = None
        self.discriminator = None
        if psu_data is not None:
            self.psu_data = psu_data
        if psu_credentials is not None:
            self.psu_credentials = psu_credentials
        if authentication_method_id is not None:
            self.authentication_method_id = authentication_method_id
        if sca_authentication_data is not None:
            self.sca_authentication_data = sca_authentication_data

    @property
    def psu_data(self):
        """Gets the psu_data of this PaymentAuthorisationUpdateRequest.  # noqa: E501


        :return: The psu_data of this PaymentAuthorisationUpdateRequest.  # noqa: E501
        :rtype: PsuDataIdentification
        """
        return self._psu_data

    @psu_data.setter
    def psu_data(self, psu_data):
        """Sets the psu_data of this PaymentAuthorisationUpdateRequest.


        :param psu_data: The psu_data of this PaymentAuthorisationUpdateRequest.  # noqa: E501
        :type: PsuDataIdentification
        """

        self._psu_data = psu_data

    @property
    def psu_credentials(self):
        """Gets the psu_credentials of this PaymentAuthorisationUpdateRequest.  # noqa: E501


        :return: The psu_credentials of this PaymentAuthorisationUpdateRequest.  # noqa: E501
        :rtype: list[PsuAuthCredentials]
        """
        return self._psu_credentials

    @psu_credentials.setter
    def psu_credentials(self, psu_credentials):
        """Sets the psu_credentials of this PaymentAuthorisationUpdateRequest.


        :param psu_credentials: The psu_credentials of this PaymentAuthorisationUpdateRequest.  # noqa: E501
        :type: list[PsuAuthCredentials]
        """

        self._psu_credentials = psu_credentials

    @property
    def authentication_method_id(self):
        """Gets the authentication_method_id of this PaymentAuthorisationUpdateRequest.  # noqa: E501

        Id of the selected method.   # noqa: E501

        :return: The authentication_method_id of this PaymentAuthorisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._authentication_method_id

    @authentication_method_id.setter
    def authentication_method_id(self, authentication_method_id):
        """Sets the authentication_method_id of this PaymentAuthorisationUpdateRequest.

        Id of the selected method.   # noqa: E501

        :param authentication_method_id: The authentication_method_id of this PaymentAuthorisationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._authentication_method_id = authentication_method_id

    @property
    def sca_authentication_data(self):
        """Gets the sca_authentication_data of this PaymentAuthorisationUpdateRequest.  # noqa: E501

        Depending on method. In case of binary data it has to be given base64 encoded.   # noqa: E501

        :return: The sca_authentication_data of this PaymentAuthorisationUpdateRequest.  # noqa: E501
        :rtype: str
        """
        return self._sca_authentication_data

    @sca_authentication_data.setter
    def sca_authentication_data(self, sca_authentication_data):
        """Sets the sca_authentication_data of this PaymentAuthorisationUpdateRequest.

        Depending on method. In case of binary data it has to be given base64 encoded.   # noqa: E501

        :param sca_authentication_data: The sca_authentication_data of this PaymentAuthorisationUpdateRequest.  # noqa: E501
        :type: str
        """

        self._sca_authentication_data = sca_authentication_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentAuthorisationUpdateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentAuthorisationUpdateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
