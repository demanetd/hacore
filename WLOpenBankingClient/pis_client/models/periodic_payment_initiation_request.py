# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PeriodicPaymentInitiationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_product': 'list[PaymentProductEnum]',
        'payment_product_changeable': 'bool',
        'product_specific_master_data': 'list[ProductSpecificMasterData]',
        'psu_data': 'PsuData',
        'common_payment_data': 'PeriodicPaymentInitiationRequestBasic'
    }

    attribute_map = {
        'payment_product': 'PaymentProduct',
        'payment_product_changeable': 'PaymentProductChangeable',
        'product_specific_master_data': 'ProductSpecificMasterData',
        'psu_data': 'PsuData',
        'common_payment_data': 'CommonPaymentData'
    }

    def __init__(self, payment_product=None, payment_product_changeable=False, product_specific_master_data=None, psu_data=None, common_payment_data=None):  # noqa: E501
        """PeriodicPaymentInitiationRequest - a model defined in Swagger"""  # noqa: E501
        self._payment_product = None
        self._payment_product_changeable = None
        self._product_specific_master_data = None
        self._psu_data = None
        self._common_payment_data = None
        self.discriminator = None
        if payment_product is not None:
            self.payment_product = payment_product
        if payment_product_changeable is not None:
            self.payment_product_changeable = payment_product_changeable
        if product_specific_master_data is not None:
            self.product_specific_master_data = product_specific_master_data
        if psu_data is not None:
            self.psu_data = psu_data
        self.common_payment_data = common_payment_data

    @property
    def payment_product(self):
        """Gets the payment_product of this PeriodicPaymentInitiationRequest.  # noqa: E501

        Multiple PaymentProducts can only be supplied if `UseAuthorisationLandingPages` equals `TRUE`. These will then influence ASPSPs visible to the PSU on the Bank Selection Interface.   # noqa: E501

        :return: The payment_product of this PeriodicPaymentInitiationRequest.  # noqa: E501
        :rtype: list[PaymentProductEnum]
        """
        return self._payment_product

    @payment_product.setter
    def payment_product(self, payment_product):
        """Sets the payment_product of this PeriodicPaymentInitiationRequest.

        Multiple PaymentProducts can only be supplied if `UseAuthorisationLandingPages` equals `TRUE`. These will then influence ASPSPs visible to the PSU on the Bank Selection Interface.   # noqa: E501

        :param payment_product: The payment_product of this PeriodicPaymentInitiationRequest.  # noqa: E501
        :type: list[PaymentProductEnum]
        """

        self._payment_product = payment_product

    @property
    def payment_product_changeable(self):
        """Gets the payment_product_changeable of this PeriodicPaymentInitiationRequest.  # noqa: E501

        Allowing PSU to change pre-selected payment product if the ASPSP supports more than one from the list provided by the Initiating Party. Usable only if `UseAuthorisationLandingPages` equals `TRUE`. Otherwise will be ignored.   # noqa: E501

        :return: The payment_product_changeable of this PeriodicPaymentInitiationRequest.  # noqa: E501
        :rtype: bool
        """
        return self._payment_product_changeable

    @payment_product_changeable.setter
    def payment_product_changeable(self, payment_product_changeable):
        """Sets the payment_product_changeable of this PeriodicPaymentInitiationRequest.

        Allowing PSU to change pre-selected payment product if the ASPSP supports more than one from the list provided by the Initiating Party. Usable only if `UseAuthorisationLandingPages` equals `TRUE`. Otherwise will be ignored.   # noqa: E501

        :param payment_product_changeable: The payment_product_changeable of this PeriodicPaymentInitiationRequest.  # noqa: E501
        :type: bool
        """

        self._payment_product_changeable = payment_product_changeable

    @property
    def product_specific_master_data(self):
        """Gets the product_specific_master_data of this PeriodicPaymentInitiationRequest.  # noqa: E501

        The array is defined to mention the master data specific to selected payment product   # noqa: E501

        :return: The product_specific_master_data of this PeriodicPaymentInitiationRequest.  # noqa: E501
        :rtype: list[ProductSpecificMasterData]
        """
        return self._product_specific_master_data

    @product_specific_master_data.setter
    def product_specific_master_data(self, product_specific_master_data):
        """Sets the product_specific_master_data of this PeriodicPaymentInitiationRequest.

        The array is defined to mention the master data specific to selected payment product   # noqa: E501

        :param product_specific_master_data: The product_specific_master_data of this PeriodicPaymentInitiationRequest.  # noqa: E501
        :type: list[ProductSpecificMasterData]
        """

        self._product_specific_master_data = product_specific_master_data

    @property
    def psu_data(self):
        """Gets the psu_data of this PeriodicPaymentInitiationRequest.  # noqa: E501


        :return: The psu_data of this PeriodicPaymentInitiationRequest.  # noqa: E501
        :rtype: PsuData
        """
        return self._psu_data

    @psu_data.setter
    def psu_data(self, psu_data):
        """Sets the psu_data of this PeriodicPaymentInitiationRequest.


        :param psu_data: The psu_data of this PeriodicPaymentInitiationRequest.  # noqa: E501
        :type: PsuData
        """

        self._psu_data = psu_data

    @property
    def common_payment_data(self):
        """Gets the common_payment_data of this PeriodicPaymentInitiationRequest.  # noqa: E501


        :return: The common_payment_data of this PeriodicPaymentInitiationRequest.  # noqa: E501
        :rtype: PeriodicPaymentInitiationRequestBasic
        """
        return self._common_payment_data

    @common_payment_data.setter
    def common_payment_data(self, common_payment_data):
        """Sets the common_payment_data of this PeriodicPaymentInitiationRequest.


        :param common_payment_data: The common_payment_data of this PeriodicPaymentInitiationRequest.  # noqa: E501
        :type: PeriodicPaymentInitiationRequestBasic
        """
        if common_payment_data is None:
            raise ValueError("Invalid value for `common_payment_data`, must not be `None`")  # noqa: E501

        self._common_payment_data = common_payment_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PeriodicPaymentInitiationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PeriodicPaymentInitiationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
