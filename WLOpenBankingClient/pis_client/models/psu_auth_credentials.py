# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PsuAuthCredentials(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credential_id': 'str',
        'credential_value': 'str'
    }

    attribute_map = {
        'credential_id': 'CredentialId',
        'credential_value': 'CredentialValue'
    }

    def __init__(self, credential_id=None, credential_value=None):  # noqa: E501
        """PsuAuthCredentials - a model defined in Swagger"""  # noqa: E501
        self._credential_id = None
        self._credential_value = None
        self.discriminator = None
        self.credential_id = credential_id
        self.credential_value = credential_value

    @property
    def credential_id(self):
        """Gets the credential_id of this PsuAuthCredentials.  # noqa: E501

        CredentialId as retrieved in the response of the previous request.   # noqa: E501

        :return: The credential_id of this PsuAuthCredentials.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this PsuAuthCredentials.

        CredentialId as retrieved in the response of the previous request.   # noqa: E501

        :param credential_id: The credential_id of this PsuAuthCredentials.  # noqa: E501
        :type: str
        """
        if credential_id is None:
            raise ValueError("Invalid value for `credential_id`, must not be `None`")  # noqa: E501

        self._credential_id = credential_id

    @property
    def credential_value(self):
        """Gets the credential_value of this PsuAuthCredentials.  # noqa: E501

        Value of the credential.   # noqa: E501

        :return: The credential_value of this PsuAuthCredentials.  # noqa: E501
        :rtype: str
        """
        return self._credential_value

    @credential_value.setter
    def credential_value(self, credential_value):
        """Sets the credential_value of this PsuAuthCredentials.

        Value of the credential.   # noqa: E501

        :param credential_value: The credential_value of this PsuAuthCredentials.  # noqa: E501
        :type: str
        """
        if credential_value is None:
            raise ValueError("Invalid value for `credential_value`, must not be `None`")  # noqa: E501

        self._credential_value = credential_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PsuAuthCredentials, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PsuAuthCredentials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
