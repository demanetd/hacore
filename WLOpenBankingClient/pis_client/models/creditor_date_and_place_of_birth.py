# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditorDateAndPlaceOfBirth(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'birth_date': 'date',
        'city_of_birth': 'str',
        'country_of_birth': 'str'
    }

    attribute_map = {
        'birth_date': 'BirthDate',
        'city_of_birth': 'CityOfBirth',
        'country_of_birth': 'CountryOfBirth'
    }

    def __init__(self, birth_date=None, city_of_birth=None, country_of_birth=None):  # noqa: E501
        """CreditorDateAndPlaceOfBirth - a model defined in Swagger"""  # noqa: E501
        self._birth_date = None
        self._city_of_birth = None
        self._country_of_birth = None
        self.discriminator = None
        self.birth_date = birth_date
        self.city_of_birth = city_of_birth
        self.country_of_birth = country_of_birth

    @property
    def birth_date(self):
        """Gets the birth_date of this CreditorDateAndPlaceOfBirth.  # noqa: E501

        Date on which a person is born.  # noqa: E501

        :return: The birth_date of this CreditorDateAndPlaceOfBirth.  # noqa: E501
        :rtype: date
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this CreditorDateAndPlaceOfBirth.

        Date on which a person is born.  # noqa: E501

        :param birth_date: The birth_date of this CreditorDateAndPlaceOfBirth.  # noqa: E501
        :type: date
        """
        if birth_date is None:
            raise ValueError("Invalid value for `birth_date`, must not be `None`")  # noqa: E501

        self._birth_date = birth_date

    @property
    def city_of_birth(self):
        """Gets the city_of_birth of this CreditorDateAndPlaceOfBirth.  # noqa: E501

        City where a person was born.  # noqa: E501

        :return: The city_of_birth of this CreditorDateAndPlaceOfBirth.  # noqa: E501
        :rtype: str
        """
        return self._city_of_birth

    @city_of_birth.setter
    def city_of_birth(self, city_of_birth):
        """Sets the city_of_birth of this CreditorDateAndPlaceOfBirth.

        City where a person was born.  # noqa: E501

        :param city_of_birth: The city_of_birth of this CreditorDateAndPlaceOfBirth.  # noqa: E501
        :type: str
        """
        if city_of_birth is None:
            raise ValueError("Invalid value for `city_of_birth`, must not be `None`")  # noqa: E501

        self._city_of_birth = city_of_birth

    @property
    def country_of_birth(self):
        """Gets the country_of_birth of this CreditorDateAndPlaceOfBirth.  # noqa: E501

        Country where a person was born.  # noqa: E501

        :return: The country_of_birth of this CreditorDateAndPlaceOfBirth.  # noqa: E501
        :rtype: str
        """
        return self._country_of_birth

    @country_of_birth.setter
    def country_of_birth(self, country_of_birth):
        """Sets the country_of_birth of this CreditorDateAndPlaceOfBirth.

        Country where a person was born.  # noqa: E501

        :param country_of_birth: The country_of_birth of this CreditorDateAndPlaceOfBirth.  # noqa: E501
        :type: str
        """
        if country_of_birth is None:
            raise ValueError("Invalid value for `country_of_birth`, must not be `None`")  # noqa: E501

        self._country_of_birth = country_of_birth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditorDateAndPlaceOfBirth, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditorDateAndPlaceOfBirth):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
