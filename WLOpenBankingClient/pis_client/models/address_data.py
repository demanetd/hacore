# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddressData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'last_name': 'str',
        'company_name': 'str',
        'post_code': 'str',
        'building_number': 'str',
        'floor': 'str',
        'street_name': 'str',
        'town_name': 'str',
        'country': 'str',
        'country_sub_division': 'str'
    }

    attribute_map = {
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'company_name': 'CompanyName',
        'post_code': 'PostCode',
        'building_number': 'BuildingNumber',
        'floor': 'Floor',
        'street_name': 'StreetName',
        'town_name': 'TownName',
        'country': 'Country',
        'country_sub_division': 'CountrySubDivision'
    }

    def __init__(self, first_name=None, last_name=None, company_name=None, post_code=None, building_number=None, floor=None, street_name=None, town_name=None, country=None, country_sub_division=None):  # noqa: E501
        """AddressData - a model defined in Swagger"""  # noqa: E501
        self._first_name = None
        self._last_name = None
        self._company_name = None
        self._post_code = None
        self._building_number = None
        self._floor = None
        self._street_name = None
        self._town_name = None
        self._country = None
        self._country_sub_division = None
        self.discriminator = None
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if company_name is not None:
            self.company_name = company_name
        if post_code is not None:
            self.post_code = post_code
        if building_number is not None:
            self.building_number = building_number
        if floor is not None:
            self.floor = floor
        if street_name is not None:
            self.street_name = street_name
        if town_name is not None:
            self.town_name = town_name
        if country is not None:
            self.country = country
        if country_sub_division is not None:
            self.country_sub_division = country_sub_division

    @property
    def first_name(self):
        """Gets the first_name of this AddressData.  # noqa: E501

        The first name of the debtor   # noqa: E501

        :return: The first_name of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AddressData.

        The first name of the debtor   # noqa: E501

        :param first_name: The first_name of this AddressData.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AddressData.  # noqa: E501

        The last name of the debtor   # noqa: E501

        :return: The last_name of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AddressData.

        The last name of the debtor   # noqa: E501

        :param last_name: The last_name of this AddressData.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def company_name(self):
        """Gets the company_name of this AddressData.  # noqa: E501

        The company name of the debtor   # noqa: E501

        :return: The company_name of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this AddressData.

        The company name of the debtor   # noqa: E501

        :param company_name: The company_name of this AddressData.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def post_code(self):
        """Gets the post_code of this AddressData.  # noqa: E501

        The postal code of the address without spaces   # noqa: E501

        :return: The post_code of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._post_code

    @post_code.setter
    def post_code(self, post_code):
        """Sets the post_code of this AddressData.

        The postal code of the address without spaces   # noqa: E501

        :param post_code: The post_code of this AddressData.  # noqa: E501
        :type: str
        """

        self._post_code = post_code

    @property
    def building_number(self):
        """Gets the building_number of this AddressData.  # noqa: E501

        The house number of the address   # noqa: E501

        :return: The building_number of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._building_number

    @building_number.setter
    def building_number(self, building_number):
        """Sets the building_number of this AddressData.

        The house number of the address   # noqa: E501

        :param building_number: The building_number of this AddressData.  # noqa: E501
        :type: str
        """

        self._building_number = building_number

    @property
    def floor(self):
        """Gets the floor of this AddressData.  # noqa: E501

        The addition of the address   # noqa: E501

        :return: The floor of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._floor

    @floor.setter
    def floor(self, floor):
        """Sets the floor of this AddressData.

        The addition of the address   # noqa: E501

        :param floor: The floor of this AddressData.  # noqa: E501
        :type: str
        """

        self._floor = floor

    @property
    def street_name(self):
        """Gets the street_name of this AddressData.  # noqa: E501

        The street of the address   # noqa: E501

        :return: The street_name of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this AddressData.

        The street of the address   # noqa: E501

        :param street_name: The street_name of this AddressData.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def town_name(self):
        """Gets the town_name of this AddressData.  # noqa: E501

        The city of the address   # noqa: E501

        :return: The town_name of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._town_name

    @town_name.setter
    def town_name(self, town_name):
        """Sets the town_name of this AddressData.

        The city of the address   # noqa: E501

        :param town_name: The town_name of this AddressData.  # noqa: E501
        :type: str
        """

        self._town_name = town_name

    @property
    def country(self):
        """Gets the country of this AddressData.  # noqa: E501

        The code of the coutry regarding ISO 3166 standard. For the IDEAL payments the country name will be provided   # noqa: E501

        :return: The country of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this AddressData.

        The code of the coutry regarding ISO 3166 standard. For the IDEAL payments the country name will be provided   # noqa: E501

        :param country: The country of this AddressData.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_sub_division(self):
        """Gets the country_sub_division of this AddressData.  # noqa: E501

        Country sub division.   # noqa: E501

        :return: The country_sub_division of this AddressData.  # noqa: E501
        :rtype: str
        """
        return self._country_sub_division

    @country_sub_division.setter
    def country_sub_division(self, country_sub_division):
        """Sets the country_sub_division of this AddressData.

        Country sub division.   # noqa: E501

        :param country_sub_division: The country_sub_division of this AddressData.  # noqa: E501
        :type: str
        """

        self._country_sub_division = country_sub_division

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddressData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddressData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
