# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DebtorInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'agent': 'str',
        'account': 'DebtorAccount',
        'ultimate_debtor': 'str',
        'shipping_address': 'AddressData',
        'billing_address': 'BillingAddress'
    }

    attribute_map = {
        'name': 'Name',
        'agent': 'Agent',
        'account': 'Account',
        'ultimate_debtor': 'UltimateDebtor',
        'shipping_address': 'ShippingAddress',
        'billing_address': 'BillingAddress'
    }

    def __init__(self, name=None, agent=None, account=None, ultimate_debtor=None, shipping_address=None, billing_address=None):  # noqa: E501
        """DebtorInformation - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._agent = None
        self._account = None
        self._ultimate_debtor = None
        self._shipping_address = None
        self._billing_address = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if agent is not None:
            self.agent = agent
        if account is not None:
            self.account = account
        if ultimate_debtor is not None:
            self.ultimate_debtor = ultimate_debtor
        if shipping_address is not None:
            self.shipping_address = shipping_address
        if billing_address is not None:
            self.billing_address = billing_address

    @property
    def name(self):
        """Gets the name of this DebtorInformation.  # noqa: E501

        The name of the debtor.   # noqa: E501

        :return: The name of this DebtorInformation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DebtorInformation.

        The name of the debtor.   # noqa: E501

        :param name: The name of this DebtorInformation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def agent(self):
        """Gets the agent of this DebtorInformation.  # noqa: E501

        BIC of the financial institution servicing an account for the debtor.   # noqa: E501

        :return: The agent of this DebtorInformation.  # noqa: E501
        :rtype: str
        """
        return self._agent

    @agent.setter
    def agent(self, agent):
        """Sets the agent of this DebtorInformation.

        BIC of the financial institution servicing an account for the debtor.   # noqa: E501

        :param agent: The agent of this DebtorInformation.  # noqa: E501
        :type: str
        """

        self._agent = agent

    @property
    def account(self):
        """Gets the account of this DebtorInformation.  # noqa: E501


        :return: The account of this DebtorInformation.  # noqa: E501
        :rtype: DebtorAccount
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this DebtorInformation.


        :param account: The account of this DebtorInformation.  # noqa: E501
        :type: DebtorAccount
        """

        self._account = account

    @property
    def ultimate_debtor(self):
        """Gets the ultimate_debtor of this DebtorInformation.  # noqa: E501

        Ultimate party that owes an amount of money to the (ultimate) creditor.   # noqa: E501

        :return: The ultimate_debtor of this DebtorInformation.  # noqa: E501
        :rtype: str
        """
        return self._ultimate_debtor

    @ultimate_debtor.setter
    def ultimate_debtor(self, ultimate_debtor):
        """Sets the ultimate_debtor of this DebtorInformation.

        Ultimate party that owes an amount of money to the (ultimate) creditor.   # noqa: E501

        :param ultimate_debtor: The ultimate_debtor of this DebtorInformation.  # noqa: E501
        :type: str
        """

        self._ultimate_debtor = ultimate_debtor

    @property
    def shipping_address(self):
        """Gets the shipping_address of this DebtorInformation.  # noqa: E501


        :return: The shipping_address of this DebtorInformation.  # noqa: E501
        :rtype: AddressData
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this DebtorInformation.


        :param shipping_address: The shipping_address of this DebtorInformation.  # noqa: E501
        :type: AddressData
        """

        self._shipping_address = shipping_address

    @property
    def billing_address(self):
        """Gets the billing_address of this DebtorInformation.  # noqa: E501


        :return: The billing_address of this DebtorInformation.  # noqa: E501
        :rtype: BillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this DebtorInformation.


        :param billing_address: The billing_address of this DebtorInformation.  # noqa: E501
        :type: BillingAddress
        """

        self._billing_address = billing_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebtorInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebtorInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
