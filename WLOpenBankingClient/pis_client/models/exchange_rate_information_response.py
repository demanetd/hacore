# coding: utf-8

"""
    Open Banking Payment Initiation Service

    ### Introduction There are several flows (sequence of API calls) to complete a payment. Which API's are required depend on the choosen `PaymentProduct`, ASPSP (debtor bank) and the chosen strong customer authentication approach. The response of an API call will indicate in the 'Links' section which next API call is required to complete the payment. Both PSD2 and IDEAL payments are supported.  #### PSD2 Sandbox Several AspspId's are available to test specific PSD2 payment initiation scenario's, see sandbox documentation.  The following authorization token can be used to test in the sandbox (unlike a real token this one doesn't expire): **97fb13a74c712d8c7a50476e71769eaf**   # noqa: E501

    OpenAPI spec version: 3.9.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExchangeRateInformationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'unit_currency': 'str',
        'exchange_rate': 'float',
        'rate_type': 'str',
        'contract_identification': 'str',
        'expiration_date_time': 'datetime'
    }

    attribute_map = {
        'unit_currency': 'UnitCurrency',
        'exchange_rate': 'ExchangeRate',
        'rate_type': 'RateType',
        'contract_identification': 'ContractIdentification',
        'expiration_date_time': 'ExpirationDateTime'
    }

    def __init__(self, unit_currency=None, exchange_rate=None, rate_type=None, contract_identification=None, expiration_date_time=None):  # noqa: E501
        """ExchangeRateInformationResponse - a model defined in Swagger"""  # noqa: E501
        self._unit_currency = None
        self._exchange_rate = None
        self._rate_type = None
        self._contract_identification = None
        self._expiration_date_time = None
        self.discriminator = None
        if unit_currency is not None:
            self.unit_currency = unit_currency
        if exchange_rate is not None:
            self.exchange_rate = exchange_rate
        if rate_type is not None:
            self.rate_type = rate_type
        if contract_identification is not None:
            self.contract_identification = contract_identification
        if expiration_date_time is not None:
            self.expiration_date_time = expiration_date_time

    @property
    def unit_currency(self):
        """Gets the unit_currency of this ExchangeRateInformationResponse.  # noqa: E501

        Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.   # noqa: E501

        :return: The unit_currency of this ExchangeRateInformationResponse.  # noqa: E501
        :rtype: str
        """
        return self._unit_currency

    @unit_currency.setter
    def unit_currency(self, unit_currency):
        """Sets the unit_currency of this ExchangeRateInformationResponse.

        Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.   # noqa: E501

        :param unit_currency: The unit_currency of this ExchangeRateInformationResponse.  # noqa: E501
        :type: str
        """

        self._unit_currency = unit_currency

    @property
    def exchange_rate(self):
        """Gets the exchange_rate of this ExchangeRateInformationResponse.  # noqa: E501

        The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency. Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.   # noqa: E501

        :return: The exchange_rate of this ExchangeRateInformationResponse.  # noqa: E501
        :rtype: float
        """
        return self._exchange_rate

    @exchange_rate.setter
    def exchange_rate(self, exchange_rate):
        """Sets the exchange_rate of this ExchangeRateInformationResponse.

        The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency. Rate expressed as a decimal, for example, 0.7 is 7/10 and 70%.   # noqa: E501

        :param exchange_rate: The exchange_rate of this ExchangeRateInformationResponse.  # noqa: E501
        :type: float
        """

        self._exchange_rate = exchange_rate

    @property
    def rate_type(self):
        """Gets the rate_type of this ExchangeRateInformationResponse.  # noqa: E501

        Specifies the type used to complete the currency exchange. * Spot: Exchange rate applied is the spot rate. * Sale: Exchange rate applied is the market rate at the time of the sale. * Agreed: Exchange rate applied is the rate agreed between the parties.   # noqa: E501

        :return: The rate_type of this ExchangeRateInformationResponse.  # noqa: E501
        :rtype: str
        """
        return self._rate_type

    @rate_type.setter
    def rate_type(self, rate_type):
        """Sets the rate_type of this ExchangeRateInformationResponse.

        Specifies the type used to complete the currency exchange. * Spot: Exchange rate applied is the spot rate. * Sale: Exchange rate applied is the market rate at the time of the sale. * Agreed: Exchange rate applied is the rate agreed between the parties.   # noqa: E501

        :param rate_type: The rate_type of this ExchangeRateInformationResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Spot", "Sale", "Agreed"]  # noqa: E501
        if rate_type not in allowed_values:
            raise ValueError(
                "Invalid value for `rate_type` ({0}), must be one of {1}"  # noqa: E501
                .format(rate_type, allowed_values)
            )

        self._rate_type = rate_type

    @property
    def contract_identification(self):
        """Gets the contract_identification of this ExchangeRateInformationResponse.  # noqa: E501

        Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.   # noqa: E501

        :return: The contract_identification of this ExchangeRateInformationResponse.  # noqa: E501
        :rtype: str
        """
        return self._contract_identification

    @contract_identification.setter
    def contract_identification(self, contract_identification):
        """Sets the contract_identification of this ExchangeRateInformationResponse.

        Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.   # noqa: E501

        :param contract_identification: The contract_identification of this ExchangeRateInformationResponse.  # noqa: E501
        :type: str
        """

        self._contract_identification = contract_identification

    @property
    def expiration_date_time(self):
        """Gets the expiration_date_time of this ExchangeRateInformationResponse.  # noqa: E501

        Expiration date time. ISO 8601 DateTime.   # noqa: E501

        :return: The expiration_date_time of this ExchangeRateInformationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date_time

    @expiration_date_time.setter
    def expiration_date_time(self, expiration_date_time):
        """Sets the expiration_date_time of this ExchangeRateInformationResponse.

        Expiration date time. ISO 8601 DateTime.   # noqa: E501

        :param expiration_date_time: The expiration_date_time of this ExchangeRateInformationResponse.  # noqa: E501
        :type: datetime
        """

        self._expiration_date_time = expiration_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExchangeRateInformationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExchangeRateInformationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
